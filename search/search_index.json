{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs None Yups MkDocs tool untuk membuat static html dari markdown. Selamat datang n halaman ini untuk menaruh news dari situs ini. sering2 di check barang kali salah satu dari Arduino PlatformIo ESP32, ESP8266 AVR STM32 PLC siemens PLC Mitsubishi Scada DCS OPC C-lang V-lang Nim-lang Spice baik TI-SPice atau LT-Spice Linux (Artix, Debian) Bisa jadi bahan diskusi kita heheh ;)","title":"Home"},{"location":"#welcome-to-mkdocs","text":"None Yups MkDocs tool untuk membuat static html dari markdown. Selamat datang n halaman ini untuk menaruh news dari situs ini. sering2 di check barang kali salah satu dari Arduino PlatformIo ESP32, ESP8266 AVR STM32 PLC siemens PLC Mitsubishi Scada DCS OPC C-lang V-lang Nim-lang Spice baik TI-SPice atau LT-Spice Linux (Artix, Debian) Bisa jadi bahan diskusi kita heheh ;)","title":"Welcome to MkDocs"},{"location":"about/","text":"Note Masih dikerjakan hehe.","title":"About"},{"location":"info/","text":"Makro Macros Plugin Environment General List All available variables and filters within the macros plugin: Variable Type Content extra dict disqus = 'kenzanin-github-io', social = [{'icon': 'fontawesome/brands/telegram', 'link': 'https://telegram.me/kenzanin', 'name': 'kenzanin'}, {'icon': 'fontawesome/brands/whatsapp', 'link': 'https://wa.link/q6rses', 'name': 'suka isnaini'}, {'icon': 'fontawesome/solid/at', 'link': 'mailto:kenzanin@gmail.com', 'name': 'kenzanin'}] config Config config_file_path = '/home/kenzanin/Documents/riset/kenzanin.github.io/mkdocs.yml', site_name = 'Solderen', nav [ NoneType ], pages [ NoneType ], site_url = 'https://kenzanin.github.io', site_description [ NoneType ], site_author [ NoneType ], theme [ Theme ], docs_dir = '/home/kenzanin/Documents/riset/kenzanin.github.io/docs', site_dir = '/home/kenzanin/Documents/riset/kenzanin.github.io/site', copyright = 'Copyright \u00a9 2021 [Suka Isnaini]', google_analytics = ['G-D8BVSGRXC8', 'auto'], dev_addr [ Address ], use_directory_urls = True, repo_url = 'https://github.com/kenzanin/kenzanin.github.io/', repo_name = 'GitHub', edit_uri = 'tree/main/docs/', extra_css = [], extra_javascript = [], extra_templates = [], markdown_extensions = ['toc', 'tables', 'fenced_code', 'pymdownx.keys', 'pymdownx.highlight', 'pymdownx.tabbed', 'pymdownx.superfences', 'pymdownx.snippets', 'admonition', 'abbr', 'pymdownx.critic', 'pymdownx.betterem', 'markdown_include.include', 'attr_list', 'footnotes', 'meta', 'pymdownx.magiclink', 'pymdownx.pathconverter', 'pymdownx.inlinehilite'], mdx_configs [ dict ], strict = False, remote_branch = 'gh-pages', remote_name = 'origin', extra [ SubConfig ], plugins [ PluginCollection ] environment dict system = 'Linux', system_version = '5.10.12-1-clear', python_version = '3.9.1', mkdocs_version = '1.1.2', macros_plugin_version = '0.5.0', jinja2_version = '2.11.3' plugin Config module_name = 'main', modules = [], include_dir = 'docs', include_yaml = [], j2_block_start_string = '', j2_block_end_string = '', j2_variable_start_string = '', j2_variable_end_string = '', verbose = False git dict status = True, date [ datetime ], short_commit = '7303360', commit = '73033607318e05900d89846d37b619b7452b7239', author = 'kenzanin', tag = '', date_ISO = '2021-02-11 16:54:56 +0700', message = '11feb', raw = 'commit 73033607318e05900d89846d37b619b7452b7239\\nAuthor: kenzanin \\nDate: Thu Feb 11 16:54:56 2021 +0700\\n\\n 11feb', root_dir = '/home/kenzanin/Documents/riset/kenzanin.github.io' context function ( obj, e ) Default mkdocs_macro List the defined variables macros_info function ( ) Test/debug function: list useful documentation on the mkdocs_macro environment. now function ( ) Get the current time (returns a datetime object). Used alone, it provides a timestamp. To get the year use now().year , for the month number now().month , etc. fix_url function ( url, r ) If url is relative, fix it so that it points to the docs diretory. This is necessary because relative links in markdown must be adapted in html ('img/foo.png' => '../img/img.png'). disqus str 'kenzanin-github-io' social list [{'icon': 'fontawesome/brands/telegram', 'link': 'https://telegram.me/kenzanin', 'name': 'kenzanin'}, {'icon': 'fontawesome/brands/whatsapp', 'link': 'https://wa.link/q6rses', 'name': 'suka isnaini'}, {'icon': 'fontawesome/solid/at', 'link': 'mailto:kenzanin@gmail.com', 'name': 'kenzanin'}] filters dict pretty [ function ] filters_builtin dict abs [ builtin_function_or_method ], attr [ function ], batch [ function ], capitalize [ function ], center [ function ], count [ builtin_function_or_method ], d [ function ], default [ function ], dictsort [ function ], e [ builtin_function_or_method ], escape [ builtin_function_or_method ], filesizeformat [ function ], first [ function ], float [ function ], forceescape [ function ], format [ function ], groupby [ function ], indent [ function ], int [ function ], join [ function ], last [ function ], length [ builtin_function_or_method ], list [ function ], lower [ function ], map [ function ], min [ function ], max [ function ], pprint [ function ], random [ function ], reject [ function ], rejectattr [ function ], replace [ function ], reverse [ function ], round [ function ], safe [ function ], select [ function ], selectattr [ function ], slice [ function ], sort [ function ], string [ builtin_function_or_method ], striptags [ function ], sum [ function ], title [ function ], trim [ function ], truncate [ function ], unique [ function ], upper [ function ], urlencode [ function ], urlize [ function ], wordcount [ function ], wordwrap [ function ], xmlattr [ function ], tojson [ function ] navigation Navigation Page(title='Home', url='/') Page(title='About', url='/about/') Page(title='Makro', url='/info/') Page(title=[blank], url='/variables/') Section(title='Frameworks') Section(title='Arduino') Page(title='Intro', url='/frameworks/arduino/intro/') Page(title='Install', url='/frameworks/arduino/install/') Page(title='Setup Project', url='/frameworks/arduino/setupProject/') Section(title='Contoh') Page(title=[blank], url='/frameworks/arduino/contoh/blink/') Page(title=[blank], url='/frameworks/arduino/contoh/digitalReadSerial/') Section(title='PlatformIo') Page(title='Intro', url='/frameworks/platformio/intro/') Section(title='Language') Section(title='C') Page(title='Intro', url='/lang/clang/intro/') Page(title='Install', url='/lang/clang/install/') Section(title='Contoh') Page(title='Hello World', url='/lang/clang/contoh/helloWorld/') Page(title='Armstrong Number', url='/lang/clang/contoh/armstrongNumber/') Page(title='Darts', url='/lang/clang/contoh/darts/') Page(title='Resistor Color', url='/lang/clang/contoh/resistorColor/') Page(title='Resistor Color Duo', url='/lang/clang/contoh/resistorColorDuo/') Page(title='Resistor Color Trio', url='/lang/clang/contoh/resistorColorTrio/') Page(title='Isogram', url='/lang/clang/contoh/isogram/') Page(title='Acronym', url='/lang/clang/contoh/acronym/') Page(title='Word Count', url='/lang/clang/contoh/wordCount/') Page(title='Pangram', url='/lang/clang/contoh/pangram/') Page(title='Giga Second', url='/lang/clang/contoh/gigasecond/') Page(title='Space Age', url='/lang/clang/contoh/spaceAges/') Page(title='Meetup', url='/lang/clang/contoh/meetup/') Page(title='Hamming', url='/lang/clang/contoh/hamming/') Page(title='RNA Transcription', url='/lang/clang/contoh/rnaTranscription/') Page(title='Nucleotide Count', url='/lang/clang/contoh/nucleotideCount/') Page(title='Grains', url='/lang/clang/contoh/grains/') Page(title='Leap', url='/lang/clang/contoh/leap/') Page(title='Beer Song', url='/lang/clang/contoh/beerSong/') Page(title='Raindrops', url='/lang/clang/contoh/raindrops/') Section(title='CPP') Page(title='Cpp Intro', url='/lang/cpp/intro/') Page(title='Install', url='/lang/cpp/install/') Section(title='Contoh') Page(title='Hello World', url='/lang/cpp/contoh/helloWorld/') Page(title='Isogram', url='/lang/cpp/contoh/isogram/') Page(title='Leap', url='/lang/cpp/contoh/leap/') Page(title='Reverse String', url='/lang/cpp/contoh/reverseString/') Page(title='Gigasecond', url='/lang/cpp/contoh/gigasecond/') Page(title='Hamming', url='/lang/cpp/contoh/hamming/') Page(title='ETL', url='/lang/cpp/contoh/etl/') Page(title='Grains', url='/lang/cpp/contoh/grains/') Page(title='Space Age', url='/lang/cpp/contoh/spaceAge/') Page(title='RNA Transcription', url='/lang/cpp/contoh/rnaTranscription/') Page(title='Nucleoide Count', url='/lang/cpp/contoh/nucleoideCount/') Page(title='Raindrops', url='/lang/cpp/contoh/raindrops/') Page(title='Triangle', url='/lang/cpp/contoh/triangle/') Page(title='Sum Of Multiples', url='/lang/cpp/contoh/sumOfMultiple/') Page(title='Pangram', url='/lang/cpp/contoh/pangram/') Page(title='Armstrong Numbers', url='/lang/cpp/contoh/armstrongNumbers/') Page(title='Difference Of Square', url='/lang/cpp/contoh/DifferenceOfSquares/') Page(title='Binary', url='/lang/cpp/contoh/binary/') Page(title='Hexadecimal', url='/lang/cpp/contoh/hexadecimal/') Page(title='LUHN', url='/lang/cpp/contoh/luhn/') Page(title='Atbash Cipher', url='/lang/cpp/contoh/atbashCipher/') Section(title='Pascal') Page(title='Intro', url='/lang/pascal/intro/') Page(title='Install', url='/lang/pascal/install/') Page(title='Text IDE', url='/lang/pascal/textIde/') Page(title='Lazarus IDE', url='/lang/pascal/ide/') Section(title='Contoh') Page(title=[blank], url='/lang/pascal/contoh/helloWorld/') Link(title='Nim', url='nim') Link(title='Vlang', url='vlang') Link(title='Zig', url='zig') Section(title='Linux') Section(title='Artix') Page(title='Intro', url='/linux/artix/pengenalan/') Page(title='Setup Percona', url='/linux/artix/percona/') Section(title='Micro Controller') Link(title='AVR', url='avr') Link(title='ESP', url='esp') Section(title='MCS51') Page(title='Intro', url='/mcu/mcs51/intro/') Page(title='Hardware', url='/mcu/mcs51/hardware/') Page(title='Software', url='/mcu/mcs51/software/') Page(title='SDCC', url='/mcu/mcs51/sdcc/') Page(title='Hello World Assembly', url='/mcu/mcs51/helloWorldAsm/') Page(title='Hello World C', url='/mcu/mcs51/helloWorldC/') Section(title='Contoh') Page(title='Count Down Led Asm', url='/mcu/mcs51/contoh/countDownLedAsm/') Page(title='Count Down Led C', url='/mcu/mcs51/contoh/countDownLed/') Page(title='Count Up Led Asm', url='/mcu/mcs51/contoh/countUpLedAsm/') Page(title='Count Up Led C', url='/mcu/mcs51/contoh/countUpLed/') Link(title='Stm32', url='stm32') page Page Page(title='Makro', url='/info/') Config Information Standard MkDocs configuration information. Do not try to modify. e.g. {{ config.docs_dir }} See also the MkDocs documentation on the config object . Variable Type Content config_file_path str '/home/kenzanin/Documents/riset/kenzanin.github.io/mkdocs.yml' site_name str 'Solderen' nav NoneType None pages NoneType None site_url str 'https://kenzanin.github.io' site_description NoneType None site_author NoneType None theme Theme Theme(name='material', dirs=['/usr/lib/python3.9/site-packages/material', '/usr/lib/python3.9/site-packages/mkdocs/templates'], static_templates=['404.html', 'sitemap.xml'], language='en', direction=None, features=None, palette={'scheme': 'slate'}, font={'text': 'JetBrains Mono', 'code': 'consolas'}, icon=None, favicon='assets/images/favicon.png', include_search_page=False, search_index_only=True) docs_dir str '/home/kenzanin/Documents/riset/kenzanin.github.io/docs' site_dir str '/home/kenzanin/Documents/riset/kenzanin.github.io/site' copyright str 'Copyright \u00a9 2021 [Suka Isnaini]' google_analytics list ['G-D8BVSGRXC8', 'auto'] dev_addr Address Address(host='127.0.0.1', port=8000) use_directory_urls bool True repo_url str 'https://github.com/kenzanin/kenzanin.github.io/' repo_name str 'GitHub' edit_uri str 'tree/main/docs/' extra_css list [] extra_javascript list [] extra_templates list [] markdown_extensions list ['toc', 'tables', 'fenced_code', 'pymdownx.keys', 'pymdownx.highlight', 'pymdownx.tabbed', 'pymdownx.superfences', 'pymdownx.snippets', 'admonition', 'abbr', 'pymdownx.critic', 'pymdownx.betterem', 'markdown_include.include', 'attr_list', 'footnotes', 'meta', 'pymdownx.magiclink', 'pymdownx.pathconverter', 'pymdownx.inlinehilite'] mdx_configs dict pymdownx.highlight [ dict ], pymdownx.snippets [ dict ], pymdownx.betterem [ dict ], markdown_include.include [ dict ] strict bool False remote_branch str 'gh-pages' remote_name str 'origin' extra SubConfig {'disqus': 'kenzanin-github-io', 'social': [{'icon': 'fontawesome/brands/telegram', 'link': 'https://telegram.me/kenzanin', 'name': 'kenzanin'}, {'icon': 'fontawesome/brands/whatsapp', 'link': 'https://wa.link/q6rses', 'name': 'suka isnaini'}, {'icon': 'fontawesome/solid/at', 'link': 'mailto:kenzanin@gmail.com', 'name': 'kenzanin'}]} plugins PluginCollection search [ SearchPlugin ], macros [ MacrosPlugin ], git-revision-date-localized [ GitRevisionDateLocalizedPlugin ], minify [ MinifyPlugin ], awesome-pages [ AwesomePagesPlugin ] Git Information Information available on the last commit and the git repository containing the documentation project: e.g. {{ git.message }} Variable Type Content status bool True date datetime datetime.datetime(2021, 2, 11, 16, 54, 56, tzinfo=tzoffset(None, 25200)) short_commit str '7303360' commit str '73033607318e05900d89846d37b619b7452b7239' author str 'kenzanin' tag str '' date_ISO str '2021-02-11 16:54:56 +0700' message str '11feb' raw str 'commit 73033607318e05900d89846d37b619b7452b7239\\nAuthor: kenzanin \\nDate: Thu Feb 11 16:54:56 2021 +0700\\n\\n 11feb' root_dir str '/home/kenzanin/Documents/riset/kenzanin.github.io' Page Attributes Provided by MkDocs. These attributes change for every page (the attributes shown are for this page). e.g. {{ page.title }} See also the MkDocs documentation on the page object . Variable Type Content file File page [ Page ], src_path = 'info.md', abs_src_path = '/home/kenzanin/Documents/riset/kenzanin.github.io/docs/info.md', name = 'info', dest_path = 'info/index.html', abs_dest_path = '/home/kenzanin/Documents/riset/kenzanin.github.io/site/info/index.html', url = 'info/' title str 'Makro' parent NoneType None children NoneType None previous_page Page Page(title='About', url='/about/') next_page Page Page(title=[blank], url='/variables/') _Page__active bool False is_section bool False is_page bool True is_link bool False update_date str '2021-02-11' canonical_url str 'https://kenzanin.github.io/info/' abs_url str '/info/' edit_url str 'https://github.com/kenzanin/kenzanin.github.io/tree/main/docs/info.md' markdown str '# Makro\\n{{ macros_info() }}\\n' content NoneType None toc list [] meta dict To have all titles of all pages, use: 1 2 3 {% for page in navigation.pages %} - {{ page.title }} {% endfor% } Plugin Filters These filters are provided as a standard by the macros plugin. Variable Type Content pretty function ( var_list, rows, header, e ) Default mkdocs_macro Prettify a dictionary or object (used for environment documentation, or debugging). Builtin Jinja2 Filters These filters are provided by Jinja2 as a standard. See also the Jinja2 documentation on builtin filters ). Variable Type Content abs builtin_function_or_method Return the absolute value of the argument. attr function ( environment, obj, name, value ) Get an attribute of an object. foo|attr(\"bar\") works like foo.bar just that always an attribute is returned and items are not looked up. batch function ( value, linecount, fill_with, tmp, item ) A filter that batches items. It works pretty much like slice just the other way round. It returns a list of lists with the given number of items. If you provide a second parameter this is used to fill up missing items. See this example. capitalize function ( s ) Capitalize a value. The first character will be uppercase, all others lowercase. center function ( value, width ) Centers the value in a field of a given width. count builtin_function_or_method Return the number of items in a container. d function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. default function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. dictsort function ( value, case_sensitive, by, reverse, sort_func ) Sort a dict and yield (key, value) pairs. Because python dicts are unsorted you may want to use this function to order them by either key or value. e builtin_function_or_method escape(s) -> markup escape builtin_function_or_method escape(s) -> markup filesizeformat function ( value, binary, bytes, base, prefixes, i, prefix, unit ) Format the value like a 'human-readable' file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc). Per default decimal prefixes are used (Mega, Giga, etc.), if the second parameter is set to True the binary prefixes are used (Mebi, Gibi). first function ( environment, seq ) Return the first item of a sequence. float function ( value, default ) Convert the value into a floating point number. If the conversion doesn't work it will return 0.0 . You can override this default using the first parameter. forceescape function ( value ) Enforce HTML escaping. This will probably double escape variables. format function ( value, args, kwargs ) Apply the given values to a printf-style _ format string, like string % values . groupby function ( environment, value, attribute, expr ) Group a sequence of objects by an attribute using Python's :func: itertools.groupby . The attribute can use dot notation for nested access, like \"address.city\" . Unlike Python's groupby , the values are sorted first so only one group is returned for each unique value. indent function ( s, width, first, blank, indentfirst, newline, rv, lines ) Return a copy of the string with each line indented by 4 spaces. The first line and blank lines are not indented by default. int function ( value, default, base ) Convert the value into an integer. If the conversion doesn't work it will return 0 . You can override this default using the first parameter. You can also override the default base (10) in the second parameter, which handles input with prefixes such as 0b, 0o and 0x for bases 2, 8 and 16 respectively. The base is ignored for decimal numbers and non-string values. join function ( eval_ctx, value, d, attribute, do_escape, idx, item ) Return a string which is the concatenation of the strings in the sequence. The separator between elements is an empty string per default, you can define it with the optional parameter. last function ( environment, seq ) Return the last item of a sequence. length builtin_function_or_method Return the number of items in a container. list function ( value ) Convert the value into a list. If it was a string the returned list will be a list of characters. lower function ( s ) Convert a value to lowercase. map function ( args, kwargs, seq, func, item ) Applies a filter on a sequence of objects or looks up an attribute. This is useful when dealing with lists of objects but you are really only interested in a certain value of it. min function ( environment, value, case_sensitive, attribute ) Return the smallest item from the sequence. max function ( environment, value, case_sensitive, attribute ) Return the largest item from the sequence. pprint function ( value, verbose ) Pretty print a variable. Useful for debugging. random function ( context, seq ) Return a random item from the sequence. reject function ( args, kwargs ) Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding. rejectattr function ( args, kwargs ) Filters a sequence of objects by applying a test to the specified attribute of each object, and rejecting the objects with the test succeeding. replace function ( eval_ctx, s, old, new, count ) Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument count is given, only the first count occurrences are replaced. reverse function ( value, rv ) Reverse the object or return an iterator that iterates over it the other way round. round function ( value, precision, method, func ) Round the number to a given precision. The first parameter specifies the precision (default is 0 ), the second the rounding method. safe function ( value ) Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped. select function ( args, kwargs ) Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding. selectattr function ( args, kwargs ) Filters a sequence of objects by applying a test to the specified attribute of each object, and only selecting the objects with the test succeeding. slice function ( value, slices, fill_with, seq, length, items_per_slice, slices_with_extra, offset, slice_number, start, end, tmp ) Slice an iterator and return a list of lists containing those items. Useful if you want to create a div containing three ul tags that represent columns. sort function ( environment, value, reverse, case_sensitive, attribute, key_func ) Sort an iterable using Python's :func: sorted . string builtin_function_or_method soft_unicode(object) -> string striptags function ( value ) Strip SGML/XML tags and replace adjacent whitespace by one space. sum function ( environment, iterable, attribute, start ) Returns the sum of a sequence of numbers plus the value of parameter 'start' (which defaults to 0). When the sequence is empty it returns start. title function ( s ) Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase. trim function ( value, chars ) Strip leading and trailing characters, by default whitespace. truncate function ( env, s, length, killwords, end, leeway, result ) Return a truncated copy of the string. The length is specified with the first parameter which defaults to 255 . If the second parameter is true the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign ( \"...\" ). If you want a different ellipsis sign than \"...\" you can specify it using the third parameter. Strings that only exceed the length by the tolerance margin given in the fourth parameter will not be truncated. unique function ( environment, value, case_sensitive, attribute, getter, seen, item, key ) Returns a list of unique items from the given iterable. upper function ( s ) Convert a value to uppercase. urlencode function ( value, items ) Quote data for use in a URL path or query using UTF-8. urlize function ( eval_ctx, value, trim_url_limit, nofollow, target, rel, policies, rv ) Converts URLs in plain text into clickable links. wordcount function ( s ) Count the words in that string. wordwrap function ( environment, s, width, break_long_words, wrapstring, break_on_hyphens ) Wrap a string to the given width. Existing newlines are treated as paragraphs to be wrapped separately. xmlattr function ( _eval_ctx, d, autospace, rv ) Create an SGML/XML attribute string based on the items in a dict. All values that are neither none nor undefined are automatically escaped. tojson function ( eval_ctx, value, indent, policies, dumper, options ) Dumps a structure to JSON so that it's safe to use in <script> tags. It accepts the same arguments and returns a JSON string. Note that this is available in templates through the |tojson filter which will also mark the result as safe. Due to how this function escapes certain characters this is safe even if used outside of <script> tags.","title":"Makro"},{"location":"info/#makro","text":"","title":"Makro"},{"location":"info/#macros-plugin-environment","text":"","title":"Macros Plugin Environment"},{"location":"info/#general-list","text":"All available variables and filters within the macros plugin: Variable Type Content extra dict disqus = 'kenzanin-github-io', social = [{'icon': 'fontawesome/brands/telegram', 'link': 'https://telegram.me/kenzanin', 'name': 'kenzanin'}, {'icon': 'fontawesome/brands/whatsapp', 'link': 'https://wa.link/q6rses', 'name': 'suka isnaini'}, {'icon': 'fontawesome/solid/at', 'link': 'mailto:kenzanin@gmail.com', 'name': 'kenzanin'}] config Config config_file_path = '/home/kenzanin/Documents/riset/kenzanin.github.io/mkdocs.yml', site_name = 'Solderen', nav [ NoneType ], pages [ NoneType ], site_url = 'https://kenzanin.github.io', site_description [ NoneType ], site_author [ NoneType ], theme [ Theme ], docs_dir = '/home/kenzanin/Documents/riset/kenzanin.github.io/docs', site_dir = '/home/kenzanin/Documents/riset/kenzanin.github.io/site', copyright = 'Copyright \u00a9 2021 [Suka Isnaini]', google_analytics = ['G-D8BVSGRXC8', 'auto'], dev_addr [ Address ], use_directory_urls = True, repo_url = 'https://github.com/kenzanin/kenzanin.github.io/', repo_name = 'GitHub', edit_uri = 'tree/main/docs/', extra_css = [], extra_javascript = [], extra_templates = [], markdown_extensions = ['toc', 'tables', 'fenced_code', 'pymdownx.keys', 'pymdownx.highlight', 'pymdownx.tabbed', 'pymdownx.superfences', 'pymdownx.snippets', 'admonition', 'abbr', 'pymdownx.critic', 'pymdownx.betterem', 'markdown_include.include', 'attr_list', 'footnotes', 'meta', 'pymdownx.magiclink', 'pymdownx.pathconverter', 'pymdownx.inlinehilite'], mdx_configs [ dict ], strict = False, remote_branch = 'gh-pages', remote_name = 'origin', extra [ SubConfig ], plugins [ PluginCollection ] environment dict system = 'Linux', system_version = '5.10.12-1-clear', python_version = '3.9.1', mkdocs_version = '1.1.2', macros_plugin_version = '0.5.0', jinja2_version = '2.11.3' plugin Config module_name = 'main', modules = [], include_dir = 'docs', include_yaml = [], j2_block_start_string = '', j2_block_end_string = '', j2_variable_start_string = '', j2_variable_end_string = '', verbose = False git dict status = True, date [ datetime ], short_commit = '7303360', commit = '73033607318e05900d89846d37b619b7452b7239', author = 'kenzanin', tag = '', date_ISO = '2021-02-11 16:54:56 +0700', message = '11feb', raw = 'commit 73033607318e05900d89846d37b619b7452b7239\\nAuthor: kenzanin \\nDate: Thu Feb 11 16:54:56 2021 +0700\\n\\n 11feb', root_dir = '/home/kenzanin/Documents/riset/kenzanin.github.io' context function ( obj, e ) Default mkdocs_macro List the defined variables macros_info function ( ) Test/debug function: list useful documentation on the mkdocs_macro environment. now function ( ) Get the current time (returns a datetime object). Used alone, it provides a timestamp. To get the year use now().year , for the month number now().month , etc. fix_url function ( url, r ) If url is relative, fix it so that it points to the docs diretory. This is necessary because relative links in markdown must be adapted in html ('img/foo.png' => '../img/img.png'). disqus str 'kenzanin-github-io' social list [{'icon': 'fontawesome/brands/telegram', 'link': 'https://telegram.me/kenzanin', 'name': 'kenzanin'}, {'icon': 'fontawesome/brands/whatsapp', 'link': 'https://wa.link/q6rses', 'name': 'suka isnaini'}, {'icon': 'fontawesome/solid/at', 'link': 'mailto:kenzanin@gmail.com', 'name': 'kenzanin'}] filters dict pretty [ function ] filters_builtin dict abs [ builtin_function_or_method ], attr [ function ], batch [ function ], capitalize [ function ], center [ function ], count [ builtin_function_or_method ], d [ function ], default [ function ], dictsort [ function ], e [ builtin_function_or_method ], escape [ builtin_function_or_method ], filesizeformat [ function ], first [ function ], float [ function ], forceescape [ function ], format [ function ], groupby [ function ], indent [ function ], int [ function ], join [ function ], last [ function ], length [ builtin_function_or_method ], list [ function ], lower [ function ], map [ function ], min [ function ], max [ function ], pprint [ function ], random [ function ], reject [ function ], rejectattr [ function ], replace [ function ], reverse [ function ], round [ function ], safe [ function ], select [ function ], selectattr [ function ], slice [ function ], sort [ function ], string [ builtin_function_or_method ], striptags [ function ], sum [ function ], title [ function ], trim [ function ], truncate [ function ], unique [ function ], upper [ function ], urlencode [ function ], urlize [ function ], wordcount [ function ], wordwrap [ function ], xmlattr [ function ], tojson [ function ] navigation Navigation Page(title='Home', url='/') Page(title='About', url='/about/') Page(title='Makro', url='/info/') Page(title=[blank], url='/variables/') Section(title='Frameworks') Section(title='Arduino') Page(title='Intro', url='/frameworks/arduino/intro/') Page(title='Install', url='/frameworks/arduino/install/') Page(title='Setup Project', url='/frameworks/arduino/setupProject/') Section(title='Contoh') Page(title=[blank], url='/frameworks/arduino/contoh/blink/') Page(title=[blank], url='/frameworks/arduino/contoh/digitalReadSerial/') Section(title='PlatformIo') Page(title='Intro', url='/frameworks/platformio/intro/') Section(title='Language') Section(title='C') Page(title='Intro', url='/lang/clang/intro/') Page(title='Install', url='/lang/clang/install/') Section(title='Contoh') Page(title='Hello World', url='/lang/clang/contoh/helloWorld/') Page(title='Armstrong Number', url='/lang/clang/contoh/armstrongNumber/') Page(title='Darts', url='/lang/clang/contoh/darts/') Page(title='Resistor Color', url='/lang/clang/contoh/resistorColor/') Page(title='Resistor Color Duo', url='/lang/clang/contoh/resistorColorDuo/') Page(title='Resistor Color Trio', url='/lang/clang/contoh/resistorColorTrio/') Page(title='Isogram', url='/lang/clang/contoh/isogram/') Page(title='Acronym', url='/lang/clang/contoh/acronym/') Page(title='Word Count', url='/lang/clang/contoh/wordCount/') Page(title='Pangram', url='/lang/clang/contoh/pangram/') Page(title='Giga Second', url='/lang/clang/contoh/gigasecond/') Page(title='Space Age', url='/lang/clang/contoh/spaceAges/') Page(title='Meetup', url='/lang/clang/contoh/meetup/') Page(title='Hamming', url='/lang/clang/contoh/hamming/') Page(title='RNA Transcription', url='/lang/clang/contoh/rnaTranscription/') Page(title='Nucleotide Count', url='/lang/clang/contoh/nucleotideCount/') Page(title='Grains', url='/lang/clang/contoh/grains/') Page(title='Leap', url='/lang/clang/contoh/leap/') Page(title='Beer Song', url='/lang/clang/contoh/beerSong/') Page(title='Raindrops', url='/lang/clang/contoh/raindrops/') Section(title='CPP') Page(title='Cpp Intro', url='/lang/cpp/intro/') Page(title='Install', url='/lang/cpp/install/') Section(title='Contoh') Page(title='Hello World', url='/lang/cpp/contoh/helloWorld/') Page(title='Isogram', url='/lang/cpp/contoh/isogram/') Page(title='Leap', url='/lang/cpp/contoh/leap/') Page(title='Reverse String', url='/lang/cpp/contoh/reverseString/') Page(title='Gigasecond', url='/lang/cpp/contoh/gigasecond/') Page(title='Hamming', url='/lang/cpp/contoh/hamming/') Page(title='ETL', url='/lang/cpp/contoh/etl/') Page(title='Grains', url='/lang/cpp/contoh/grains/') Page(title='Space Age', url='/lang/cpp/contoh/spaceAge/') Page(title='RNA Transcription', url='/lang/cpp/contoh/rnaTranscription/') Page(title='Nucleoide Count', url='/lang/cpp/contoh/nucleoideCount/') Page(title='Raindrops', url='/lang/cpp/contoh/raindrops/') Page(title='Triangle', url='/lang/cpp/contoh/triangle/') Page(title='Sum Of Multiples', url='/lang/cpp/contoh/sumOfMultiple/') Page(title='Pangram', url='/lang/cpp/contoh/pangram/') Page(title='Armstrong Numbers', url='/lang/cpp/contoh/armstrongNumbers/') Page(title='Difference Of Square', url='/lang/cpp/contoh/DifferenceOfSquares/') Page(title='Binary', url='/lang/cpp/contoh/binary/') Page(title='Hexadecimal', url='/lang/cpp/contoh/hexadecimal/') Page(title='LUHN', url='/lang/cpp/contoh/luhn/') Page(title='Atbash Cipher', url='/lang/cpp/contoh/atbashCipher/') Section(title='Pascal') Page(title='Intro', url='/lang/pascal/intro/') Page(title='Install', url='/lang/pascal/install/') Page(title='Text IDE', url='/lang/pascal/textIde/') Page(title='Lazarus IDE', url='/lang/pascal/ide/') Section(title='Contoh') Page(title=[blank], url='/lang/pascal/contoh/helloWorld/') Link(title='Nim', url='nim') Link(title='Vlang', url='vlang') Link(title='Zig', url='zig') Section(title='Linux') Section(title='Artix') Page(title='Intro', url='/linux/artix/pengenalan/') Page(title='Setup Percona', url='/linux/artix/percona/') Section(title='Micro Controller') Link(title='AVR', url='avr') Link(title='ESP', url='esp') Section(title='MCS51') Page(title='Intro', url='/mcu/mcs51/intro/') Page(title='Hardware', url='/mcu/mcs51/hardware/') Page(title='Software', url='/mcu/mcs51/software/') Page(title='SDCC', url='/mcu/mcs51/sdcc/') Page(title='Hello World Assembly', url='/mcu/mcs51/helloWorldAsm/') Page(title='Hello World C', url='/mcu/mcs51/helloWorldC/') Section(title='Contoh') Page(title='Count Down Led Asm', url='/mcu/mcs51/contoh/countDownLedAsm/') Page(title='Count Down Led C', url='/mcu/mcs51/contoh/countDownLed/') Page(title='Count Up Led Asm', url='/mcu/mcs51/contoh/countUpLedAsm/') Page(title='Count Up Led C', url='/mcu/mcs51/contoh/countUpLed/') Link(title='Stm32', url='stm32') page Page Page(title='Makro', url='/info/')","title":"General List"},{"location":"info/#config-information","text":"Standard MkDocs configuration information. Do not try to modify. e.g. {{ config.docs_dir }} See also the MkDocs documentation on the config object . Variable Type Content config_file_path str '/home/kenzanin/Documents/riset/kenzanin.github.io/mkdocs.yml' site_name str 'Solderen' nav NoneType None pages NoneType None site_url str 'https://kenzanin.github.io' site_description NoneType None site_author NoneType None theme Theme Theme(name='material', dirs=['/usr/lib/python3.9/site-packages/material', '/usr/lib/python3.9/site-packages/mkdocs/templates'], static_templates=['404.html', 'sitemap.xml'], language='en', direction=None, features=None, palette={'scheme': 'slate'}, font={'text': 'JetBrains Mono', 'code': 'consolas'}, icon=None, favicon='assets/images/favicon.png', include_search_page=False, search_index_only=True) docs_dir str '/home/kenzanin/Documents/riset/kenzanin.github.io/docs' site_dir str '/home/kenzanin/Documents/riset/kenzanin.github.io/site' copyright str 'Copyright \u00a9 2021 [Suka Isnaini]' google_analytics list ['G-D8BVSGRXC8', 'auto'] dev_addr Address Address(host='127.0.0.1', port=8000) use_directory_urls bool True repo_url str 'https://github.com/kenzanin/kenzanin.github.io/' repo_name str 'GitHub' edit_uri str 'tree/main/docs/' extra_css list [] extra_javascript list [] extra_templates list [] markdown_extensions list ['toc', 'tables', 'fenced_code', 'pymdownx.keys', 'pymdownx.highlight', 'pymdownx.tabbed', 'pymdownx.superfences', 'pymdownx.snippets', 'admonition', 'abbr', 'pymdownx.critic', 'pymdownx.betterem', 'markdown_include.include', 'attr_list', 'footnotes', 'meta', 'pymdownx.magiclink', 'pymdownx.pathconverter', 'pymdownx.inlinehilite'] mdx_configs dict pymdownx.highlight [ dict ], pymdownx.snippets [ dict ], pymdownx.betterem [ dict ], markdown_include.include [ dict ] strict bool False remote_branch str 'gh-pages' remote_name str 'origin' extra SubConfig {'disqus': 'kenzanin-github-io', 'social': [{'icon': 'fontawesome/brands/telegram', 'link': 'https://telegram.me/kenzanin', 'name': 'kenzanin'}, {'icon': 'fontawesome/brands/whatsapp', 'link': 'https://wa.link/q6rses', 'name': 'suka isnaini'}, {'icon': 'fontawesome/solid/at', 'link': 'mailto:kenzanin@gmail.com', 'name': 'kenzanin'}]} plugins PluginCollection search [ SearchPlugin ], macros [ MacrosPlugin ], git-revision-date-localized [ GitRevisionDateLocalizedPlugin ], minify [ MinifyPlugin ], awesome-pages [ AwesomePagesPlugin ]","title":"Config Information"},{"location":"info/#git-information","text":"Information available on the last commit and the git repository containing the documentation project: e.g. {{ git.message }} Variable Type Content status bool True date datetime datetime.datetime(2021, 2, 11, 16, 54, 56, tzinfo=tzoffset(None, 25200)) short_commit str '7303360' commit str '73033607318e05900d89846d37b619b7452b7239' author str 'kenzanin' tag str '' date_ISO str '2021-02-11 16:54:56 +0700' message str '11feb' raw str 'commit 73033607318e05900d89846d37b619b7452b7239\\nAuthor: kenzanin \\nDate: Thu Feb 11 16:54:56 2021 +0700\\n\\n 11feb' root_dir str '/home/kenzanin/Documents/riset/kenzanin.github.io'","title":"Git Information"},{"location":"info/#page-attributes","text":"Provided by MkDocs. These attributes change for every page (the attributes shown are for this page). e.g. {{ page.title }} See also the MkDocs documentation on the page object . Variable Type Content file File page [ Page ], src_path = 'info.md', abs_src_path = '/home/kenzanin/Documents/riset/kenzanin.github.io/docs/info.md', name = 'info', dest_path = 'info/index.html', abs_dest_path = '/home/kenzanin/Documents/riset/kenzanin.github.io/site/info/index.html', url = 'info/' title str 'Makro' parent NoneType None children NoneType None previous_page Page Page(title='About', url='/about/') next_page Page Page(title=[blank], url='/variables/') _Page__active bool False is_section bool False is_page bool True is_link bool False update_date str '2021-02-11' canonical_url str 'https://kenzanin.github.io/info/' abs_url str '/info/' edit_url str 'https://github.com/kenzanin/kenzanin.github.io/tree/main/docs/info.md' markdown str '# Makro\\n{{ macros_info() }}\\n' content NoneType None toc list [] meta dict To have all titles of all pages, use: 1 2 3 {% for page in navigation.pages %} - {{ page.title }} {% endfor% }","title":"Page Attributes"},{"location":"info/#plugin-filters","text":"These filters are provided as a standard by the macros plugin. Variable Type Content pretty function ( var_list, rows, header, e ) Default mkdocs_macro Prettify a dictionary or object (used for environment documentation, or debugging).","title":"Plugin Filters"},{"location":"info/#builtin-jinja2-filters","text":"These filters are provided by Jinja2 as a standard. See also the Jinja2 documentation on builtin filters ). Variable Type Content abs builtin_function_or_method Return the absolute value of the argument. attr function ( environment, obj, name, value ) Get an attribute of an object. foo|attr(\"bar\") works like foo.bar just that always an attribute is returned and items are not looked up. batch function ( value, linecount, fill_with, tmp, item ) A filter that batches items. It works pretty much like slice just the other way round. It returns a list of lists with the given number of items. If you provide a second parameter this is used to fill up missing items. See this example. capitalize function ( s ) Capitalize a value. The first character will be uppercase, all others lowercase. center function ( value, width ) Centers the value in a field of a given width. count builtin_function_or_method Return the number of items in a container. d function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. default function ( value, default_value, boolean ) If the value is undefined it will return the passed default value, otherwise the value of the variable. dictsort function ( value, case_sensitive, by, reverse, sort_func ) Sort a dict and yield (key, value) pairs. Because python dicts are unsorted you may want to use this function to order them by either key or value. e builtin_function_or_method escape(s) -> markup escape builtin_function_or_method escape(s) -> markup filesizeformat function ( value, binary, bytes, base, prefixes, i, prefix, unit ) Format the value like a 'human-readable' file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc). Per default decimal prefixes are used (Mega, Giga, etc.), if the second parameter is set to True the binary prefixes are used (Mebi, Gibi). first function ( environment, seq ) Return the first item of a sequence. float function ( value, default ) Convert the value into a floating point number. If the conversion doesn't work it will return 0.0 . You can override this default using the first parameter. forceescape function ( value ) Enforce HTML escaping. This will probably double escape variables. format function ( value, args, kwargs ) Apply the given values to a printf-style _ format string, like string % values . groupby function ( environment, value, attribute, expr ) Group a sequence of objects by an attribute using Python's :func: itertools.groupby . The attribute can use dot notation for nested access, like \"address.city\" . Unlike Python's groupby , the values are sorted first so only one group is returned for each unique value. indent function ( s, width, first, blank, indentfirst, newline, rv, lines ) Return a copy of the string with each line indented by 4 spaces. The first line and blank lines are not indented by default. int function ( value, default, base ) Convert the value into an integer. If the conversion doesn't work it will return 0 . You can override this default using the first parameter. You can also override the default base (10) in the second parameter, which handles input with prefixes such as 0b, 0o and 0x for bases 2, 8 and 16 respectively. The base is ignored for decimal numbers and non-string values. join function ( eval_ctx, value, d, attribute, do_escape, idx, item ) Return a string which is the concatenation of the strings in the sequence. The separator between elements is an empty string per default, you can define it with the optional parameter. last function ( environment, seq ) Return the last item of a sequence. length builtin_function_or_method Return the number of items in a container. list function ( value ) Convert the value into a list. If it was a string the returned list will be a list of characters. lower function ( s ) Convert a value to lowercase. map function ( args, kwargs, seq, func, item ) Applies a filter on a sequence of objects or looks up an attribute. This is useful when dealing with lists of objects but you are really only interested in a certain value of it. min function ( environment, value, case_sensitive, attribute ) Return the smallest item from the sequence. max function ( environment, value, case_sensitive, attribute ) Return the largest item from the sequence. pprint function ( value, verbose ) Pretty print a variable. Useful for debugging. random function ( context, seq ) Return a random item from the sequence. reject function ( args, kwargs ) Filters a sequence of objects by applying a test to each object, and rejecting the objects with the test succeeding. rejectattr function ( args, kwargs ) Filters a sequence of objects by applying a test to the specified attribute of each object, and rejecting the objects with the test succeeding. replace function ( eval_ctx, s, old, new, count ) Return a copy of the value with all occurrences of a substring replaced with a new one. The first argument is the substring that should be replaced, the second is the replacement string. If the optional third argument count is given, only the first count occurrences are replaced. reverse function ( value, rv ) Reverse the object or return an iterator that iterates over it the other way round. round function ( value, precision, method, func ) Round the number to a given precision. The first parameter specifies the precision (default is 0 ), the second the rounding method. safe function ( value ) Mark the value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped. select function ( args, kwargs ) Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding. selectattr function ( args, kwargs ) Filters a sequence of objects by applying a test to the specified attribute of each object, and only selecting the objects with the test succeeding. slice function ( value, slices, fill_with, seq, length, items_per_slice, slices_with_extra, offset, slice_number, start, end, tmp ) Slice an iterator and return a list of lists containing those items. Useful if you want to create a div containing three ul tags that represent columns. sort function ( environment, value, reverse, case_sensitive, attribute, key_func ) Sort an iterable using Python's :func: sorted . string builtin_function_or_method soft_unicode(object) -> string striptags function ( value ) Strip SGML/XML tags and replace adjacent whitespace by one space. sum function ( environment, iterable, attribute, start ) Returns the sum of a sequence of numbers plus the value of parameter 'start' (which defaults to 0). When the sequence is empty it returns start. title function ( s ) Return a titlecased version of the value. I.e. words will start with uppercase letters, all remaining characters are lowercase. trim function ( value, chars ) Strip leading and trailing characters, by default whitespace. truncate function ( env, s, length, killwords, end, leeway, result ) Return a truncated copy of the string. The length is specified with the first parameter which defaults to 255 . If the second parameter is true the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign ( \"...\" ). If you want a different ellipsis sign than \"...\" you can specify it using the third parameter. Strings that only exceed the length by the tolerance margin given in the fourth parameter will not be truncated. unique function ( environment, value, case_sensitive, attribute, getter, seen, item, key ) Returns a list of unique items from the given iterable. upper function ( s ) Convert a value to uppercase. urlencode function ( value, items ) Quote data for use in a URL path or query using UTF-8. urlize function ( eval_ctx, value, trim_url_limit, nofollow, target, rel, policies, rv ) Converts URLs in plain text into clickable links. wordcount function ( s ) Count the words in that string. wordwrap function ( environment, s, width, break_long_words, wrapstring, break_on_hyphens ) Wrap a string to the given width. Existing newlines are treated as paragraphs to be wrapped separately. xmlattr function ( _eval_ctx, d, autospace, rv ) Create an SGML/XML attribute string based on the items in a dict. All values that are neither none nor undefined are automatically escaped. tojson function ( eval_ctx, value, indent, policies, dumper, options ) Dumps a structure to JSON so that it's safe to use in <script> tags. It accepts the same arguments and returns a JSON string. Note that this is available in templates through the |tojson filter which will also mark the result as safe. Due to how this function escapes certain characters this is safe even if used outside of <script> tags.","title":"Builtin Jinja2 Filters"},{"location":"variables/","text":"","title":"Variables"},{"location":"frameworks/arduino/install/","text":"Cara install Arduino IDE bisa diinstall di PC atau juga bisa digunakan secara cloud (internet). Tentu saja untuk warga minim quota cara offline lebih baik dibanding cara cloud hehe. Berikut cara install Arduino secara Offline. Download Arduino IDE Install Arduino IDE Download Arduino Arduino bisa di download secara gratis di official sitenya https://www.arduino.cc/en/software ada beberapa versi yang bisa digunakan disini untuk user \"biasa\" versi stable sudah lebih dari cukup untuk memulai. Selanjutnya pilih file yang sesuai dengan OS dan CPU kita. pilihan yang disediakan cukup lengkap mulai dari MacOS, Windows (win7 keatas) dan linux. selain pengguna OS tersebut, bisa menggunakan Arduino IDE Cloud. Install di Linux (Artix) Untuk major Linux distro Arduino sudah ada di repo masing-masing. untuk install tinggal jalankan package manager, untuk Artix bisa menggunakan pacman -S arduino system akan segera mendownload dan meng install Arduino untuk system-wide users. namum bagi saya menginstall Arduino di home merupakan cara terbaik dikarenakan versi Arduino yang didapatkan dengan cara mendownload dari official site lebih stabil karena mempertahankan komponen pendukung seperti java-jre yang dipakai oleh Arduino IDE. Untuk menginstall Arduino di home download Arduino yang sesuai dengan arch CPU dan extract di /home/<user>/opt terdapat file setup.sh di dalam folder tersebut, gunakan jika ingin mendapatkan shortcut pada start menu. install di windows (win 7 ke atas) Download dari official website dan jalankan. tekan next - next - next done hehe.","title":"Install"},{"location":"frameworks/arduino/install/#cara-install","text":"Arduino IDE bisa diinstall di PC atau juga bisa digunakan secara cloud (internet). Tentu saja untuk warga minim quota cara offline lebih baik dibanding cara cloud hehe. Berikut cara install Arduino secara Offline. Download Arduino IDE Install Arduino IDE","title":"Cara install"},{"location":"frameworks/arduino/install/#download-arduino","text":"Arduino bisa di download secara gratis di official sitenya https://www.arduino.cc/en/software ada beberapa versi yang bisa digunakan disini untuk user \"biasa\" versi stable sudah lebih dari cukup untuk memulai. Selanjutnya pilih file yang sesuai dengan OS dan CPU kita. pilihan yang disediakan cukup lengkap mulai dari MacOS, Windows (win7 keatas) dan linux. selain pengguna OS tersebut, bisa menggunakan Arduino IDE Cloud.","title":"Download Arduino"},{"location":"frameworks/arduino/install/#install-di-linux-artix","text":"Untuk major Linux distro Arduino sudah ada di repo masing-masing. untuk install tinggal jalankan package manager, untuk Artix bisa menggunakan pacman -S arduino system akan segera mendownload dan meng install Arduino untuk system-wide users. namum bagi saya menginstall Arduino di home merupakan cara terbaik dikarenakan versi Arduino yang didapatkan dengan cara mendownload dari official site lebih stabil karena mempertahankan komponen pendukung seperti java-jre yang dipakai oleh Arduino IDE. Untuk menginstall Arduino di home download Arduino yang sesuai dengan arch CPU dan extract di /home/<user>/opt terdapat file setup.sh di dalam folder tersebut, gunakan jika ingin mendapatkan shortcut pada start menu.","title":"Install di Linux (Artix)"},{"location":"frameworks/arduino/install/#install-di-windows-win-7-ke-atas","text":"Download dari official website dan jalankan. tekan next - next - next done hehe.","title":"install di windows (win 7 ke atas)"},{"location":"frameworks/arduino/intro/","text":"Pengenalan Arduino Apa itu Arduino Arduino merupakan perusahaan yang bergerak dibidang pembuatan modul dan framework untuk beberapa jenis microController diantaranya AVR ATSAM Intel dan mungkin beberapa jenis MCU lain. Yang membuat Arduino berbeda dari beberapa vendor yang lain adalah sifatnya yang Open-Source dan dedikasi dari para pendiri dan kontributor yang fokus untuk kemudahan pemakaian bagi para pemula. meskipun ini berarti beberapa fungsi harus kehilangan effisiensi untuk mengejar kemudahan. Board kw? Seiring waktu pengguna dan kontributor dari Arduino semakin bertambah dan board alternative pun bermunculan, selain memberikan harga yang mungkin lebih murah juga menyediakan solusi untuk kebutuhan tertentu, Apakah hal ini legal? ternyata Arduino memberikan kebebasan untuk pihak lain membuat duplikat atau dan board extension untuk product nya selama tidak meyertakan nama Arduino di board. karena itu biasanya tulisan Arduino compatible cuma ada di deskripsi link penjual bukan di cetak di board nya.","title":"Intro"},{"location":"frameworks/arduino/intro/#pengenalan-arduino","text":"","title":"Pengenalan Arduino"},{"location":"frameworks/arduino/intro/#apa-itu-arduino","text":"Arduino merupakan perusahaan yang bergerak dibidang pembuatan modul dan framework untuk beberapa jenis microController diantaranya AVR ATSAM Intel dan mungkin beberapa jenis MCU lain. Yang membuat Arduino berbeda dari beberapa vendor yang lain adalah sifatnya yang Open-Source dan dedikasi dari para pendiri dan kontributor yang fokus untuk kemudahan pemakaian bagi para pemula. meskipun ini berarti beberapa fungsi harus kehilangan effisiensi untuk mengejar kemudahan.","title":"Apa itu Arduino"},{"location":"frameworks/arduino/intro/#board-kw","text":"Seiring waktu pengguna dan kontributor dari Arduino semakin bertambah dan board alternative pun bermunculan, selain memberikan harga yang mungkin lebih murah juga menyediakan solusi untuk kebutuhan tertentu, Apakah hal ini legal? ternyata Arduino memberikan kebebasan untuk pihak lain membuat duplikat atau dan board extension untuk product nya selama tidak meyertakan nama Arduino di board. karena itu biasanya tulisan Arduino compatible cuma ada di deskripsi link penjual bukan di cetak di board nya.","title":"Board kw?"},{"location":"frameworks/arduino/setupProject/","text":"Membuat Project Baru Membuat project baru sangat mudah di Arduino IDE. Munkin ini yang menjadi daya tarik Arduino berikut 4 tahap dalam pemubatan project Buat folder kosong. Jalankan Arduino IDE dan pilih File Save As atau dengan shortcut Ctrl+Shift+S. Simpan di folder kosong pada step 1. gunakan nama yang mudah di ingat pendek dan tanpa spasi. Pilih board yang sesuai jika menggunakan board Arduino Nano baik ori atau kw pilih Tool -> Board: \"xxxx\" -> Arduino Nano. Maka pilihan Board: akan menjadi Board: \"Arduino Nano\"","title":"Setup Project"},{"location":"frameworks/arduino/setupProject/#membuat-project-baru","text":"Membuat project baru sangat mudah di Arduino IDE. Munkin ini yang menjadi daya tarik Arduino berikut 4 tahap dalam pemubatan project Buat folder kosong. Jalankan Arduino IDE dan pilih File Save As atau dengan shortcut Ctrl+Shift+S. Simpan di folder kosong pada step 1. gunakan nama yang mudah di ingat pendek dan tanpa spasi. Pilih board yang sesuai jika menggunakan board Arduino Nano baik ori atau kw pilih Tool -> Board: \"xxxx\" -> Arduino Nano. Maka pilihan Board: akan menjadi Board: \"Arduino Nano\"","title":"Membuat Project Baru"},{"location":"frameworks/arduino/variables/","text":"","title":"Variables"},{"location":"frameworks/arduino/contoh/blink/","text":"Blink alias Hello World Contoh ini digunakan untuk menyalakan dan mematikan LED yang ada diboard arduino dengan interval 1000ms. Code ini diambil langsung dari contoh yang disedikan Arduino IDE. hmmm agak malas? hehe. bisa jadi tapi contoh ini perlu di copas \"as is\" karena banyak yang tidak tahu bahwa Arduino IDE udah disertai contoh. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /* Blink Turns an LED on for one second, then off for one second, repeatedly. Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to the correct LED pin independent of which board is used. If you want to know what pin the on-board LED is connected to on your Arduino model, check the Technical Specs of your board at: https://www.arduino.cc/en/Main/Products modified 8 May 2014 by Scott Fitzgerald modified 2 Sep 2016 by Arturo Guadalupi modified 8 Sep 2016 by Colby Newman This example code is in the public domain. http://www.arduino.cc/en/Tutorial/Blink */ // the setup function runs once when you press reset or power the board void setup () { // initialize digital pin LED_BUILTIN as an output. pinMode ( LED_BUILTIN , OUTPUT ); } // the loop function runs over and over again forever void loop () { digitalWrite ( LED_BUILTIN , HIGH ); // turn the LED on (HIGH is the voltage level) delay ( 1000 ); // wait for a second digitalWrite ( LED_BUILTIN , LOW ); // turn the LED off by making the voltage LOW delay ( 1000 ); // wait for a second }","title":"Blink alias Hello World"},{"location":"frameworks/arduino/contoh/blink/#blink-alias-hello-world","text":"Contoh ini digunakan untuk menyalakan dan mematikan LED yang ada diboard arduino dengan interval 1000ms. Code ini diambil langsung dari contoh yang disedikan Arduino IDE. hmmm agak malas? hehe. bisa jadi tapi contoh ini perlu di copas \"as is\" karena banyak yang tidak tahu bahwa Arduino IDE udah disertai contoh. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /* Blink Turns an LED on for one second, then off for one second, repeatedly. Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to the correct LED pin independent of which board is used. If you want to know what pin the on-board LED is connected to on your Arduino model, check the Technical Specs of your board at: https://www.arduino.cc/en/Main/Products modified 8 May 2014 by Scott Fitzgerald modified 2 Sep 2016 by Arturo Guadalupi modified 8 Sep 2016 by Colby Newman This example code is in the public domain. http://www.arduino.cc/en/Tutorial/Blink */ // the setup function runs once when you press reset or power the board void setup () { // initialize digital pin LED_BUILTIN as an output. pinMode ( LED_BUILTIN , OUTPUT ); } // the loop function runs over and over again forever void loop () { digitalWrite ( LED_BUILTIN , HIGH ); // turn the LED on (HIGH is the voltage level) delay ( 1000 ); // wait for a second digitalWrite ( LED_BUILTIN , LOW ); // turn the LED off by making the voltage LOW delay ( 1000 ); // wait for a second }","title":"Blink alias Hello World"},{"location":"frameworks/arduino/contoh/digitalReadSerial/","text":"Digital Read Serial 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* DigitalReadSerial Reads a digital input on pin 2, prints the result to the Serial Monitor This example code is in the public domain. http://www.arduino.cc/en/Tutorial/DigitalReadSerial */ // digital pin 2 has a pushbutton attached to it. Give it a name: int pushButton = 2 ; // the setup routine runs once when you press reset: void setup () { // initialize serial communication at 9600 bits per second: Serial . begin ( 9600 ); // make the pushbutton's pin an input: pinMode ( pushButton , INPUT ); } // the loop routine runs over and over again forever: void loop () { // read the input pin: int buttonState = digitalRead ( pushButton ); // print out the state of the button: Serial . println ( buttonState ); delay ( 1 ); // delay in between reads for stability }","title":"Digital Read Serial"},{"location":"frameworks/arduino/contoh/digitalReadSerial/#digital-read-serial","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* DigitalReadSerial Reads a digital input on pin 2, prints the result to the Serial Monitor This example code is in the public domain. http://www.arduino.cc/en/Tutorial/DigitalReadSerial */ // digital pin 2 has a pushbutton attached to it. Give it a name: int pushButton = 2 ; // the setup routine runs once when you press reset: void setup () { // initialize serial communication at 9600 bits per second: Serial . begin ( 9600 ); // make the pushbutton's pin an input: pinMode ( pushButton , INPUT ); } // the loop routine runs over and over again forever: void loop () { // read the input pin: int buttonState = digitalRead ( pushButton ); // print out the state of the button: Serial . println ( buttonState ); delay ( 1 ); // delay in between reads for stability }","title":"Digital Read Serial"},{"location":"frameworks/platformio/intro/","text":"","title":"Intro"},{"location":"lang/clang/install/","text":"Instalasi C compiler C compiler digunakan untuk menterjemahkan bahasa C yang kita ketik(atau copas :D) untuk menjadi sebuah file executable file ini biasanya berakhiran .exe pada windows atau berakhiran bebas jika menggunakan Linux . Ada banyak compiler baik free atau berbayar yang bisa digunakan, baik di Windows, Linux, atau MacOs. kali ini kita akan fokus untuk menginstall C compiler pada linux atau lebih tepat nya Artix Linux . Pada Artix C compiler yang tersedia antara lain Clang GCC tcc Intel C compiler AMD C compiler Dll Tidak perlu semua Compiler diinstall cukup pilih satu saja dan untuk compatibilitas GCC merupakan compiler yang paling banyak dipakai selanjutnya Clang. Pada komputer saya saya menggunakan GCC, Clang dan tcc. Untuk GCC pada artix di sediakan dalam package group base-devel sedang untuk Clang bisa diinstall terpisah. installasi GCC 1 sudo pacman -S base-devel gdb --needed installasi Clang 1 sudo pacman -S base-devel clang lldb Check C compiler yang terinstall Untuk pemeriksaan dasar di linux cukup mudah karena compiler terinstall secara system-wide dan berbagai tool sudah diinstall di PATH nya jadi tinggal gunakan terminal yang ada dan ketik gcc -v atau clang -v saja. Jalankan terminal (lxterminal) ketik gcc -v 1 2 3 4 5 6 7 8 9 10 kenzanin@artix | ~ ) gcc -v Using built-in specs. COLLECT_GCC = /usr/bin/gcc COLLECT_LTO_WRAPPER = /usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/lto-wrapper Target: x86_64-pc-linux-gnu Configured with: /build/gcc/src/gcc/configure --prefix = /usr --libdir = /usr/lib --libexecdir = /usr/lib --mandir = /usr/share/man --infodir = /usr/share/info --with-bugurl = https://bugs.archlinux.org/ --enable-languages = c,c++,ada,fortran,go,lto,objc,obj-c++,d --with-isl --with-linker-hash-style = gnu --with-system-zlib --enable-__cxa_atexit --enable-cet = auto --enable-checking = release --enable-clocale = gnu --enable-default-pie --enable-default-ssp --enable-gnu-indirect-function --enable-gnu-unique-object --enable-install-libiberty --enable-linker-build-id --enable-lto --enable-multilib --enable-plugin --enable-shared --enable-threads = posix --disable-libssp --disable-libstdcxx-pch --disable-libunwind-exceptions --disable-werror gdc_include_dir = /usr/include/dlang/gdc Thread model: posix Supported LTO compression algorithms: zlib zstd gcc version 10 .2.0 ( GCC ) Jika pada tahap 2 muncul tulisan tersebut berarti GCC siap digunakan.","title":"Install"},{"location":"lang/clang/install/#instalasi-c-compiler","text":"C compiler digunakan untuk menterjemahkan bahasa C yang kita ketik(atau copas :D) untuk menjadi sebuah file executable file ini biasanya berakhiran .exe pada windows atau berakhiran bebas jika menggunakan Linux . Ada banyak compiler baik free atau berbayar yang bisa digunakan, baik di Windows, Linux, atau MacOs. kali ini kita akan fokus untuk menginstall C compiler pada linux atau lebih tepat nya Artix Linux . Pada Artix C compiler yang tersedia antara lain Clang GCC tcc Intel C compiler AMD C compiler Dll Tidak perlu semua Compiler diinstall cukup pilih satu saja dan untuk compatibilitas GCC merupakan compiler yang paling banyak dipakai selanjutnya Clang. Pada komputer saya saya menggunakan GCC, Clang dan tcc. Untuk GCC pada artix di sediakan dalam package group base-devel sedang untuk Clang bisa diinstall terpisah. installasi GCC 1 sudo pacman -S base-devel gdb --needed installasi Clang 1 sudo pacman -S base-devel clang lldb","title":"Instalasi C compiler"},{"location":"lang/clang/install/#check-c-compiler-yang-terinstall","text":"Untuk pemeriksaan dasar di linux cukup mudah karena compiler terinstall secara system-wide dan berbagai tool sudah diinstall di PATH nya jadi tinggal gunakan terminal yang ada dan ketik gcc -v atau clang -v saja. Jalankan terminal (lxterminal) ketik gcc -v 1 2 3 4 5 6 7 8 9 10 kenzanin@artix | ~ ) gcc -v Using built-in specs. COLLECT_GCC = /usr/bin/gcc COLLECT_LTO_WRAPPER = /usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0/lto-wrapper Target: x86_64-pc-linux-gnu Configured with: /build/gcc/src/gcc/configure --prefix = /usr --libdir = /usr/lib --libexecdir = /usr/lib --mandir = /usr/share/man --infodir = /usr/share/info --with-bugurl = https://bugs.archlinux.org/ --enable-languages = c,c++,ada,fortran,go,lto,objc,obj-c++,d --with-isl --with-linker-hash-style = gnu --with-system-zlib --enable-__cxa_atexit --enable-cet = auto --enable-checking = release --enable-clocale = gnu --enable-default-pie --enable-default-ssp --enable-gnu-indirect-function --enable-gnu-unique-object --enable-install-libiberty --enable-linker-build-id --enable-lto --enable-multilib --enable-plugin --enable-shared --enable-threads = posix --disable-libssp --disable-libstdcxx-pch --disable-libunwind-exceptions --disable-werror gdc_include_dir = /usr/include/dlang/gdc Thread model: posix Supported LTO compression algorithms: zlib zstd gcc version 10 .2.0 ( GCC ) Jika pada tahap 2 muncul tulisan tersebut berarti GCC siap digunakan.","title":"Check C compiler yang terinstall"},{"location":"lang/clang/intro/","text":"C language Well apa yang mau dikenalkan dari bahasa pemograman C? C merupakan mata pelajaran wajib di beberapa jurusan di universitas dan ini bukan karena kemudahan nya tapi karena C merupakan lanjutan dari pelajaran assembly atau belajar C untuk mendalami assembly. karena itu C sering disebut sebagai bahasa tingkat menengah. Hello World Hello World, klo ada survey pogram yang sering di bikin di bumi ini pasti hello Word nomer 1st hehehe. pogram ini hanya untuk mencetak kata \"Hello World\" dilayar. tapi proses behind the schene nya jauh lebih penting, karena tujuan sebenarnya adalah untuk memastikan installasi C compiler kita sudah berjalan dengan baik. Sebelum masuk ke contoh programming hal pertama yang perlu dikerjakan adalah menginstall C compiler itu sendiri.","title":"Intro"},{"location":"lang/clang/intro/#c-language","text":"Well apa yang mau dikenalkan dari bahasa pemograman C? C merupakan mata pelajaran wajib di beberapa jurusan di universitas dan ini bukan karena kemudahan nya tapi karena C merupakan lanjutan dari pelajaran assembly atau belajar C untuk mendalami assembly. karena itu C sering disebut sebagai bahasa tingkat menengah.","title":"C language"},{"location":"lang/clang/intro/#hello-world","text":"Hello World, klo ada survey pogram yang sering di bikin di bumi ini pasti hello Word nomer 1st hehehe. pogram ini hanya untuk mencetak kata \"Hello World\" dilayar. tapi proses behind the schene nya jauh lebih penting, karena tujuan sebenarnya adalah untuk memastikan installasi C compiler kita sudah berjalan dengan baik. Sebelum masuk ke contoh programming hal pertama yang perlu dikerjakan adalah menginstall C compiler itu sendiri.","title":"Hello World"},{"location":"lang/clang/variables/","text":"","title":"Variables"},{"location":"lang/clang/contoh/acronym/","text":"Acronim Intro Convert a phrase to its acronym. Techies love their TLA (Three Letter Acronyms)! Task Help generate some jargon by writing a program that converts a long name like Portable Network Graphics to its acronym (PNG). The Code acronym.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include \"acronym.h\" #include \"string.h\" #include \"ctype.h\" #include \"stdio.h\" #include \"stdlib.h\" char * abbreviate ( const char * phrase ) { if ( phrase == NULL ) return NULL ; size_t length = strlen ( phrase ); if ( length == 0 ) return NULL ; char var [ 80 ] = { 0 }; strncpy ( var , phrase , length ); size_t i ; for ( i = 0 ; i < length ; i ++ ) { if ( var [ i ] == '-' || var [ i ] == '_' ) var [ i ] = ' ' ; } char * token = strtok ( var , \" \" ); static char * var02 ; var02 = malloc ( length ); memset ( var02 , 0 , length ); int ii = 0 ; while ( token ) { //puts(token); var02 [ ii ] = toupper ( token [ 0 ]); ii ++ ; token = strtok ( NULL , \" \" ); } //puts(var02); return var02 ; } acronym.h 1 2 3 4 5 6 #ifndef ACRONYM_H #define ACRONYM_H char * abbreviate ( const char * phrase ); #endif","title":"Acronym"},{"location":"lang/clang/contoh/acronym/#acronim","text":"","title":"Acronim"},{"location":"lang/clang/contoh/acronym/#intro","text":"Convert a phrase to its acronym. Techies love their TLA (Three Letter Acronyms)!","title":"Intro"},{"location":"lang/clang/contoh/acronym/#task","text":"Help generate some jargon by writing a program that converts a long name like Portable Network Graphics to its acronym (PNG).","title":"Task"},{"location":"lang/clang/contoh/acronym/#the-code","text":"acronym.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include \"acronym.h\" #include \"string.h\" #include \"ctype.h\" #include \"stdio.h\" #include \"stdlib.h\" char * abbreviate ( const char * phrase ) { if ( phrase == NULL ) return NULL ; size_t length = strlen ( phrase ); if ( length == 0 ) return NULL ; char var [ 80 ] = { 0 }; strncpy ( var , phrase , length ); size_t i ; for ( i = 0 ; i < length ; i ++ ) { if ( var [ i ] == '-' || var [ i ] == '_' ) var [ i ] = ' ' ; } char * token = strtok ( var , \" \" ); static char * var02 ; var02 = malloc ( length ); memset ( var02 , 0 , length ); int ii = 0 ; while ( token ) { //puts(token); var02 [ ii ] = toupper ( token [ 0 ]); ii ++ ; token = strtok ( NULL , \" \" ); } //puts(var02); return var02 ; } acronym.h 1 2 3 4 5 6 #ifndef ACRONYM_H #define ACRONYM_H char * abbreviate ( const char * phrase ); #endif","title":"The Code"},{"location":"lang/clang/contoh/armstrongNumber/","text":"Armstrong Number Apa itu? An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits. For example: 9 is an Armstrong number, because 9 = 9^1 = 9 10 is not an Armstrong number, because 10 != 1^2 + 0^2 = 1 153 is an Armstrong number, because: 153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 154 is not an Armstrong number, because: 154 != 1^3 + 5^3 + 4^3 = 1 + 125 + 64 = 190 Task Write some code to determine whether a number is an Armstrong number. The Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include \"armstrong_numbers.h\" #include <math.h> bool is_armstrong_number ( int candidate ) { if ( candidate < 10 ) return 1 ; int count = 1 ; int var01 = candidate ; while ( var01 > 10 ) { var01 /= 10 ; count ++ ; } var01 = candidate ; int var02 = 0 ; int i ; for ( i = 0 ; i <= count ; i ++ ) { var02 += ( pow (( var01 % 10 ), count )); var01 /= 10 ; } return ( var02 == candidate ); }","title":"Armstrong Number"},{"location":"lang/clang/contoh/armstrongNumber/#armstrong-number","text":"","title":"Armstrong Number"},{"location":"lang/clang/contoh/armstrongNumber/#apa-itu","text":"An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits. For example: 9 is an Armstrong number, because 9 = 9^1 = 9 10 is not an Armstrong number, because 10 != 1^2 + 0^2 = 1 153 is an Armstrong number, because: 153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 154 is not an Armstrong number, because: 154 != 1^3 + 5^3 + 4^3 = 1 + 125 + 64 = 190","title":"Apa itu?"},{"location":"lang/clang/contoh/armstrongNumber/#task","text":"Write some code to determine whether a number is an Armstrong number.","title":"Task"},{"location":"lang/clang/contoh/armstrongNumber/#the-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include \"armstrong_numbers.h\" #include <math.h> bool is_armstrong_number ( int candidate ) { if ( candidate < 10 ) return 1 ; int count = 1 ; int var01 = candidate ; while ( var01 > 10 ) { var01 /= 10 ; count ++ ; } var01 = candidate ; int var02 = 0 ; int i ; for ( i = 0 ; i <= count ; i ++ ) { var02 += ( pow (( var01 % 10 ), count )); var01 /= 10 ; } return ( var02 == candidate ); }","title":"The Code"},{"location":"lang/clang/contoh/beerSong/","text":"Introbottles of beer on the wall, 99 bottles of beer. Take one down and pass it around, 98 bottles of beer on the wall. 98 bottles of beer on the wall, 98 bottles of beer. Take one down and pass it around, 97 bottles of beer on the wall. 97 bottles of beer on the wall, 97 bottles of beer. Take one down and pass it around, 96 bottles of beer on the wall. 96 bottles of beer on the wall, 96 bottles of beer. Take one down and pass it around, 95 bottles of beer on the wall. 95 bottles of beer on the wall, 95 bottles of beer. Take one down and pass it around, 94 bottles of beer on the wall. 94 bottles of beer on the wall, 94 bottles of beer. Take one down and pass it around, 93 bottles of beer on the wall. 93 bottles of beer on the wall, 93 bottles of beer. Take one down and pass it around, 92 bottles of beer on the wall. 92 bottles of beer on the wall, 92 bottles of beer. Take one down and pass it around, 91 bottles of beer on the wall. 91 bottles of beer on the wall, 91 bottles of beer. Take one down and pass it around, 90 bottles of beer on the wall. 90 bottles of beer on the wall, 90 bottles of beer. Take one down and pass it around, 89 bottles of beer on the wall. 89 bottles of beer on the wall, 89 bottles of beer. Take one down and pass it around, 88 bottles of beer on the wall. 88 bottles of beer on the wall, 88 bottles of beer. Take one down and pass it around, 87 bottles of beer on the wall. 87 bottles of beer on the wall, 87 bottles of beer. Take one down and pass it around, 86 bottles of beer on the wall. 86 bottles of beer on the wall, 86 bottles of beer. Take one down and pass it around, 85 bottles of beer on the wall. 85 bottles of beer on the wall, 85 bottles of beer. Take one down and pass it around, 84 bottles of beer on the wall. 84 bottles of beer on the wall, 84 bottles of beer. Take one down and pass it around, 83 bottles of beer on the wall. 83 bottles of beer on the wall, 83 bottles of beer. Take one down and pass it around, 82 bottles of beer on the wall. 82 bottles of beer on the wall, 82 bottles of beer. Take one down and pass it around, 81 bottles of beer on the wall. 81 bottles of beer on the wall, 81 bottles of beer. Take one down and pass it around, 80 bottles of beer on the wall. 80 bottles of beer on the wall, 80 bottles of beer. Take one down and pass it around, 79 bottles of beer on the wall. 79 bottles of beer on the wall, 79 bottles of beer. Take one down and pass it around, 78 bottles of beer on the wall. 78 bottles of beer on the wall, 78 bottles of beer. Take one down and pass it around, 77 bottles of beer on the wall. 77 bottles of beer on the wall, 77 bottles of beer. Take one down and pass it around, 76 bottles of beer on the wall. 76 bottles of beer on the wall, 76 bottles of beer. Take one down and pass it around, 75 bottles of beer on the wall. 75 bottles of beer on the wall, 75 bottles of beer. Take one down and pass it around, 74 bottles of beer on the wall. 74 bottles of beer on the wall, 74 bottles of beer. Take one down and pass it around, 73 bottles of beer on the wall. 73 bottles of beer on the wall, 73 bottles of beer. Take one down and pass it around, 72 bottles of beer on the wall. 72 bottles of beer on the wall, 72 bottles of beer. Take one down and pass it around, 71 bottles of beer on the wall. 71 bottles of beer on the wall, 71 bottles of beer. Take one down and pass it around, 70 bottles of beer on the wall. 70 bottles of beer on the wall, 70 bottles of beer. Take one down and pass it around, 69 bottles of beer on the wall. 69 bottles of beer on the wall, 69 bottles of beer. Take one down and pass it around, 68 bottles of beer on the wall. 68 bottles of beer on the wall, 68 bottles of beer. Take one down and pass it around, 67 bottles of beer on the wall. 67 bottles of beer on the wall, 67 bottles of beer. Take one down and pass it around, 66 bottles of beer on the wall. 66 bottles of beer on the wall, 66 bottles of beer. Take one down and pass it around, 65 bottles of beer on the wall. 65 bottles of beer on the wall, 65 bottles of beer. Take one down and pass it around, 64 bottles of beer on the wall. 64 bottles of beer on the wall, 64 bottles of beer. Take one down and pass it around, 63 bottles of beer on the wall. 63 bottles of beer on the wall, 63 bottles of beer. Take one down and pass it around, 62 bottles of beer on the wall. 62 bottles of beer on the wall, 62 bottles of beer. Take one down and pass it around, 61 bottles of beer on the wall. 61 bottles of beer on the wall, 61 bottles of beer. Take one down and pass it around, 60 bottles of beer on the wall. 60 bottles of beer on the wall, 60 bottles of beer. Take one down and pass it around, 59 bottles of beer on the wall. 59 bottles of beer on the wall, 59 bottles of beer. Take one down and pass it around, 58 bottles of beer on the wall. 58 bottles of beer on the wall, 58 bottles of beer. Take one down and pass it around, 57 bottles of beer on the wall. 57 bottles of beer on the wall, 57 bottles of beer. Take one down and pass it around, 56 bottles of beer on the wall. 56 bottles of beer on the wall, 56 bottles of beer. Take one down and pass it around, 55 bottles of beer on the wall. 55 bottles of beer on the wall, 55 bottles of beer. Take one down and pass it around, 54 bottles of beer on the wall. 54 bottles of beer on the wall, 54 bottles of beer. Take one down and pass it around, 53 bottles of beer on the wall. 53 bottles of beer on the wall, 53 bottles of beer. Take one down and pass it around, 52 bottles of beer on the wall. 52 bottles of beer on the wall, 52 bottles of beer. Take one down and pass it around, 51 bottles of beer on the wall. 51 bottles of beer on the wall, 51 bottles of beer. Take one down and pass it around, 50 bottles of beer on the wall. 50 bottles of beer on the wall, 50 bottles of beer. Take one down and pass it around, 49 bottles of beer on the wall. 49 bottles of beer on the wall, 49 bottles of beer. Take one down and pass it around, 48 bottles of beer on the wall. 48 bottles of beer on the wall, 48 bottles of beer. Take one down and pass it around, 47 bottles of beer on the wall. 47 bottles of beer on the wall, 47 bottles of beer. Take one down and pass it around, 46 bottles of beer on the wall. 46 bottles of beer on the wall, 46 bottles of beer. Take one down and pass it around, 45 bottles of beer on the wall. 45 bottles of beer on the wall, 45 bottles of beer. Take one down and pass it around, 44 bottles of beer on the wall. 44 bottles of beer on the wall, 44 bottles of beer. Take one down and pass it around, 43 bottles of beer on the wall. 43 bottles of beer on the wall, 43 bottles of beer. Take one down and pass it around, 42 bottles of beer on the wall. 42 bottles of beer on the wall, 42 bottles of beer. Take one down and pass it around, 41 bottles of beer on the wall. 41 bottles of beer on the wall, 41 bottles of beer. Take one down and pass it around, 40 bottles of beer on the wall. 40 bottles of beer on the wall, 40 bottles of beer. Take one down and pass it around, 39 bottles of beer on the wall. 39 bottles of beer on the wall, 39 bottles of beer. Take one down and pass it around, 38 bottles of beer on the wall. 38 bottles of beer on the wall, 38 bottles of beer. Take one down and pass it around, 37 bottles of beer on the wall. 37 bottles of beer on the wall, 37 bottles of beer. Take one down and pass it around, 36 bottles of beer on the wall. 36 bottles of beer on the wall, 36 bottles of beer. Take one down and pass it around, 35 bottles of beer on the wall. 35 bottles of beer on the wall, 35 bottles of beer. Take one down and pass it around, 34 bottles of beer on the wall. 34 bottles of beer on the wall, 34 bottles of beer. Take one down and pass it around, 33 bottles of beer on the wall. 33 bottles of beer on the wall, 33 bottles of beer. Take one down and pass it around, 32 bottles of beer on the wall. 32 bottles of beer on the wall, 32 bottles of beer. Take one down and pass it around, 31 bottles of beer on the wall. 31 bottles of beer on the wall, 31 bottles of beer. Take one down and pass it around, 30 bottles of beer on the wall. 30 bottles of beer on the wall, 30 bottles of beer. Take one down and pass it around, 29 bottles of beer on the wall. 29 bottles of beer on the wall, 29 bottles of beer. Take one down and pass it around, 28 bottles of beer on the wall. 28 bottles of beer on the wall, 28 bottles of beer. Take one down and pass it around, 27 bottles of beer on the wall. 27 bottles of beer on the wall, 27 bottles of beer. Take one down and pass it around, 26 bottles of beer on the wall. 26 bottles of beer on the wall, 26 bottles of beer. Take one down and pass it around, 25 bottles of beer on the wall. 25 bottles of beer on the wall, 25 bottles of beer. Take one down and pass it around, 24 bottles of beer on the wall. 24 bottles of beer on the wall, 24 bottles of beer. Take one down and pass it around, 23 bottles of beer on the wall. 23 bottles of beer on the wall, 23 bottles of beer. Take one down and pass it around, 22 bottles of beer on the wall. 22 bottles of beer on the wall, 22 bottles of beer. Take one down and pass it around, 21 bottles of beer on the wall. 21 bottles of beer on the wall, 21 bottles of beer. Take one down and pass it around, 20 bottles of beer on the wall. 20 bottles of beer on the wall, 20 bottles of beer. Take one down and pass it around, 19 bottles of beer on the wall. 19 bottles of beer on the wall, 19 bottles of beer. Take one down and pass it around, 18 bottles of beer on the wall. 18 bottles of beer on the wall, 18 bottles of beer. Take one down and pass it around, 17 bottles of beer on the wall. 17 bottles of beer on the wall, 17 bottles of beer. Take one down and pass it around, 16 bottles of beer on the wall. 16 bottles of beer on the wall, 16 bottles of beer. Take one down and pass it around, 15 bottles of beer on the wall. 15 bottles of beer on the wall, 15 bottles of beer. Take one down and pass it around, 14 bottles of beer on the wall. 14 bottles of beer on the wall, 14 bottles of beer. Take one down and pass it around, 13 bottles of beer on the wall. 13 bottles of beer on the wall, 13 bottles of beer. Take one down and pass it around, 12 bottles of beer on the wall. 12 bottles of beer on the wall, 12 bottles of beer. Take one down and pass it around, 11 bottles of beer on the wall. 11 bottles of beer on the wall, 11 bottles of beer. Take one down and pass it around, 10 bottles of beer on the wall. 10 bottles of beer on the wall, 10 bottles of beer. Take one down and pass it around, 9 bottles of beer on the wall. 9 bottles of beer on the wall, 9 bottles of beer. Take one down and pass it around, 8 bottles of beer on the wall. 8 bottles of beer on the wall, 8 bottles of beer. Take one down and pass it around, 7 bottles of beer on the wall. 7 bottles of beer on the wall, 7 bottles of beer. Take one down and pass it around, 6 bottles of beer on the wall. 6 bottles of beer on the wall, 6 bottles of beer. Take one down and pass it around, 5 bottles of beer on the wall. 5 bottles of beer on the wall, 5 bottles of beer. Take one down and pass it around, 4 bottles of beer on the wall. 4 bottles of beer on the wall, 4 bottles of beer. Take one down and pass it around, 3 bottles of beer on the wall. 3 bottles of beer on the wall, 3 bottles of beer. Take one down and pass it around, 2 bottles of beer on the wall. 2 bottles of beer on the wall, 2 bottles of beer. Take one down and pass it around, 1 bottle of beer on the wall. 1 bottle of beer on the wall, 1 bottle of beer. Take it down and pass it around, no more bottles of beer on the wall. No more bottles of beer on the wall, no more bottles of beer. Go to the store and buy some more, 99 bottles of beer on the wall. Task Recite the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall. Note that not all verses are identical. The Code beer_song.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include \"beer_song.h\" #include \"stdlib.h\" #include \"string.h\" #include <stdio.h> //\"99 bottles of beer on the wall, 99 bottles of beer.\\n\" //\"Take one down and pass it around, 98 bottles of beer on the wall.\\n\"; void recite ( unsigned int start_bottles , unsigned int take_down , char * buffer ) { char var01 [ 300 ] = { 0 }; char var02 [ 512 ] = { 0 }; int var03 = start_bottles ; int i = 0 ; for ( i = 0 ; i < ( int ) take_down ; i ++ ) { if ( i > 0 ) strcat ( var02 , \" \\n \" ); if ( var03 > 1 ) sprintf ( var01 , \"%d bottles of beer on the wall, \" , var03 ); else if ( var03 == 1 ) sprintf ( var01 , \"%d bottle of beer on the wall, \" , var03 ); else if ( var03 == 0 ) sprintf ( var01 , \"No more bottles of beer on the wall, \" ); strcat ( var02 , var01 ); memset (( void * ) var01 , 0 , sizeof ( var01 )); if ( var03 > 1 ) sprintf ( var01 , \"%d bottles of beer. \\n \" , var03 ); if ( var03 == 1 ) sprintf ( var01 , \"%d bottle of beer. \\n \" , var03 ); if ( var03 == 0 ) sprintf ( var01 , \"no more bottles of beer. \\n \" ); strcat ( var02 , var01 ); memset (( void * ) var01 , 0 , sizeof ( var01 )); if ( var03 > 1 ) sprintf ( var01 , \"Take one down and pass it around, \" ); else if ( var03 == 1 ) sprintf ( var01 , \"Take it down and pass it around, \" ); else if ( var03 == 0 ) sprintf ( var01 , \"Go to the store and buy some more, \" ); strcat ( var02 , var01 ); memset (( void * ) var01 , 0 , sizeof ( var01 )); var03 -- ; if ( var03 == 1 ) sprintf ( var01 , \"%d bottle of beer on the wall. \\n \" , var03 ); else if ( var03 > 1 ) sprintf ( var01 , \"%d bottles of beer on the wall. \\n \" , var03 ); else if ( var03 == 0 ) sprintf ( var01 , \"no more bottles of beer on the wall. \\n \" ); else if ( var03 < 0 ) sprintf ( var01 , \"%d bottles of beer on the wall. \\n \" , 99 ); strcat ( var02 , var01 ); memset (( void * ) var01 , 0 , sizeof ( var01 )); } strcpy ( buffer , var02 ); } beer_song.h 1 2 3 4 5 6 #ifndef BEER_SONG_H #define BEER_SONG_H void recite ( unsigned int start_bottles , unsigned int take_down , char * buffer ); #endif","title":"Beer Song"},{"location":"lang/clang/contoh/beerSong/#intro","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 99 bottles of beer on the wall, 99 bottles of beer. Take one down and pass it around, 98 bottles of beer on the wall. 98 bottles of beer on the wall, 98 bottles of beer. Take one down and pass it around, 97 bottles of beer on the wall. 97 bottles of beer on the wall, 97 bottles of beer. Take one down and pass it around, 96 bottles of beer on the wall. 96 bottles of beer on the wall, 96 bottles of beer. Take one down and pass it around, 95 bottles of beer on the wall. 95 bottles of beer on the wall, 95 bottles of beer. Take one down and pass it around, 94 bottles of beer on the wall. 94 bottles of beer on the wall, 94 bottles of beer. Take one down and pass it around, 93 bottles of beer on the wall. 93 bottles of beer on the wall, 93 bottles of beer. Take one down and pass it around, 92 bottles of beer on the wall. 92 bottles of beer on the wall, 92 bottles of beer. Take one down and pass it around, 91 bottles of beer on the wall. 91 bottles of beer on the wall, 91 bottles of beer. Take one down and pass it around, 90 bottles of beer on the wall. 90 bottles of beer on the wall, 90 bottles of beer. Take one down and pass it around, 89 bottles of beer on the wall. 89 bottles of beer on the wall, 89 bottles of beer. Take one down and pass it around, 88 bottles of beer on the wall. 88 bottles of beer on the wall, 88 bottles of beer. Take one down and pass it around, 87 bottles of beer on the wall. 87 bottles of beer on the wall, 87 bottles of beer. Take one down and pass it around, 86 bottles of beer on the wall. 86 bottles of beer on the wall, 86 bottles of beer. Take one down and pass it around, 85 bottles of beer on the wall. 85 bottles of beer on the wall, 85 bottles of beer. Take one down and pass it around, 84 bottles of beer on the wall. 84 bottles of beer on the wall, 84 bottles of beer. Take one down and pass it around, 83 bottles of beer on the wall. 83 bottles of beer on the wall, 83 bottles of beer. Take one down and pass it around, 82 bottles of beer on the wall. 82 bottles of beer on the wall, 82 bottles of beer. Take one down and pass it around, 81 bottles of beer on the wall. 81 bottles of beer on the wall, 81 bottles of beer. Take one down and pass it around, 80 bottles of beer on the wall. 80 bottles of beer on the wall, 80 bottles of beer. Take one down and pass it around, 79 bottles of beer on the wall. 79 bottles of beer on the wall, 79 bottles of beer. Take one down and pass it around, 78 bottles of beer on the wall. 78 bottles of beer on the wall, 78 bottles of beer. Take one down and pass it around, 77 bottles of beer on the wall. 77 bottles of beer on the wall, 77 bottles of beer. Take one down and pass it around, 76 bottles of beer on the wall. 76 bottles of beer on the wall, 76 bottles of beer. Take one down and pass it around, 75 bottles of beer on the wall. 75 bottles of beer on the wall, 75 bottles of beer. Take one down and pass it around, 74 bottles of beer on the wall. 74 bottles of beer on the wall, 74 bottles of beer. Take one down and pass it around, 73 bottles of beer on the wall. 73 bottles of beer on the wall, 73 bottles of beer. Take one down and pass it around, 72 bottles of beer on the wall. 72 bottles of beer on the wall, 72 bottles of beer. Take one down and pass it around, 71 bottles of beer on the wall. 71 bottles of beer on the wall, 71 bottles of beer. Take one down and pass it around, 70 bottles of beer on the wall. 70 bottles of beer on the wall, 70 bottles of beer. Take one down and pass it around, 69 bottles of beer on the wall. 69 bottles of beer on the wall, 69 bottles of beer. Take one down and pass it around, 68 bottles of beer on the wall. 68 bottles of beer on the wall, 68 bottles of beer. Take one down and pass it around, 67 bottles of beer on the wall. 67 bottles of beer on the wall, 67 bottles of beer. Take one down and pass it around, 66 bottles of beer on the wall. 66 bottles of beer on the wall, 66 bottles of beer. Take one down and pass it around, 65 bottles of beer on the wall. 65 bottles of beer on the wall, 65 bottles of beer. Take one down and pass it around, 64 bottles of beer on the wall. 64 bottles of beer on the wall, 64 bottles of beer. Take one down and pass it around, 63 bottles of beer on the wall. 63 bottles of beer on the wall, 63 bottles of beer. Take one down and pass it around, 62 bottles of beer on the wall. 62 bottles of beer on the wall, 62 bottles of beer. Take one down and pass it around, 61 bottles of beer on the wall. 61 bottles of beer on the wall, 61 bottles of beer. Take one down and pass it around, 60 bottles of beer on the wall. 60 bottles of beer on the wall, 60 bottles of beer. Take one down and pass it around, 59 bottles of beer on the wall. 59 bottles of beer on the wall, 59 bottles of beer. Take one down and pass it around, 58 bottles of beer on the wall. 58 bottles of beer on the wall, 58 bottles of beer. Take one down and pass it around, 57 bottles of beer on the wall. 57 bottles of beer on the wall, 57 bottles of beer. Take one down and pass it around, 56 bottles of beer on the wall. 56 bottles of beer on the wall, 56 bottles of beer. Take one down and pass it around, 55 bottles of beer on the wall. 55 bottles of beer on the wall, 55 bottles of beer. Take one down and pass it around, 54 bottles of beer on the wall. 54 bottles of beer on the wall, 54 bottles of beer. Take one down and pass it around, 53 bottles of beer on the wall. 53 bottles of beer on the wall, 53 bottles of beer. Take one down and pass it around, 52 bottles of beer on the wall. 52 bottles of beer on the wall, 52 bottles of beer. Take one down and pass it around, 51 bottles of beer on the wall. 51 bottles of beer on the wall, 51 bottles of beer. Take one down and pass it around, 50 bottles of beer on the wall. 50 bottles of beer on the wall, 50 bottles of beer. Take one down and pass it around, 49 bottles of beer on the wall. 49 bottles of beer on the wall, 49 bottles of beer. Take one down and pass it around, 48 bottles of beer on the wall. 48 bottles of beer on the wall, 48 bottles of beer. Take one down and pass it around, 47 bottles of beer on the wall. 47 bottles of beer on the wall, 47 bottles of beer. Take one down and pass it around, 46 bottles of beer on the wall. 46 bottles of beer on the wall, 46 bottles of beer. Take one down and pass it around, 45 bottles of beer on the wall. 45 bottles of beer on the wall, 45 bottles of beer. Take one down and pass it around, 44 bottles of beer on the wall. 44 bottles of beer on the wall, 44 bottles of beer. Take one down and pass it around, 43 bottles of beer on the wall. 43 bottles of beer on the wall, 43 bottles of beer. Take one down and pass it around, 42 bottles of beer on the wall. 42 bottles of beer on the wall, 42 bottles of beer. Take one down and pass it around, 41 bottles of beer on the wall. 41 bottles of beer on the wall, 41 bottles of beer. Take one down and pass it around, 40 bottles of beer on the wall. 40 bottles of beer on the wall, 40 bottles of beer. Take one down and pass it around, 39 bottles of beer on the wall. 39 bottles of beer on the wall, 39 bottles of beer. Take one down and pass it around, 38 bottles of beer on the wall. 38 bottles of beer on the wall, 38 bottles of beer. Take one down and pass it around, 37 bottles of beer on the wall. 37 bottles of beer on the wall, 37 bottles of beer. Take one down and pass it around, 36 bottles of beer on the wall. 36 bottles of beer on the wall, 36 bottles of beer. Take one down and pass it around, 35 bottles of beer on the wall. 35 bottles of beer on the wall, 35 bottles of beer. Take one down and pass it around, 34 bottles of beer on the wall. 34 bottles of beer on the wall, 34 bottles of beer. Take one down and pass it around, 33 bottles of beer on the wall. 33 bottles of beer on the wall, 33 bottles of beer. Take one down and pass it around, 32 bottles of beer on the wall. 32 bottles of beer on the wall, 32 bottles of beer. Take one down and pass it around, 31 bottles of beer on the wall. 31 bottles of beer on the wall, 31 bottles of beer. Take one down and pass it around, 30 bottles of beer on the wall. 30 bottles of beer on the wall, 30 bottles of beer. Take one down and pass it around, 29 bottles of beer on the wall. 29 bottles of beer on the wall, 29 bottles of beer. Take one down and pass it around, 28 bottles of beer on the wall. 28 bottles of beer on the wall, 28 bottles of beer. Take one down and pass it around, 27 bottles of beer on the wall. 27 bottles of beer on the wall, 27 bottles of beer. Take one down and pass it around, 26 bottles of beer on the wall. 26 bottles of beer on the wall, 26 bottles of beer. Take one down and pass it around, 25 bottles of beer on the wall. 25 bottles of beer on the wall, 25 bottles of beer. Take one down and pass it around, 24 bottles of beer on the wall. 24 bottles of beer on the wall, 24 bottles of beer. Take one down and pass it around, 23 bottles of beer on the wall. 23 bottles of beer on the wall, 23 bottles of beer. Take one down and pass it around, 22 bottles of beer on the wall. 22 bottles of beer on the wall, 22 bottles of beer. Take one down and pass it around, 21 bottles of beer on the wall. 21 bottles of beer on the wall, 21 bottles of beer. Take one down and pass it around, 20 bottles of beer on the wall. 20 bottles of beer on the wall, 20 bottles of beer. Take one down and pass it around, 19 bottles of beer on the wall. 19 bottles of beer on the wall, 19 bottles of beer. Take one down and pass it around, 18 bottles of beer on the wall. 18 bottles of beer on the wall, 18 bottles of beer. Take one down and pass it around, 17 bottles of beer on the wall. 17 bottles of beer on the wall, 17 bottles of beer. Take one down and pass it around, 16 bottles of beer on the wall. 16 bottles of beer on the wall, 16 bottles of beer. Take one down and pass it around, 15 bottles of beer on the wall. 15 bottles of beer on the wall, 15 bottles of beer. Take one down and pass it around, 14 bottles of beer on the wall. 14 bottles of beer on the wall, 14 bottles of beer. Take one down and pass it around, 13 bottles of beer on the wall. 13 bottles of beer on the wall, 13 bottles of beer. Take one down and pass it around, 12 bottles of beer on the wall. 12 bottles of beer on the wall, 12 bottles of beer. Take one down and pass it around, 11 bottles of beer on the wall. 11 bottles of beer on the wall, 11 bottles of beer. Take one down and pass it around, 10 bottles of beer on the wall. 10 bottles of beer on the wall, 10 bottles of beer. Take one down and pass it around, 9 bottles of beer on the wall. 9 bottles of beer on the wall, 9 bottles of beer. Take one down and pass it around, 8 bottles of beer on the wall. 8 bottles of beer on the wall, 8 bottles of beer. Take one down and pass it around, 7 bottles of beer on the wall. 7 bottles of beer on the wall, 7 bottles of beer. Take one down and pass it around, 6 bottles of beer on the wall. 6 bottles of beer on the wall, 6 bottles of beer. Take one down and pass it around, 5 bottles of beer on the wall. 5 bottles of beer on the wall, 5 bottles of beer. Take one down and pass it around, 4 bottles of beer on the wall. 4 bottles of beer on the wall, 4 bottles of beer. Take one down and pass it around, 3 bottles of beer on the wall. 3 bottles of beer on the wall, 3 bottles of beer. Take one down and pass it around, 2 bottles of beer on the wall. 2 bottles of beer on the wall, 2 bottles of beer. Take one down and pass it around, 1 bottle of beer on the wall. 1 bottle of beer on the wall, 1 bottle of beer. Take it down and pass it around, no more bottles of beer on the wall. No more bottles of beer on the wall, no more bottles of beer. Go to the store and buy some more, 99 bottles of beer on the wall.","title":"Intro"},{"location":"lang/clang/contoh/beerSong/#task","text":"Recite the lyrics to that beloved classic, that field-trip favorite: 99 Bottles of Beer on the Wall. Note that not all verses are identical.","title":"Task"},{"location":"lang/clang/contoh/beerSong/#the-code","text":"beer_song.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include \"beer_song.h\" #include \"stdlib.h\" #include \"string.h\" #include <stdio.h> //\"99 bottles of beer on the wall, 99 bottles of beer.\\n\" //\"Take one down and pass it around, 98 bottles of beer on the wall.\\n\"; void recite ( unsigned int start_bottles , unsigned int take_down , char * buffer ) { char var01 [ 300 ] = { 0 }; char var02 [ 512 ] = { 0 }; int var03 = start_bottles ; int i = 0 ; for ( i = 0 ; i < ( int ) take_down ; i ++ ) { if ( i > 0 ) strcat ( var02 , \" \\n \" ); if ( var03 > 1 ) sprintf ( var01 , \"%d bottles of beer on the wall, \" , var03 ); else if ( var03 == 1 ) sprintf ( var01 , \"%d bottle of beer on the wall, \" , var03 ); else if ( var03 == 0 ) sprintf ( var01 , \"No more bottles of beer on the wall, \" ); strcat ( var02 , var01 ); memset (( void * ) var01 , 0 , sizeof ( var01 )); if ( var03 > 1 ) sprintf ( var01 , \"%d bottles of beer. \\n \" , var03 ); if ( var03 == 1 ) sprintf ( var01 , \"%d bottle of beer. \\n \" , var03 ); if ( var03 == 0 ) sprintf ( var01 , \"no more bottles of beer. \\n \" ); strcat ( var02 , var01 ); memset (( void * ) var01 , 0 , sizeof ( var01 )); if ( var03 > 1 ) sprintf ( var01 , \"Take one down and pass it around, \" ); else if ( var03 == 1 ) sprintf ( var01 , \"Take it down and pass it around, \" ); else if ( var03 == 0 ) sprintf ( var01 , \"Go to the store and buy some more, \" ); strcat ( var02 , var01 ); memset (( void * ) var01 , 0 , sizeof ( var01 )); var03 -- ; if ( var03 == 1 ) sprintf ( var01 , \"%d bottle of beer on the wall. \\n \" , var03 ); else if ( var03 > 1 ) sprintf ( var01 , \"%d bottles of beer on the wall. \\n \" , var03 ); else if ( var03 == 0 ) sprintf ( var01 , \"no more bottles of beer on the wall. \\n \" ); else if ( var03 < 0 ) sprintf ( var01 , \"%d bottles of beer on the wall. \\n \" , 99 ); strcat ( var02 , var01 ); memset (( void * ) var01 , 0 , sizeof ( var01 )); } strcpy ( buffer , var02 ); } beer_song.h 1 2 3 4 5 6 #ifndef BEER_SONG_H #define BEER_SONG_H void recite ( unsigned int start_bottles , unsigned int take_down , char * buffer ); #endif","title":"The Code"},{"location":"lang/clang/contoh/darts/","text":"Dart Intro Write a function that returns the earned points in a single toss of a Darts game. Darts is a game where players throw darts to a target. In our particular instance of the game, the target rewards with 4 different amounts of points, depending on where the dart lands: If the dart lands outside the target, player earns no points (0 points). If the dart lands in the outer circle of the target, player earns 1 point. If the dart lands in the middle circle of the target, player earns 5 points. If the dart lands in the inner circle of the target, player earns 10 points. The outer circle has a radius of 10 units (This is equivalent to the total radius for the entire target), the middle circle a radius of 5 units, and the inner circle a radius of 1. Of course, they are all centered to the same point (That is, the circles are concentric) defined by the coordinates (0, 0). Task Write a function that given a point in the target (defined by its real cartesian coordinates x and y), returns the correct amount earned by a dart landing in that point. The Code darts.h 1 2 3 4 5 6 7 8 9 10 11 12 #ifndef DARTS_H #define DARTS_H typedef struct coordinate { double x ; double y ; } coordinate_t ; int score ( coordinate_t test ); #endif darts.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \"darts.h\" #include <math.h> int score ( coordinate_t test ) { float var01 = 0 ; var01 = pow ( test . x , 2 ) + pow ( test . y , 2 ); var01 = sqrt ( var01 ); if ( var01 <= 1.0 ) { return 10 ; } else if ( var01 >= 1.1 && var01 <= 5.0 ) { return 5 ; } else if ( var01 <= 10.0 && var01 >= 5.1 ){ return 1 ; } return 0 ; }","title":"Darts"},{"location":"lang/clang/contoh/darts/#dart","text":"","title":"Dart"},{"location":"lang/clang/contoh/darts/#intro","text":"Write a function that returns the earned points in a single toss of a Darts game. Darts is a game where players throw darts to a target. In our particular instance of the game, the target rewards with 4 different amounts of points, depending on where the dart lands: If the dart lands outside the target, player earns no points (0 points). If the dart lands in the outer circle of the target, player earns 1 point. If the dart lands in the middle circle of the target, player earns 5 points. If the dart lands in the inner circle of the target, player earns 10 points. The outer circle has a radius of 10 units (This is equivalent to the total radius for the entire target), the middle circle a radius of 5 units, and the inner circle a radius of 1. Of course, they are all centered to the same point (That is, the circles are concentric) defined by the coordinates (0, 0).","title":"Intro"},{"location":"lang/clang/contoh/darts/#task","text":"Write a function that given a point in the target (defined by its real cartesian coordinates x and y), returns the correct amount earned by a dart landing in that point.","title":"Task"},{"location":"lang/clang/contoh/darts/#the-code","text":"darts.h 1 2 3 4 5 6 7 8 9 10 11 12 #ifndef DARTS_H #define DARTS_H typedef struct coordinate { double x ; double y ; } coordinate_t ; int score ( coordinate_t test ); #endif darts.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \"darts.h\" #include <math.h> int score ( coordinate_t test ) { float var01 = 0 ; var01 = pow ( test . x , 2 ) + pow ( test . y , 2 ); var01 = sqrt ( var01 ); if ( var01 <= 1.0 ) { return 10 ; } else if ( var01 >= 1.1 && var01 <= 5.0 ) { return 5 ; } else if ( var01 <= 10.0 && var01 >= 5.1 ){ return 1 ; } return 0 ; }","title":"The Code"},{"location":"lang/clang/contoh/gigasecond/","text":"Gigasecond Intro A gigasecond is 10^9 (1,000,000,000) seconds. Task Given a moment, determine the moment that would be after a gigasecond has passed. The Code gigasecond.c 1 2 3 4 5 6 #include \"gigasecond.h\" time_t gigasecond_after ( time_t test ) { return test + 1000000000 ; } gigasecond.h 1 2 3 4 5 6 7 8 #ifndef GIGASECOND_H #define GIGASECOND_H #include <time.h> time_t gigasecond_after ( time_t ); #endif","title":"Giga Second"},{"location":"lang/clang/contoh/gigasecond/#gigasecond","text":"","title":"Gigasecond"},{"location":"lang/clang/contoh/gigasecond/#intro","text":"A gigasecond is 10^9 (1,000,000,000) seconds.","title":"Intro"},{"location":"lang/clang/contoh/gigasecond/#task","text":"Given a moment, determine the moment that would be after a gigasecond has passed.","title":"Task"},{"location":"lang/clang/contoh/gigasecond/#the-code","text":"gigasecond.c 1 2 3 4 5 6 #include \"gigasecond.h\" time_t gigasecond_after ( time_t test ) { return test + 1000000000 ; } gigasecond.h 1 2 3 4 5 6 7 8 #ifndef GIGASECOND_H #define GIGASECOND_H #include <time.h> time_t gigasecond_after ( time_t ); #endif","title":"The Code"},{"location":"lang/clang/contoh/grains/","text":"Grains Intro Calculate the number of grains of wheat on a chessboard given that the number on each square doubles. There once was a wise servant who saved the life of a prince. The king promised to pay whatever the servant could dream up. Knowing that the king loved chess, the servant told the king he would like to have grains of wheat. One grain on the first square of a chess board, with the number of grains doubling on each successive square. There are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on). Task Write code that shows: how many grains were on a given square, and the total number of grains on the chessboard The Code grains.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include \"grains.h\" #include <stdint.h> uint64_t square ( uint8_t index ) { if ( index > 64 || index < 1 ) return 0 ; int i = 0 ; uint64_t var = 1 ; for ( i = 1 ; i < index ; i ++ ) { var *= 2 ; } return var ; } uint64_t total ( void ) { uint64_t var = 0 ; int i = 0 ; for ( i = 1 ; i <= 64 ; i ++ ) { var += square ( i ); } return var ; } grains.h 1 2 3 4 5 6 7 8 9 #ifndef GRAINS_H #define GRAINS_H #include <stdint.h> uint64_t square ( uint8_t index ); uint64_t total ( void ); #endif","title":"Grains"},{"location":"lang/clang/contoh/grains/#grains","text":"","title":"Grains"},{"location":"lang/clang/contoh/grains/#intro","text":"Calculate the number of grains of wheat on a chessboard given that the number on each square doubles. There once was a wise servant who saved the life of a prince. The king promised to pay whatever the servant could dream up. Knowing that the king loved chess, the servant told the king he would like to have grains of wheat. One grain on the first square of a chess board, with the number of grains doubling on each successive square. There are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).","title":"Intro"},{"location":"lang/clang/contoh/grains/#task","text":"Write code that shows: how many grains were on a given square, and the total number of grains on the chessboard","title":"Task"},{"location":"lang/clang/contoh/grains/#the-code","text":"grains.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include \"grains.h\" #include <stdint.h> uint64_t square ( uint8_t index ) { if ( index > 64 || index < 1 ) return 0 ; int i = 0 ; uint64_t var = 1 ; for ( i = 1 ; i < index ; i ++ ) { var *= 2 ; } return var ; } uint64_t total ( void ) { uint64_t var = 0 ; int i = 0 ; for ( i = 1 ; i <= 64 ; i ++ ) { var += square ( i ); } return var ; } grains.h 1 2 3 4 5 6 7 8 9 #ifndef GRAINS_H #define GRAINS_H #include <stdint.h> uint64_t square ( uint8_t index ); uint64_t total ( void ); #endif","title":"The Code"},{"location":"lang/clang/contoh/hamming/","text":"Hamming We read DNA using the letters C,A,G and T. Two strands might look like this: 1 2 3 GAGCCTACTAACGGGAT CATCGTAATGACGGCCT ^ ^ ^ ^ ^ ^^ They have 7 differences, and therefore the Hamming Distance is 7. The Hamming Distance is useful for lots of things in science, not just biology, so it's a nice phrase to be familiar with :) Task Calculate the Hamming Distance between two DNA strands. The Code hamming.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include \"hamming.h\" #include \"stdio.h\" #include \"string.h\" #include <stdlib.h> int compute ( const char * lhs , const char * rhs ) { if ( * lhs == '\\0' && * rhs == '\\0' ) return 0 ; if ( strlen ( lhs ) != strlen ( rhs )) return -1 ; int i = 0 ; int ii = 0 ; for ( i = 0 ; i < ( int ) strlen ( lhs ); i ++ ) { if ( lhs [ i ] != rhs [ i ]) ii ++ ; } return ii ; } hamming.h 1 2 3 4 5 6 #ifndef HAMMING_H #define HAMMING_H int compute ( const char * lhs , const char * rhs ); #endif","title":"Hamming"},{"location":"lang/clang/contoh/hamming/#hamming","text":"We read DNA using the letters C,A,G and T. Two strands might look like this: 1 2 3 GAGCCTACTAACGGGAT CATCGTAATGACGGCCT ^ ^ ^ ^ ^ ^^ They have 7 differences, and therefore the Hamming Distance is 7. The Hamming Distance is useful for lots of things in science, not just biology, so it's a nice phrase to be familiar with :)","title":"Hamming"},{"location":"lang/clang/contoh/hamming/#task","text":"Calculate the Hamming Distance between two DNA strands.","title":"Task"},{"location":"lang/clang/contoh/hamming/#the-code","text":"hamming.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include \"hamming.h\" #include \"stdio.h\" #include \"string.h\" #include <stdlib.h> int compute ( const char * lhs , const char * rhs ) { if ( * lhs == '\\0' && * rhs == '\\0' ) return 0 ; if ( strlen ( lhs ) != strlen ( rhs )) return -1 ; int i = 0 ; int ii = 0 ; for ( i = 0 ; i < ( int ) strlen ( lhs ); i ++ ) { if ( lhs [ i ] != rhs [ i ]) ii ++ ; } return ii ; } hamming.h 1 2 3 4 5 6 #ifndef HAMMING_H #define HAMMING_H int compute ( const char * lhs , const char * rhs ); #endif","title":"The Code"},{"location":"lang/clang/contoh/helloWorld/","text":"Hello World Pogram yang paling sering dibuat di bumi hehehe. Siapkan Source code siapkan folder kosong dan buatlah file dengan nama helloWorld.c buka dengan text editor dan ketik/copas baris pogram dibawah ini. 1 2 3 4 5 6 7 8 9 10 11 /* Pogram hello world keren. */ #include <stdio.h> int main ( void ) { printf ( \"Hello World \\n \" ); return 0 ; } Compile dengan GCC Pada tahap ini file helloWorld.c yang sudah disiapkan akan di baca oleh GCC dan dirubah menjadi format executable. 1 2 3 $ gcc -o helloWorld helloWorld.c $ ./helloWorld $ Hello World Compile dengan GCC dan Make Make merupakan Build system yang umum digunakan. jika menggunakan make untuk mengcompile satu file saja cukup menggunakan perintah 1 2 3 $ make helloWorld $ ./helloWorld $ Hello World The Exercism.io Ways Pada contoh C yang ada di situs ini menggunakan contoh soal yang disediakan oleh , menyediakan beberapa soal latihan untuk berbagai jenis bahasa pemograman, selain soal latihan juga memberikan tempat bagi komunitas untuk berdikusi dan membandingkan solusi dari coding mereka. in short just join (for free) and have fun. Cara yang dipakai di Exercism.io agak berbeda dengan cara yang sudah saya tunjukkan sebelum nya, meskipun juga menggunakan Make namun selain mengcompile source, Make juga digunakan untuk memeriksa apakah pogram yang kita buat sudah sesuai dengan harapan mereka melalui unittest. Join Exercism.io Tentu saja untuk menikmati fasilitas di Exercism.io kita harus menjadi anggota nya. cukup sederhana juga cara daftarnya jika bisa daftar gmail pasti bisa daftar Exercism.io Setup Tool Exercism.io memberikan tool bantuan untuk bisa menggunakan course nya di desktop. tentu saja tool ini tidak diperlukan jika menggunakan fasilitas web/cloud but saya paling ndak bisa ngoding di hp atau di web hehe. Download tool nya dan extact file exercism ke /usr/local/bin buka terminal dan jalankan perintah 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $ exercism --help A command-line interface for the v2 redesign of Exercism. Download exercises and submit your solutions. Usage: [ command ] Available Commands: configure Configure the command-line client. download Download an exercise. help Help about any command open Open an exercise on the website. prepare Prepare does setup for Exercism and its tracks. submit Submit your solution to an exercise. troubleshoot Troubleshoot does a diagnostic self-check. upgrade Upgrade to the latest version of the CLI. version Version outputs the version of CLI. workspace Print out the path to your Exercism workspace. Flags: -h, --help help for this command --timeout int override the default HTTP timeout ( seconds ) --unmask-token will unmask the API during a request/response dump -v, --verbose verbose output Use \" [command] --help\" for more information about a command. Pilih C course Pilih course/tracks yang diinginkan saya mulai dengan C, C++, Nim, Python, Bash, Lua, Go dan x86_64 Assembly. hehe. Mari mulai dengan C tracks pertama yang kita kerjakan adalah Hello World. Buka tracks Hello World dan gunakan tombol download untuk meng-copy perintah exercism tool, Buka terminal dan ketik perintah ini 1 $ exercism download --exercise = hello-world --track = c maka secara ostosmastis exercism akan mendownload exercise hello-world ke folder default nya /home/<user>/exercism/c (exercism workspace)tunggu apa lagi hehe. Buka workspace cari file README.md file tersebut merupakan file dengan format markdown dan berisi petunjuk kerja. Buka folder hello-world/src pada umumnya akan terdapat dua file dengan extension .c dan .h dimana .c merupakan file source code nya dan .h merupakan headernya. Start Working OK! Baca Perintah Buka file hello-world.c dengan text file editor favoritmu pada file Readme.md terdapat perintah untuk 1 2 3 4 5 The objectives are simple: - Write a function that returns the string \"Hello, World!\". - Run the test suite and make sure that it succeeds. - Submit your solution and check it at the website. Kurang lebih artinya buka file hello-world.c edit supaya saat dicompile dan dijalankan keluar kata \"hello World!\" ingat tugas ini case sensitive. Edit File Edit file hello_world.c sehingga menjadi seperti dibawah ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Include the standard definitions header from the standard library, so that we // have access to 'NULL'. This can be removed if your changes remove the need // for 'NULL'. #include <stddef.h> #include \"hello_world.h\" // Define the function itself. const char * hello ( void ) { // To fix this function, change the return statement here to instead return // a string equivalent to the string expected by the failing test. return \"Hello, World!\" ; } Make/Compile arahkan terminal ke folder induk tracks, tempat dimana terdapat file Makefile dan jalankan 1 2 3 4 5 6 $ make test/test_hello_world.c:32:test_say_hi:PASS ----------------------- 1 Tests 0 Failures 0 Ignored OK Kirim Jawaban ke Exercism.io jika ada tulisan 0 Failures pada step Make/Compile maka tracks udah selesai dan siap dikirim. Kirim jawaban dengan tool exercism menggunakan option summit 1 2 3 4 5 6 7 $ exercism submit src/hello_world.c Your solution has been submitted successfully. You can complete the exercise and unlock the next core exercise at: https://exercism.io/my/solutions/57145772eb7542539928bf880ee02cb7 Completing tracks Buka lagi situs Exercism.io login jika belum dan buka exercise pada sub bab Pilih C Source tekan tombol complete this solution . sekarang buka tracks selanjutnya hehehe. Goodluck","title":"Hello World"},{"location":"lang/clang/contoh/helloWorld/#hello-world","text":"Pogram yang paling sering dibuat di bumi hehehe.","title":"Hello World"},{"location":"lang/clang/contoh/helloWorld/#siapkan-source-code","text":"siapkan folder kosong dan buatlah file dengan nama helloWorld.c buka dengan text editor dan ketik/copas baris pogram dibawah ini. 1 2 3 4 5 6 7 8 9 10 11 /* Pogram hello world keren. */ #include <stdio.h> int main ( void ) { printf ( \"Hello World \\n \" ); return 0 ; }","title":"Siapkan Source code"},{"location":"lang/clang/contoh/helloWorld/#compile-dengan-gcc","text":"Pada tahap ini file helloWorld.c yang sudah disiapkan akan di baca oleh GCC dan dirubah menjadi format executable. 1 2 3 $ gcc -o helloWorld helloWorld.c $ ./helloWorld $ Hello World","title":"Compile dengan GCC"},{"location":"lang/clang/contoh/helloWorld/#compile-dengan-gcc-dan-make","text":"Make merupakan Build system yang umum digunakan. jika menggunakan make untuk mengcompile satu file saja cukup menggunakan perintah 1 2 3 $ make helloWorld $ ./helloWorld $ Hello World","title":"Compile dengan GCC dan Make"},{"location":"lang/clang/contoh/helloWorld/#the-exercismio-ways","text":"Pada contoh C yang ada di situs ini menggunakan contoh soal yang disediakan oleh , menyediakan beberapa soal latihan untuk berbagai jenis bahasa pemograman, selain soal latihan juga memberikan tempat bagi komunitas untuk berdikusi dan membandingkan solusi dari coding mereka. in short just join (for free) and have fun. Cara yang dipakai di Exercism.io agak berbeda dengan cara yang sudah saya tunjukkan sebelum nya, meskipun juga menggunakan Make namun selain mengcompile source, Make juga digunakan untuk memeriksa apakah pogram yang kita buat sudah sesuai dengan harapan mereka melalui unittest.","title":"The Exercism.io Ways"},{"location":"lang/clang/contoh/helloWorld/#join-exercismio","text":"Tentu saja untuk menikmati fasilitas di Exercism.io kita harus menjadi anggota nya. cukup sederhana juga cara daftarnya jika bisa daftar gmail pasti bisa daftar Exercism.io","title":"Join Exercism.io"},{"location":"lang/clang/contoh/helloWorld/#setup-tool","text":"Exercism.io memberikan tool bantuan untuk bisa menggunakan course nya di desktop. tentu saja tool ini tidak diperlukan jika menggunakan fasilitas web/cloud but saya paling ndak bisa ngoding di hp atau di web hehe. Download tool nya dan extact file exercism ke /usr/local/bin buka terminal dan jalankan perintah 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $ exercism --help A command-line interface for the v2 redesign of Exercism. Download exercises and submit your solutions. Usage: [ command ] Available Commands: configure Configure the command-line client. download Download an exercise. help Help about any command open Open an exercise on the website. prepare Prepare does setup for Exercism and its tracks. submit Submit your solution to an exercise. troubleshoot Troubleshoot does a diagnostic self-check. upgrade Upgrade to the latest version of the CLI. version Version outputs the version of CLI. workspace Print out the path to your Exercism workspace. Flags: -h, --help help for this command --timeout int override the default HTTP timeout ( seconds ) --unmask-token will unmask the API during a request/response dump -v, --verbose verbose output Use \" [command] --help\" for more information about a command.","title":"Setup Tool"},{"location":"lang/clang/contoh/helloWorld/#pilih-c-course","text":"Pilih course/tracks yang diinginkan saya mulai dengan C, C++, Nim, Python, Bash, Lua, Go dan x86_64 Assembly. hehe. Mari mulai dengan C tracks pertama yang kita kerjakan adalah Hello World. Buka tracks Hello World dan gunakan tombol download untuk meng-copy perintah exercism tool, Buka terminal dan ketik perintah ini 1 $ exercism download --exercise = hello-world --track = c maka secara ostosmastis exercism akan mendownload exercise hello-world ke folder default nya /home/<user>/exercism/c (exercism workspace)tunggu apa lagi hehe. Buka workspace cari file README.md file tersebut merupakan file dengan format markdown dan berisi petunjuk kerja. Buka folder hello-world/src pada umumnya akan terdapat dua file dengan extension .c dan .h dimana .c merupakan file source code nya dan .h merupakan headernya.","title":"Pilih C course"},{"location":"lang/clang/contoh/helloWorld/#start-working","text":"OK!","title":"Start Working"},{"location":"lang/clang/contoh/helloWorld/#baca-perintah","text":"Buka file hello-world.c dengan text file editor favoritmu pada file Readme.md terdapat perintah untuk 1 2 3 4 5 The objectives are simple: - Write a function that returns the string \"Hello, World!\". - Run the test suite and make sure that it succeeds. - Submit your solution and check it at the website. Kurang lebih artinya buka file hello-world.c edit supaya saat dicompile dan dijalankan keluar kata \"hello World!\" ingat tugas ini case sensitive.","title":"Baca Perintah"},{"location":"lang/clang/contoh/helloWorld/#edit-file","text":"Edit file hello_world.c sehingga menjadi seperti dibawah ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Include the standard definitions header from the standard library, so that we // have access to 'NULL'. This can be removed if your changes remove the need // for 'NULL'. #include <stddef.h> #include \"hello_world.h\" // Define the function itself. const char * hello ( void ) { // To fix this function, change the return statement here to instead return // a string equivalent to the string expected by the failing test. return \"Hello, World!\" ; }","title":"Edit File"},{"location":"lang/clang/contoh/helloWorld/#makecompile","text":"arahkan terminal ke folder induk tracks, tempat dimana terdapat file Makefile dan jalankan 1 2 3 4 5 6 $ make test/test_hello_world.c:32:test_say_hi:PASS ----------------------- 1 Tests 0 Failures 0 Ignored OK","title":"Make/Compile"},{"location":"lang/clang/contoh/helloWorld/#kirim-jawaban-ke-exercismio","text":"jika ada tulisan 0 Failures pada step Make/Compile maka tracks udah selesai dan siap dikirim. Kirim jawaban dengan tool exercism menggunakan option summit 1 2 3 4 5 6 7 $ exercism submit src/hello_world.c Your solution has been submitted successfully. You can complete the exercise and unlock the next core exercise at: https://exercism.io/my/solutions/57145772eb7542539928bf880ee02cb7","title":"Kirim Jawaban ke Exercism.io"},{"location":"lang/clang/contoh/helloWorld/#completing-tracks","text":"Buka lagi situs Exercism.io login jika belum dan buka exercise pada sub bab Pilih C Source tekan tombol complete this solution . sekarang buka tracks selanjutnya hehehe. Goodluck","title":"Completing tracks"},{"location":"lang/clang/contoh/isogram/","text":"Isogram Intro An isogram (also known as a \"nonpattern word\") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. Examples of isograms: lumberjacks background downstream six-year-old The word isograms, however, is not an isogram, because the s repeats. Task Determine if a word or phrase is an isogram. The Code isogram.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include \"isogram.h\" #include \"string.h\" #include \"ctype.h\" bool is_isogram ( const char phrase []) { int length ; if ( phrase == NULL ) return false ; for ( length = 0 ; phrase [ length ] != '\\0' ; length ++ ); if ( length == 0 ) return true ; int i ; for ( i = 0 ; i < length ; i ++ ){ int ii ; if ( isalpha ( phrase [ i ]) == false ) continue ; for ( ii = i + 1 ; ii < length ; ii ++ ) { if ( tolower ( phrase [ i ]) == tolower ( phrase [ ii ])) return false ; } } return true ; } isogram.h 1 2 3 4 5 6 7 8 #ifndef ISOGRAM_H #define ISOGRAM_H #include <stdbool.h> bool is_isogram ( const char phrase []); #endif","title":"Isogram"},{"location":"lang/clang/contoh/isogram/#isogram","text":"","title":"Isogram"},{"location":"lang/clang/contoh/isogram/#intro","text":"An isogram (also known as a \"nonpattern word\") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. Examples of isograms: lumberjacks background downstream six-year-old The word isograms, however, is not an isogram, because the s repeats.","title":"Intro"},{"location":"lang/clang/contoh/isogram/#task","text":"Determine if a word or phrase is an isogram.","title":"Task"},{"location":"lang/clang/contoh/isogram/#the-code","text":"isogram.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include \"isogram.h\" #include \"string.h\" #include \"ctype.h\" bool is_isogram ( const char phrase []) { int length ; if ( phrase == NULL ) return false ; for ( length = 0 ; phrase [ length ] != '\\0' ; length ++ ); if ( length == 0 ) return true ; int i ; for ( i = 0 ; i < length ; i ++ ){ int ii ; if ( isalpha ( phrase [ i ]) == false ) continue ; for ( ii = i + 1 ; ii < length ; ii ++ ) { if ( tolower ( phrase [ i ]) == tolower ( phrase [ ii ])) return false ; } } return true ; } isogram.h 1 2 3 4 5 6 7 8 #ifndef ISOGRAM_H #define ISOGRAM_H #include <stdbool.h> bool is_isogram ( const char phrase []); #endif","title":"The Code"},{"location":"lang/clang/contoh/leap/","text":"Intro Given a year, report if it is a leap year. The tricky thing here is that a leap year in the Gregorian calendar occurs: 1 2 3 on every year that is evenly divisible by 4 except every year that is evenly divisible by 100 unless the year is also evenly divisible by 400 Task For example, 1997 is not a leap year, but 1996 is. 1900 is not a leap year, but 2000 is. The Code leap.c 1 2 3 4 5 6 7 8 9 10 #include \"leap.h\" #include <stdbool.h> bool leap_year ( int year ) { if ((( year % 4 ) == 0 && ( year % 100 ) != 0 ) || ( year % 400 ) == 0 ) return true ; return false ; } leap.h 1 2 3 4 5 6 7 8 #ifndef LEAP_H #define LEAP_H #include <stdbool.h> bool leap_year ( int year ); #endif","title":"Leap"},{"location":"lang/clang/contoh/leap/#intro","text":"Given a year, report if it is a leap year. The tricky thing here is that a leap year in the Gregorian calendar occurs: 1 2 3 on every year that is evenly divisible by 4 except every year that is evenly divisible by 100 unless the year is also evenly divisible by 400","title":"Intro"},{"location":"lang/clang/contoh/leap/#task","text":"For example, 1997 is not a leap year, but 1996 is. 1900 is not a leap year, but 2000 is.","title":"Task"},{"location":"lang/clang/contoh/leap/#the-code","text":"leap.c 1 2 3 4 5 6 7 8 9 10 #include \"leap.h\" #include <stdbool.h> bool leap_year ( int year ) { if ((( year % 4 ) == 0 && ( year % 100 ) != 0 ) || ( year % 400 ) == 0 ) return true ; return false ; } leap.h 1 2 3 4 5 6 7 8 #ifndef LEAP_H #define LEAP_H #include <stdbool.h> bool leap_year ( int year ); #endif","title":"The Code"},{"location":"lang/clang/contoh/meetup/","text":"Meetup Intro Calculate the date of meetups. Typically meetups happen on the same day of the week. In this exercise, you will take a description of a meetup date, and return the actual meetup date. Examples of general descriptions are: The first Monday of January 2017 The third Tuesday of January 2017 The wednesteenth of January 2017 The last Thursday of January 2017 The descriptors you are expected to parse are: first, second, third, fourth, fifth, last, monteenth, tuesteenth, wednesteenth, thursteenth, friteenth, saturteenth, sunteenth Note that \"monteenth\", \"tuesteenth\", etc are all made up words. There was a meetup whose members realized that there are exactly 7 numbered days in a month that end in '-teenth'. Therefore, one is guaranteed that each day of the week (Monday, Tuesday, ...) will have exactly one date that is named with '-teenth' in every month. Task Given examples of a meetup dates, each containing a month, day, year, and descriptor calculate the date of the actual meetup. For example, if given \"The first Monday of January 2017\", the correct meetup date is 2017/1/2. The Code meetup.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 #include \"meetup.h\" #include \"string.h\" #include \"time.h\" #include <stdio.h> #include <time.h> int dayOfWeek ( int y , int m , int d ); int dayOfWeek ( int y , int m , int d ) { struct tm tm = {. tm_year = y , . tm_mon = m , . tm_mday = d }; time_t t = mktime ( & tm ); int eval = localtime ( & t ) -> tm_wday ; return eval ; } int meetup_day_of_month ( unsigned int year , unsigned int month , const char * week , const char * day_of_week ) { int rev = 0 ; int date = -1 ; if ( strcmp ( week , \"teenth\" ) == 0 ) date = 13 ; else if ( strcmp ( week , \"first\" ) == 0 ) date = 1 ; else if ( strcmp ( week , \"second\" ) == 0 ) date = 8 ; else if ( strcmp ( week , \"third\" ) == 0 ) date = 15 ; else if ( strcmp ( week , \"fourth\" ) == 0 ) date = 22 ; else if ( strcmp ( week , \"last\" ) == 0 ) { switch ( month ) { case 4 : case 6 : case 9 : case 11 : date = 30 ; rev = 1 ; break ; case 1 : case 3 : case 5 : case 7 : case 8 : case 10 : case 12 : date = 31 ; rev = 1 ; break ; case 2 : if ( year % 4 == 0 ) date = 29 ; else date = 28 ; rev = 1 ; break ; } } int weekday02 = -1 ; if ( strcmp ( day_of_week , \"Monday\" ) == 0 ) weekday02 = 1 ; else if ( strcmp ( day_of_week , \"Tuesday\" ) == 0 ) weekday02 = 2 ; else if ( strcmp ( day_of_week , \"Wednesday\" ) == 0 ) weekday02 = 3 ; else if ( strcmp ( day_of_week , \"Thursday\" ) == 0 ) weekday02 = 4 ; else if ( strcmp ( day_of_week , \"Friday\" ) == 0 ) weekday02 = 5 ; else if ( strcmp ( day_of_week , \"Saturday\" ) == 0 ) weekday02 = 6 ; else if ( strcmp ( day_of_week , \"Sunday\" ) == 0 ) weekday02 = 0 ; int i = 0 ; if ( rev == 0 ) { for ( i = date ; dayOfWeek ( year - 1900 , month - 1 , i ) != weekday02 ; i ++ ) { } } else { for ( i = date ; dayOfWeek ( year - 1900 , month - 1 , i ) != weekday02 ; i -- ) { } } return i ; } meetup.h 1 2 3 4 5 6 7 #ifndef MEETUP_H #define MEETUP_H int meetup_day_of_month ( unsigned int year , unsigned int month , const char * week , const char * day_of_week ); #endif","title":"Meetup"},{"location":"lang/clang/contoh/meetup/#meetup","text":"","title":"Meetup"},{"location":"lang/clang/contoh/meetup/#intro","text":"Calculate the date of meetups. Typically meetups happen on the same day of the week. In this exercise, you will take a description of a meetup date, and return the actual meetup date. Examples of general descriptions are: The first Monday of January 2017 The third Tuesday of January 2017 The wednesteenth of January 2017 The last Thursday of January 2017 The descriptors you are expected to parse are: first, second, third, fourth, fifth, last, monteenth, tuesteenth, wednesteenth, thursteenth, friteenth, saturteenth, sunteenth Note that \"monteenth\", \"tuesteenth\", etc are all made up words. There was a meetup whose members realized that there are exactly 7 numbered days in a month that end in '-teenth'. Therefore, one is guaranteed that each day of the week (Monday, Tuesday, ...) will have exactly one date that is named with '-teenth' in every month.","title":"Intro"},{"location":"lang/clang/contoh/meetup/#task","text":"Given examples of a meetup dates, each containing a month, day, year, and descriptor calculate the date of the actual meetup. For example, if given \"The first Monday of January 2017\", the correct meetup date is 2017/1/2.","title":"Task"},{"location":"lang/clang/contoh/meetup/#the-code","text":"meetup.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 #include \"meetup.h\" #include \"string.h\" #include \"time.h\" #include <stdio.h> #include <time.h> int dayOfWeek ( int y , int m , int d ); int dayOfWeek ( int y , int m , int d ) { struct tm tm = {. tm_year = y , . tm_mon = m , . tm_mday = d }; time_t t = mktime ( & tm ); int eval = localtime ( & t ) -> tm_wday ; return eval ; } int meetup_day_of_month ( unsigned int year , unsigned int month , const char * week , const char * day_of_week ) { int rev = 0 ; int date = -1 ; if ( strcmp ( week , \"teenth\" ) == 0 ) date = 13 ; else if ( strcmp ( week , \"first\" ) == 0 ) date = 1 ; else if ( strcmp ( week , \"second\" ) == 0 ) date = 8 ; else if ( strcmp ( week , \"third\" ) == 0 ) date = 15 ; else if ( strcmp ( week , \"fourth\" ) == 0 ) date = 22 ; else if ( strcmp ( week , \"last\" ) == 0 ) { switch ( month ) { case 4 : case 6 : case 9 : case 11 : date = 30 ; rev = 1 ; break ; case 1 : case 3 : case 5 : case 7 : case 8 : case 10 : case 12 : date = 31 ; rev = 1 ; break ; case 2 : if ( year % 4 == 0 ) date = 29 ; else date = 28 ; rev = 1 ; break ; } } int weekday02 = -1 ; if ( strcmp ( day_of_week , \"Monday\" ) == 0 ) weekday02 = 1 ; else if ( strcmp ( day_of_week , \"Tuesday\" ) == 0 ) weekday02 = 2 ; else if ( strcmp ( day_of_week , \"Wednesday\" ) == 0 ) weekday02 = 3 ; else if ( strcmp ( day_of_week , \"Thursday\" ) == 0 ) weekday02 = 4 ; else if ( strcmp ( day_of_week , \"Friday\" ) == 0 ) weekday02 = 5 ; else if ( strcmp ( day_of_week , \"Saturday\" ) == 0 ) weekday02 = 6 ; else if ( strcmp ( day_of_week , \"Sunday\" ) == 0 ) weekday02 = 0 ; int i = 0 ; if ( rev == 0 ) { for ( i = date ; dayOfWeek ( year - 1900 , month - 1 , i ) != weekday02 ; i ++ ) { } } else { for ( i = date ; dayOfWeek ( year - 1900 , month - 1 , i ) != weekday02 ; i -- ) { } } return i ; } meetup.h 1 2 3 4 5 6 7 #ifndef MEETUP_H #define MEETUP_H int meetup_day_of_month ( unsigned int year , unsigned int month , const char * week , const char * day_of_week ); #endif","title":"The Code"},{"location":"lang/clang/contoh/nucleotideCount/","text":"Nucleotide Count Intro Each of us inherits from our biological parents a set of chemical instructions known as DNA that influence how our bodies are constructed. All known life depends on DNA! Note: You do not need to understand anything about nucleotides or DNA to complete this exercise. DNA is a long chain of other chemicals and the most important are the four nucleotides, adenine, cytosine, guanine and thymine. A single DNA chain can contain billions of these four nucleotides and the order in which they occur is important! We call the order of these nucleotides in a bit of DNA a \"DNA sequence\". We represent a DNA sequence as an ordered collection of these four nucleotides and a common way to do that is with a string of characters such as \"ATTACG\" for a DNA sequence of 6 nucleotides. 'A' for adenine, 'C' for cytosine, 'G' for guanine, and 'T' for thymine. Task Given a string representing a DNA sequence, count how many of each nucleotide is present. If the string contains characters that aren't A, C, G, or T then it is invalid and you should signal an error. For example: 1 2 \"GATTACA\" -> 'A': 3, 'C': 1, 'G': 1, 'T': 2 \"INVALID\" -> error The Code nucleotide_count.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include \"nucleotide_count.h\" #include <stdio.h> #include <stdlib.h> #include <string.h> // A C G T char * count ( const char * dna_strand ) { char * var = malloc ( 50 ); memset ( var , 0 , 50 ); int a = 0 ; int c = 0 ; int g = 0 ; int t = 0 ; int i ; for ( i = 0 ; i < ( int ) strlen ( dna_strand ); i ++ ) { switch ( dna_strand [ i ]) { case 'A' : a ++ ; break ; case 'C' : c ++ ; break ; case 'G' : g ++ ; break ; case 'T' : t ++ ; break ; default : strcpy ( var , \"\" ); return var ; } } sprintf ( var , \"A:%d C:%d G:%d T:%d\" , a , c , g , t ); return var ; } nucleotide_count.h 1 2 3 4 5 6 #ifndef _NUCLEOTIDE_COUNT_H #define _NUCLEOTIDE_COUNT_H char * count ( const char * dna_strand ); #endif","title":"Nucleotide Count"},{"location":"lang/clang/contoh/nucleotideCount/#nucleotide-count","text":"","title":"Nucleotide Count"},{"location":"lang/clang/contoh/nucleotideCount/#intro","text":"Each of us inherits from our biological parents a set of chemical instructions known as DNA that influence how our bodies are constructed. All known life depends on DNA! Note: You do not need to understand anything about nucleotides or DNA to complete this exercise. DNA is a long chain of other chemicals and the most important are the four nucleotides, adenine, cytosine, guanine and thymine. A single DNA chain can contain billions of these four nucleotides and the order in which they occur is important! We call the order of these nucleotides in a bit of DNA a \"DNA sequence\". We represent a DNA sequence as an ordered collection of these four nucleotides and a common way to do that is with a string of characters such as \"ATTACG\" for a DNA sequence of 6 nucleotides. 'A' for adenine, 'C' for cytosine, 'G' for guanine, and 'T' for thymine.","title":"Intro"},{"location":"lang/clang/contoh/nucleotideCount/#task","text":"Given a string representing a DNA sequence, count how many of each nucleotide is present. If the string contains characters that aren't A, C, G, or T then it is invalid and you should signal an error. For example: 1 2 \"GATTACA\" -> 'A': 3, 'C': 1, 'G': 1, 'T': 2 \"INVALID\" -> error","title":"Task"},{"location":"lang/clang/contoh/nucleotideCount/#the-code","text":"nucleotide_count.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include \"nucleotide_count.h\" #include <stdio.h> #include <stdlib.h> #include <string.h> // A C G T char * count ( const char * dna_strand ) { char * var = malloc ( 50 ); memset ( var , 0 , 50 ); int a = 0 ; int c = 0 ; int g = 0 ; int t = 0 ; int i ; for ( i = 0 ; i < ( int ) strlen ( dna_strand ); i ++ ) { switch ( dna_strand [ i ]) { case 'A' : a ++ ; break ; case 'C' : c ++ ; break ; case 'G' : g ++ ; break ; case 'T' : t ++ ; break ; default : strcpy ( var , \"\" ); return var ; } } sprintf ( var , \"A:%d C:%d G:%d T:%d\" , a , c , g , t ); return var ; } nucleotide_count.h 1 2 3 4 5 6 #ifndef _NUCLEOTIDE_COUNT_H #define _NUCLEOTIDE_COUNT_H char * count ( const char * dna_strand ); #endif","title":"The Code"},{"location":"lang/clang/contoh/pangram/","text":"Pangram Intro A pangram (Greek: \u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, pan gramma, \"every letter\") is a sentence using every letter of the alphabet at least once. The best known English pangram is: The quick brown fox jumps over the lazy dog. The alphabet used consists of ASCII letters a to z , inclusive, and is case insensitive. Input will not contain non-ASCII symbols. Task Determine if a sentence is a pangram. The Code pangram.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include \"pangram.h\" #include \"string.h\" #include \"stdlib.h\" #include \"stdio.h\" #include \"ctype.h\" bool is_pangram ( const char * sentence ) { if ( sentence == NULL ) return false ; if ( * sentence == '\\0' ) return false ; int lenght = strlen ( sentence ); char * var = malloc ( lenght ); if ( var == NULL ) return false ; int i = 0 ; for ( i = 0 ; i < lenght ; i ++ ) { var [ i ] = tolower ( sentence [ i ]); if ( isalpha ( var [ i ]) == 0 ) var [ i ] = ' ' ; } for ( i = 'a' ; i < 'z' ; i ++ ) { if ( strchr ( var , i ) == NULL ) { free ( var ); return false ; } } free ( var ); return true ; } pangram.h 1 2 3 4 5 6 7 8 #ifndef PANGRAM_H #define PANGRAM_H #include <stdbool.h> bool is_pangram ( const char * sentence ); #endif","title":"Pangram"},{"location":"lang/clang/contoh/pangram/#pangram","text":"","title":"Pangram"},{"location":"lang/clang/contoh/pangram/#intro","text":"A pangram (Greek: \u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, pan gramma, \"every letter\") is a sentence using every letter of the alphabet at least once. The best known English pangram is: The quick brown fox jumps over the lazy dog. The alphabet used consists of ASCII letters a to z , inclusive, and is case insensitive. Input will not contain non-ASCII symbols.","title":"Intro"},{"location":"lang/clang/contoh/pangram/#task","text":"Determine if a sentence is a pangram.","title":"Task"},{"location":"lang/clang/contoh/pangram/#the-code","text":"pangram.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include \"pangram.h\" #include \"string.h\" #include \"stdlib.h\" #include \"stdio.h\" #include \"ctype.h\" bool is_pangram ( const char * sentence ) { if ( sentence == NULL ) return false ; if ( * sentence == '\\0' ) return false ; int lenght = strlen ( sentence ); char * var = malloc ( lenght ); if ( var == NULL ) return false ; int i = 0 ; for ( i = 0 ; i < lenght ; i ++ ) { var [ i ] = tolower ( sentence [ i ]); if ( isalpha ( var [ i ]) == 0 ) var [ i ] = ' ' ; } for ( i = 'a' ; i < 'z' ; i ++ ) { if ( strchr ( var , i ) == NULL ) { free ( var ); return false ; } } free ( var ); return true ; } pangram.h 1 2 3 4 5 6 7 8 #ifndef PANGRAM_H #define PANGRAM_H #include <stdbool.h> bool is_pangram ( const char * sentence ); #endif","title":"The Code"},{"location":"lang/clang/contoh/raindrops/","text":"Raindrops Intro Your task is to convert a number into a string that contains raindrop sounds corresponding to certain potential factors. A factor is a number that evenly divides into another number, leaving no remainder. The simplest way to test if a one number is a factor of another is to use the modulo operation . The rules of raindrops are that if a given number: has 3 as a factor, add 'Pling' to the result. has 5 as a factor, add 'Plang' to the result. has 7 as a factor, add 'Plong' to the result. does not have any of 3, 5, or 7 as a factor, the result should be the digits of the number. Examples 28 has 7 as a factor, but not 3 or 5, so the result would be \"Plong\". 30 has both 3 and 5 as factors, but not 7, so the result would be \"PlingPlang\". 34 is not factored by 3, 5, or 7, so the result would be \"34\". Task Read Above The Code raindrops.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include \"raindrops.h\" #include \"stdio.h\" #include \"stdlib.h\" #include \"string.h\" char * convert ( char result [], int drops ) { if (( drops % 5 == 0 ) && ( drops % 7 == 0 ) && ( drops % 3 == 0 )) strcpy ( result , \"PlingPlangPlong\" ); else if (( drops % 3 == 0 ) && ( drops % 5 == 0 )) strcpy ( result , \"PlingPlang\" ); else if (( drops % 3 == 0 ) && ( drops % 7 == 0 )) strcpy ( result , \"PlingPlong\" ); else if (( drops % 5 == 0 ) && ( drops % 7 == 0 )) strcpy ( result , \"PlangPlong\" ); else if ( drops % 3 == 0 ) strcpy ( result , \"Pling\" ); else if ( drops % 5 == 0 ) strcpy ( result , \"Plang\" ); else if ( drops % 7 == 0 ) strcpy ( result , \"Plong\" ); else sprintf ( result , \"%d\" , drops ); return 0 ; } raindrops.h 1 2 3 4 5 6 #ifndef RAINDROPS_H #define RAINDROPS_H char * convert ( char result [], int drops ); #endif","title":"Raindrops"},{"location":"lang/clang/contoh/raindrops/#raindrops","text":"","title":"Raindrops"},{"location":"lang/clang/contoh/raindrops/#intro","text":"Your task is to convert a number into a string that contains raindrop sounds corresponding to certain potential factors. A factor is a number that evenly divides into another number, leaving no remainder. The simplest way to test if a one number is a factor of another is to use the modulo operation . The rules of raindrops are that if a given number: has 3 as a factor, add 'Pling' to the result. has 5 as a factor, add 'Plang' to the result. has 7 as a factor, add 'Plong' to the result. does not have any of 3, 5, or 7 as a factor, the result should be the digits of the number.","title":"Intro"},{"location":"lang/clang/contoh/raindrops/#examples","text":"28 has 7 as a factor, but not 3 or 5, so the result would be \"Plong\". 30 has both 3 and 5 as factors, but not 7, so the result would be \"PlingPlang\". 34 is not factored by 3, 5, or 7, so the result would be \"34\".","title":"Examples"},{"location":"lang/clang/contoh/raindrops/#task","text":"Read Above","title":"Task"},{"location":"lang/clang/contoh/raindrops/#the-code","text":"raindrops.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include \"raindrops.h\" #include \"stdio.h\" #include \"stdlib.h\" #include \"string.h\" char * convert ( char result [], int drops ) { if (( drops % 5 == 0 ) && ( drops % 7 == 0 ) && ( drops % 3 == 0 )) strcpy ( result , \"PlingPlangPlong\" ); else if (( drops % 3 == 0 ) && ( drops % 5 == 0 )) strcpy ( result , \"PlingPlang\" ); else if (( drops % 3 == 0 ) && ( drops % 7 == 0 )) strcpy ( result , \"PlingPlong\" ); else if (( drops % 5 == 0 ) && ( drops % 7 == 0 )) strcpy ( result , \"PlangPlong\" ); else if ( drops % 3 == 0 ) strcpy ( result , \"Pling\" ); else if ( drops % 5 == 0 ) strcpy ( result , \"Plang\" ); else if ( drops % 7 == 0 ) strcpy ( result , \"Plong\" ); else sprintf ( result , \"%d\" , drops ); return 0 ; } raindrops.h 1 2 3 4 5 6 #ifndef RAINDROPS_H #define RAINDROPS_H char * convert ( char result [], int drops ); #endif","title":"The Code"},{"location":"lang/clang/contoh/resistorColor/","text":"Resistor Color Intro If you want to build something using a Raspberry Pi, you'll probably use resistors. For this exercise, you need to know two things about them: Each resistor has a resistance value. Resistors are small - so small in fact that if you printed the resistance value on them, it would be hard to read. To get around this problem, manufacturers print color-coded bands onto the resistors to denote their resistance values. Each band has a position and a numeric value. The first 2 bands of a resistor have a simple encoding scheme: each color maps to a single number. In this exercise you are going to create a helpful program so that you don't have to remember the values of the bands. These colors are encoded as follows: Black: 0 Brown: 1 Red: 2 Orange: 3 Yellow: 4 Green: 5 Blue: 6 Violet: 7 Grey: 8 White: 9 Task The goal of this exercise is to create a way: to look up the numerical value associated with a particular color band to list the different band colors The Code resistor_color.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #ifndef RESISTOR_COLOR_H #define RESISTOR_COLOR_H /* - Black: 0 - Brown: 1 - Red: 2 - Orange: 3 - Yellow: 4 - Green: 5 - Blue: 6 - Violet: 7 - Grey: 8 - White: 9 */ typedef enum { BLACK = 0 , BROWN , RED , ORANGE , YELLOW , GREEN , BLUE , VIOLET , GREY , WHITE } resistor_band_t ; int color_code ( resistor_band_t test ); resistor_band_t * colors ( void ); #endif resistor_color.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include \"resistor_color.h\" resistor_band_t * colors ( void ) { static resistor_band_t var01 [] = { BLACK , BROWN , RED , ORANGE , YELLOW , GREEN , BLUE , VIOLET , GREY , WHITE }; return var01 ; } int color_code ( resistor_band_t test ) { return test ; }","title":"Resistor Color"},{"location":"lang/clang/contoh/resistorColor/#resistor-color","text":"","title":"Resistor Color"},{"location":"lang/clang/contoh/resistorColor/#intro","text":"If you want to build something using a Raspberry Pi, you'll probably use resistors. For this exercise, you need to know two things about them: Each resistor has a resistance value. Resistors are small - so small in fact that if you printed the resistance value on them, it would be hard to read. To get around this problem, manufacturers print color-coded bands onto the resistors to denote their resistance values. Each band has a position and a numeric value. The first 2 bands of a resistor have a simple encoding scheme: each color maps to a single number. In this exercise you are going to create a helpful program so that you don't have to remember the values of the bands. These colors are encoded as follows: Black: 0 Brown: 1 Red: 2 Orange: 3 Yellow: 4 Green: 5 Blue: 6 Violet: 7 Grey: 8 White: 9","title":"Intro"},{"location":"lang/clang/contoh/resistorColor/#task","text":"The goal of this exercise is to create a way: to look up the numerical value associated with a particular color band to list the different band colors","title":"Task"},{"location":"lang/clang/contoh/resistorColor/#the-code","text":"resistor_color.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #ifndef RESISTOR_COLOR_H #define RESISTOR_COLOR_H /* - Black: 0 - Brown: 1 - Red: 2 - Orange: 3 - Yellow: 4 - Green: 5 - Blue: 6 - Violet: 7 - Grey: 8 - White: 9 */ typedef enum { BLACK = 0 , BROWN , RED , ORANGE , YELLOW , GREEN , BLUE , VIOLET , GREY , WHITE } resistor_band_t ; int color_code ( resistor_band_t test ); resistor_band_t * colors ( void ); #endif resistor_color.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include \"resistor_color.h\" resistor_band_t * colors ( void ) { static resistor_band_t var01 [] = { BLACK , BROWN , RED , ORANGE , YELLOW , GREEN , BLUE , VIOLET , GREY , WHITE }; return var01 ; } int color_code ( resistor_band_t test ) { return test ; }","title":"The Code"},{"location":"lang/clang/contoh/resistorColorDuo/","text":"Resistor Color Duo Intro If you want to build something using a Raspberry Pi, you'll probably use resistors . For this exercise, you need to know two things about them: Each resistor has a resistance value. Resistors are small - so small in fact that if you printed the resistance value on them, it would be hard to read. To get around this problem, manufacturers print color-coded bands onto the resistors to denote their resistance values. Each band has a position and a numeric value. The first 2 bands of a resistor have a simple encoding scheme: each color maps to a single number. For example, if they printed a brown band (value 1) followed by a green band (value 5), it would translate to the number 15. In this exercise you are going to create a helpful program so that you don't have to remember the values of the bands. The program will take color names as input and output a two digit number, even if the input is more than two colors! The band colors are encoded as follows: Black: 0 Brown: 1 Red: 2 Orange: 3 Yellow: 4 Green: 5 Blue: 6 Violet: 7 Grey: 8 White: 9 Task From the example above: brown-green should return 15 brown-green-violet should return 15 too, ignoring the third color. The Code resistor_color_duo.c 1 2 3 4 5 #include \"resistor_color_duo.h\" int color_code ( resistor_band_t * test ){ return ( test [ 0 ] * 10 + test [ 1 ]); } resistor_color_duo.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #ifndef RESISTOR_COLOR_DUO_H #define RESISTOR_COLOR_DUO_H typedef enum { BLACK = 0 , BROWN , RED , ORANGE , YELLOW , GREEN , BLUE , VIOLET , GREY , WHITE } resistor_band_t ; int color_code ( resistor_band_t * test ); #endif","title":"Resistor Color Duo"},{"location":"lang/clang/contoh/resistorColorDuo/#resistor-color-duo","text":"","title":"Resistor Color Duo"},{"location":"lang/clang/contoh/resistorColorDuo/#intro","text":"If you want to build something using a Raspberry Pi, you'll probably use resistors . For this exercise, you need to know two things about them: Each resistor has a resistance value. Resistors are small - so small in fact that if you printed the resistance value on them, it would be hard to read. To get around this problem, manufacturers print color-coded bands onto the resistors to denote their resistance values. Each band has a position and a numeric value. The first 2 bands of a resistor have a simple encoding scheme: each color maps to a single number. For example, if they printed a brown band (value 1) followed by a green band (value 5), it would translate to the number 15. In this exercise you are going to create a helpful program so that you don't have to remember the values of the bands. The program will take color names as input and output a two digit number, even if the input is more than two colors! The band colors are encoded as follows: Black: 0 Brown: 1 Red: 2 Orange: 3 Yellow: 4 Green: 5 Blue: 6 Violet: 7 Grey: 8 White: 9","title":"Intro"},{"location":"lang/clang/contoh/resistorColorDuo/#task","text":"From the example above: brown-green should return 15 brown-green-violet should return 15 too, ignoring the third color.","title":"Task"},{"location":"lang/clang/contoh/resistorColorDuo/#the-code","text":"resistor_color_duo.c 1 2 3 4 5 #include \"resistor_color_duo.h\" int color_code ( resistor_band_t * test ){ return ( test [ 0 ] * 10 + test [ 1 ]); } resistor_color_duo.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #ifndef RESISTOR_COLOR_DUO_H #define RESISTOR_COLOR_DUO_H typedef enum { BLACK = 0 , BROWN , RED , ORANGE , YELLOW , GREEN , BLUE , VIOLET , GREY , WHITE } resistor_band_t ; int color_code ( resistor_band_t * test ); #endif","title":"The Code"},{"location":"lang/clang/contoh/resistorColorTrio/","text":"Resistor Color Trio Intro If you want to build something using a Raspberry Pi, you'll probably use resistors . For this exercise, you need to know only three things about them: Each resistor has a resistance value. Resistors are small - so small in fact that if you printed the resistance value on them, it would be hard to read. To get around this problem, manufacturers print color-coded bands onto the resistors to denote their resistance values. Each band acts as a digit of a number. For example, if they printed a brown band (value 1) followed by a green band (value 5), it would translate to the number 15. In this exercise, you are going to create a helpful program so that you don't have to remember the values of the bands.The program will take 3 colors as input, and outputs the correct value, in ohms. The color bands are encoded as follows: Black: 0 Brown: 1 Red: 2 Orange: 3 Yellow: 4 Green: 5 Blue: 6 Violet: 7 Grey: 8 White: 9 In resistor-color duo you decoded the first two colors. For instance: orange-orange got the main value 33 . The third color stands for how many zeros need to be added to the main value. The main value plus the zeros gives us a value in ohms. For the exercise it doesn't matter what ohms really are. For example: orange-orange-black would be 33 and no zeros, which becomes 33 ohms. orange-orange-red would be 33 and 2 zeros, which becomes 3300 ohms. orange-orange-orange would be 33 and 3 zeros, which becomes 33000 ohms. (If Math is your thing, you may want to think of the zeros as exponents of 10. If Math is not your thing, go with the zeros. It really is the same thing, just in plain English instead of Math lingo.) Task This exercise is about translating the colors into a label: \"... ohms\" So an input of \"orange\", \"orange\", \"black\" should return: \"33 ohms\" When we get more than a thousand ohms, we say \"kiloohms\". That's similar to saying \"kilometer\" for 1000 meters, and \"kilograms\" for 1000 grams. So an input of \"orange\", \"orange\", \"orange\" should return: \"33 kiloohms\" The Code resistor_color_trio.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include \"resistor_color_trio.h\" resistor_value_t color_code ( resistor_band_t * test ) { resistor_value_t var01 ; // if(test[1]!=BLACK) var01 . value = ( test [ 0 ] * 10 ) + test [ 1 ]; // else // var01.value=test[0]; switch ( test [ 2 ]) { case BLACK : var01 . unit = OHMS ; break ; case BROWN : var01 . value *= 10 ; var01 . unit = OHMS ; break ; case RED : var01 . unit = KILOOHMS ; var01 . value /= 10 ; break ; case ORANGE : var01 . unit = KILOOHMS ; break ; case YELLOW : var01 . value *= 10 ; var01 . unit = KILOOHMS ; break ; default : break ; } return var01 ; } resistor_color_trio.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #ifndef RESISTOR_COLOR_TRIO_H #define RESISTOR_COLOR_TRIO_H typedef enum { BLACK = 0 , BROWN , RED , ORANGE , YELLOW , GREEN , BLUE , VIOLET , GREY , WHITE } resistor_band_t ; typedef struct { unsigned int value ; enum { OHMS , KILOOHMS } unit ; } resistor_value_t ; resistor_value_t color_code ( resistor_band_t * test ); #endif","title":"Resistor Color Trio"},{"location":"lang/clang/contoh/resistorColorTrio/#resistor-color-trio","text":"","title":"Resistor Color Trio"},{"location":"lang/clang/contoh/resistorColorTrio/#intro","text":"If you want to build something using a Raspberry Pi, you'll probably use resistors . For this exercise, you need to know only three things about them: Each resistor has a resistance value. Resistors are small - so small in fact that if you printed the resistance value on them, it would be hard to read. To get around this problem, manufacturers print color-coded bands onto the resistors to denote their resistance values. Each band acts as a digit of a number. For example, if they printed a brown band (value 1) followed by a green band (value 5), it would translate to the number 15. In this exercise, you are going to create a helpful program so that you don't have to remember the values of the bands.The program will take 3 colors as input, and outputs the correct value, in ohms. The color bands are encoded as follows: Black: 0 Brown: 1 Red: 2 Orange: 3 Yellow: 4 Green: 5 Blue: 6 Violet: 7 Grey: 8 White: 9 In resistor-color duo you decoded the first two colors. For instance: orange-orange got the main value 33 . The third color stands for how many zeros need to be added to the main value. The main value plus the zeros gives us a value in ohms. For the exercise it doesn't matter what ohms really are. For example: orange-orange-black would be 33 and no zeros, which becomes 33 ohms. orange-orange-red would be 33 and 2 zeros, which becomes 3300 ohms. orange-orange-orange would be 33 and 3 zeros, which becomes 33000 ohms. (If Math is your thing, you may want to think of the zeros as exponents of 10. If Math is not your thing, go with the zeros. It really is the same thing, just in plain English instead of Math lingo.)","title":"Intro"},{"location":"lang/clang/contoh/resistorColorTrio/#task","text":"This exercise is about translating the colors into a label: \"... ohms\" So an input of \"orange\", \"orange\", \"black\" should return: \"33 ohms\" When we get more than a thousand ohms, we say \"kiloohms\". That's similar to saying \"kilometer\" for 1000 meters, and \"kilograms\" for 1000 grams. So an input of \"orange\", \"orange\", \"orange\" should return: \"33 kiloohms\"","title":"Task"},{"location":"lang/clang/contoh/resistorColorTrio/#the-code","text":"resistor_color_trio.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include \"resistor_color_trio.h\" resistor_value_t color_code ( resistor_band_t * test ) { resistor_value_t var01 ; // if(test[1]!=BLACK) var01 . value = ( test [ 0 ] * 10 ) + test [ 1 ]; // else // var01.value=test[0]; switch ( test [ 2 ]) { case BLACK : var01 . unit = OHMS ; break ; case BROWN : var01 . value *= 10 ; var01 . unit = OHMS ; break ; case RED : var01 . unit = KILOOHMS ; var01 . value /= 10 ; break ; case ORANGE : var01 . unit = KILOOHMS ; break ; case YELLOW : var01 . value *= 10 ; var01 . unit = KILOOHMS ; break ; default : break ; } return var01 ; } resistor_color_trio.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #ifndef RESISTOR_COLOR_TRIO_H #define RESISTOR_COLOR_TRIO_H typedef enum { BLACK = 0 , BROWN , RED , ORANGE , YELLOW , GREEN , BLUE , VIOLET , GREY , WHITE } resistor_band_t ; typedef struct { unsigned int value ; enum { OHMS , KILOOHMS } unit ; } resistor_value_t ; resistor_value_t color_code ( resistor_band_t * test ); #endif","title":"The Code"},{"location":"lang/clang/contoh/rnaTranscription/","text":"RNA Transcription Intro Both DNA and RNA strands are a sequence of nucleotides. The four nucleotides found in DNA are adenine ( A ), cytosine ( C ), guanine ( G ) and thymine ( T ). The four nucleotides found in RNA are adenine ( A ), cytosine ( C ), guanine ( G ) and uracil ( U ). Task Given a DNA strand, return its RNA complement (per RNA transcription). Given a DNA strand, its transcribed RNA strand is formed by replacing each nucleotide with its complement: G -> C C -> G T -> A A -> U The Code rna_transcription.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include \"rna_transcription.h\" #include \"stdlib.h\" #include \"string.h\" char * to_rna ( const char * dna ) { static char * var ; var = malloc ( strlen ( dna )); memset ( var , 0 , strlen ( dna )); int i = 0 ; for ( i = 0 ; i < ( int ) strlen ( dna ); i ++ ) { char * var01 = 0 ; switch ( dna [ i ]) { case 'C' : var01 = \"G\" ; break ; case 'G' : var01 = \"C\" ; break ; case 'T' : var01 = \"A\" ; break ; case 'A' : var01 = \"U\" ; break ; } strcat ( var , var01 ); } return var ; } rna_transcription.h 1 2 3 4 5 6 #ifndef RNA_TRANSCRIPTION_H #define RNA_TRANSCRIPTION_H char * to_rna ( const char * dna ); #endif","title":"RNA Transcription"},{"location":"lang/clang/contoh/rnaTranscription/#rna-transcription","text":"","title":"RNA Transcription"},{"location":"lang/clang/contoh/rnaTranscription/#intro","text":"Both DNA and RNA strands are a sequence of nucleotides. The four nucleotides found in DNA are adenine ( A ), cytosine ( C ), guanine ( G ) and thymine ( T ). The four nucleotides found in RNA are adenine ( A ), cytosine ( C ), guanine ( G ) and uracil ( U ).","title":"Intro"},{"location":"lang/clang/contoh/rnaTranscription/#task","text":"Given a DNA strand, return its RNA complement (per RNA transcription). Given a DNA strand, its transcribed RNA strand is formed by replacing each nucleotide with its complement: G -> C C -> G T -> A A -> U","title":"Task"},{"location":"lang/clang/contoh/rnaTranscription/#the-code","text":"rna_transcription.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include \"rna_transcription.h\" #include \"stdlib.h\" #include \"string.h\" char * to_rna ( const char * dna ) { static char * var ; var = malloc ( strlen ( dna )); memset ( var , 0 , strlen ( dna )); int i = 0 ; for ( i = 0 ; i < ( int ) strlen ( dna ); i ++ ) { char * var01 = 0 ; switch ( dna [ i ]) { case 'C' : var01 = \"G\" ; break ; case 'G' : var01 = \"C\" ; break ; case 'T' : var01 = \"A\" ; break ; case 'A' : var01 = \"U\" ; break ; } strcat ( var , var01 ); } return var ; } rna_transcription.h 1 2 3 4 5 6 #ifndef RNA_TRANSCRIPTION_H #define RNA_TRANSCRIPTION_H char * to_rna ( const char * dna ); #endif","title":"The Code"},{"location":"lang/clang/contoh/spaceAges/","text":"Intro So if you were told someone were 1,000,000,000 seconds old, you should be able to say that they're 31.69 Earth-years old. If you're wondering why Pluto didn't make the cut, go watch this youtube video . Task Given an age in seconds, calculate how old someone would be on: Mercury: orbital period 0.2408467 Earth years Venus: orbital period 0.61519726 Earth years Earth: orbital period 1.0 Earth years, 365.25 Earth days, or 31557600 seconds Mars: orbital period 1.8808158 Earth years Jupiter: orbital period 11.862615 Earth years Saturn: orbital period 29.447498 Earth years Uranus: orbital period 84.016846 Earth years Neptune: orbital period 164.79132 Earth years space_age.c space_age.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #ifndef SPACE_AGE_H #define SPACE_AGE_H #include <stdint.h> typedef enum planet { MERCURY , VENUS , EARTH , MARS , JUPITER , SATURN , URANUS , NEPTUNE , } planet_t ; float age ( planet_t planet , int64_t seconds ); #endif","title":"Space Age"},{"location":"lang/clang/contoh/spaceAges/#intro","text":"So if you were told someone were 1,000,000,000 seconds old, you should be able to say that they're 31.69 Earth-years old. If you're wondering why Pluto didn't make the cut, go watch this youtube video .","title":"Intro"},{"location":"lang/clang/contoh/spaceAges/#task","text":"Given an age in seconds, calculate how old someone would be on: Mercury: orbital period 0.2408467 Earth years Venus: orbital period 0.61519726 Earth years Earth: orbital period 1.0 Earth years, 365.25 Earth days, or 31557600 seconds Mars: orbital period 1.8808158 Earth years Jupiter: orbital period 11.862615 Earth years Saturn: orbital period 29.447498 Earth years Uranus: orbital period 84.016846 Earth years Neptune: orbital period 164.79132 Earth years space_age.c space_age.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #ifndef SPACE_AGE_H #define SPACE_AGE_H #include <stdint.h> typedef enum planet { MERCURY , VENUS , EARTH , MARS , JUPITER , SATURN , URANUS , NEPTUNE , } planet_t ; float age ( planet_t planet , int64_t seconds ); #endif","title":"Task"},{"location":"lang/clang/contoh/wordCount/","text":"Word Count Intro Given a phrase, count the occurrences of each word in that phrase. For the purposes of this exercise you can expect that a word will always be one of: A number composed of one or more ASCII digits (ie \"0\" or \"1234\") OR A simple word composed of one or more ASCII letters (ie \"a\" or \"they\") OR A contraction of two simple words joined by a single apostrophe (ie \"it's\" or \"they're\") When counting words you can assume the following rules: The count is case insensitive (ie \"You\", \"you\", and \"YOU\" are 3 uses of the same word) The count is unordered ; the tests will ignore how words and counts are ordered Other than the apostrophe in a contraction all forms of punctuation are ignored The words can be separated by any form of whitespace (ie \"\\t\", \"\\n\", \" \") For example, for the phrase \"That's the password: 'PASSWORD 123'!\", cried the Special Agent.\\nSo I fled. the count would be: 1 2 3 4 5 6 7 8 9 10 that's: 1 the: 2 password: 2 123: 1 cried: 1 special: 1 agent: 1 so: 1 i: 1 fled: 1 Task Count the occurrences of each word in that phrase. Note that the tests for this exercise expect the output words to be proper C strings. That is, they should be NUL terminated. See https://en.wikipedia.org/wiki/C_string_handling word_count.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include \"word_count.h\" #include \"string.h\" #include \"stdlib.h\" #include \"ctype.h\" #include \"stdio.h\" int count_words ( const char * sentence , word_count_word_t * words ) { int lenght = strlen ( sentence ); char var [ MAX_WORD_LENGTH ] = { 0 }; //strncpy(var, sentence, lenght); int i = 0 ; for ( i = 0 ; i < lenght ; i ++ ) { var [ i ] = tolower ( sentence [ i ]); } strcat ( var , \" \" ); for ( i = 0 ; i < ( int ) strlen ( var ); i ++ ) { if ( var [ i ] == '\\'' && var [ i - 1 ] == ' ' ) { var [ i ] = ' ' ; continue ; } if ( var [ i ] == ' ' && var [ i - 1 ] == '\\'' ) { var [ i - 1 ] = ' ' ; continue ; } if (( isalnum ( var [ i ]) == 0 && var [ i ] != '\\'' ) && isblank ( var [ i ]) == 0 ) var [ i ] = ' ' ; } // puts(var); char * var01 = strtok ( var , \" \" ); int var02 = 0 ; while ( var01 ) { int ii = 0 ; for ( i = 0 ; i < var02 ; i ++ ) { if ( strcmp ( words [ i ]. text , var01 ) == 0 ) { words [ i ]. count += 1 ; ii = 1 ; break ; } } if ( ii == 1 ) { var01 = strtok ( NULL , \" \" ); continue ; } strcpy ( words [ var02 ]. text , var01 ); words [ var02 ]. count = 1 ; var01 = strtok ( NULL , \" \" ); var02 ++ ; } return var02 ; } word_count.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #ifndef WORD_COUNT_H #define WORD_COUNT_H #define MAX_WORDS 20 // at most MAX_WORDS can be found in the test input string #define MAX_WORD_LENGTH 50 // no individual word can exceed this length // results structure typedef struct word_count_word { char text [ MAX_WORD_LENGTH + 1 ]; // allow for the string to be null-terminated int count ; } word_count_word_t ; #define EXCESSIVE_LENGTH_WORD -1 #define EXCESSIVE_NUMBER_OF_WORDS -2 // count_words - routine to classify the unique words and their frequency in a sentence // inputs: // sentence = a null-terminated string containing that is analyzed // // outputs: // words = allocated structure to record the words found and their frequency // uniqueWords - number of words in the words structure // returns a negative number if an error. // words will contain the results up to that point. int count_words ( const char * sentence , word_count_word_t * words ); #endif","title":"Word Count"},{"location":"lang/clang/contoh/wordCount/#word-count","text":"","title":"Word Count"},{"location":"lang/clang/contoh/wordCount/#intro","text":"Given a phrase, count the occurrences of each word in that phrase. For the purposes of this exercise you can expect that a word will always be one of: A number composed of one or more ASCII digits (ie \"0\" or \"1234\") OR A simple word composed of one or more ASCII letters (ie \"a\" or \"they\") OR A contraction of two simple words joined by a single apostrophe (ie \"it's\" or \"they're\") When counting words you can assume the following rules: The count is case insensitive (ie \"You\", \"you\", and \"YOU\" are 3 uses of the same word) The count is unordered ; the tests will ignore how words and counts are ordered Other than the apostrophe in a contraction all forms of punctuation are ignored The words can be separated by any form of whitespace (ie \"\\t\", \"\\n\", \" \") For example, for the phrase \"That's the password: 'PASSWORD 123'!\", cried the Special Agent.\\nSo I fled. the count would be: 1 2 3 4 5 6 7 8 9 10 that's: 1 the: 2 password: 2 123: 1 cried: 1 special: 1 agent: 1 so: 1 i: 1 fled: 1","title":"Intro"},{"location":"lang/clang/contoh/wordCount/#task","text":"Count the occurrences of each word in that phrase. Note that the tests for this exercise expect the output words to be proper C strings. That is, they should be NUL terminated. See https://en.wikipedia.org/wiki/C_string_handling word_count.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include \"word_count.h\" #include \"string.h\" #include \"stdlib.h\" #include \"ctype.h\" #include \"stdio.h\" int count_words ( const char * sentence , word_count_word_t * words ) { int lenght = strlen ( sentence ); char var [ MAX_WORD_LENGTH ] = { 0 }; //strncpy(var, sentence, lenght); int i = 0 ; for ( i = 0 ; i < lenght ; i ++ ) { var [ i ] = tolower ( sentence [ i ]); } strcat ( var , \" \" ); for ( i = 0 ; i < ( int ) strlen ( var ); i ++ ) { if ( var [ i ] == '\\'' && var [ i - 1 ] == ' ' ) { var [ i ] = ' ' ; continue ; } if ( var [ i ] == ' ' && var [ i - 1 ] == '\\'' ) { var [ i - 1 ] = ' ' ; continue ; } if (( isalnum ( var [ i ]) == 0 && var [ i ] != '\\'' ) && isblank ( var [ i ]) == 0 ) var [ i ] = ' ' ; } // puts(var); char * var01 = strtok ( var , \" \" ); int var02 = 0 ; while ( var01 ) { int ii = 0 ; for ( i = 0 ; i < var02 ; i ++ ) { if ( strcmp ( words [ i ]. text , var01 ) == 0 ) { words [ i ]. count += 1 ; ii = 1 ; break ; } } if ( ii == 1 ) { var01 = strtok ( NULL , \" \" ); continue ; } strcpy ( words [ var02 ]. text , var01 ); words [ var02 ]. count = 1 ; var01 = strtok ( NULL , \" \" ); var02 ++ ; } return var02 ; } word_count.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #ifndef WORD_COUNT_H #define WORD_COUNT_H #define MAX_WORDS 20 // at most MAX_WORDS can be found in the test input string #define MAX_WORD_LENGTH 50 // no individual word can exceed this length // results structure typedef struct word_count_word { char text [ MAX_WORD_LENGTH + 1 ]; // allow for the string to be null-terminated int count ; } word_count_word_t ; #define EXCESSIVE_LENGTH_WORD -1 #define EXCESSIVE_NUMBER_OF_WORDS -2 // count_words - routine to classify the unique words and their frequency in a sentence // inputs: // sentence = a null-terminated string containing that is analyzed // // outputs: // words = allocated structure to record the words found and their frequency // uniqueWords - number of words in the words structure // returns a negative number if an error. // words will contain the results up to that point. int count_words ( const char * sentence , word_count_word_t * words ); #endif","title":"Task"},{"location":"lang/cpp/install/","text":"Install Prosess instalasi CPP sama dengan C, jadi bisa menggunakan dokument C Install .","title":"Install"},{"location":"lang/cpp/install/#install","text":"Prosess instalasi CPP sama dengan C, jadi bisa menggunakan dokument C Install .","title":"Install"},{"location":"lang/cpp/intro/","text":"CPP CPP merupakan bahasa pemograman yang salah satu daya tarik nya adalah Object Oriented. CPP dibangun dari bahasa C sehingga beberapa orang menyebut CPP merupakan extension dari C. Dikarenakan CPP memberikan feature high level macam object dan memiliki akses low level melalui C, membuat CPP banyak dipelajari dan digunakan sampai sekarang.","title":"Cpp Intro"},{"location":"lang/cpp/intro/#cpp","text":"CPP merupakan bahasa pemograman yang salah satu daya tarik nya adalah Object Oriented. CPP dibangun dari bahasa C sehingga beberapa orang menyebut CPP merupakan extension dari C. Dikarenakan CPP memberikan feature high level macam object dan memiliki akses low level melalui C, membuat CPP banyak dipelajari dan digunakan sampai sekarang.","title":"CPP"},{"location":"lang/cpp/variables/","text":"","title":"Variables"},{"location":"lang/cpp/contoh/DifferenceOfSquares/","text":"Difference Of Square Intro The square of the sum of the first ten natural numbers is (1 + 2 + ... + 10)\u00b2 = 55\u00b2 = 3025. The sum of the squares of the first ten natural numbers is 1\u00b2 + 2\u00b2 + ... + 10\u00b2 = 385. Hence the difference between the square of the sum of the first ten natural numbers and the sum of the squares of the irst ten natural numbers is 3025 - 385 = 2640. Task Find the difference between the square of the sum and the sum of the squares of the first N natural numbers. You are not expected to discover an efficient solution to this yourself from first principles; research is allowed, indeed, encouraged. Finding the best algorithm for the problem is a key skill in software engineering. The Code difference_of_square.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include \"difference_of_squares.h\" #include <cmath> namespace difference_of_squares { int sum_of_squares ( int test ) { int var01 {}; for ( int i = 1 ; i <= test ; i ++ ) { var01 += std :: pow ( i , 2 ); } return var01 ; } int square_of_sum ( int test ) { int var02 {}; for ( int i = 1 ; i <= test ; i ++ ) { var02 += i ; } return std :: pow ( var02 , 2 ); } int difference ( int test ) { return square_of_sum ( test ) - sum_of_squares ( test ); } } // namespace difference_of_squares difference_of_square.h 1 2 3 4 5 6 7 8 9 10 #if !defined(DIFFERENCE_OF_SQUARES_H) #define DIFFERENCE_OF_SQUARES_H namespace difference_of_squares { int square_of_sum ( int ); int sum_of_squares ( int ); int difference ( int ); } // namespace difference_of_squares #endif // DIFFERENCE_OF_SQUARES_H","title":"Difference Of Square"},{"location":"lang/cpp/contoh/DifferenceOfSquares/#difference-of-square","text":"","title":"Difference Of Square"},{"location":"lang/cpp/contoh/DifferenceOfSquares/#intro","text":"The square of the sum of the first ten natural numbers is (1 + 2 + ... + 10)\u00b2 = 55\u00b2 = 3025. The sum of the squares of the first ten natural numbers is 1\u00b2 + 2\u00b2 + ... + 10\u00b2 = 385. Hence the difference between the square of the sum of the first ten natural numbers and the sum of the squares of the irst ten natural numbers is 3025 - 385 = 2640.","title":"Intro"},{"location":"lang/cpp/contoh/DifferenceOfSquares/#task","text":"Find the difference between the square of the sum and the sum of the squares of the first N natural numbers. You are not expected to discover an efficient solution to this yourself from first principles; research is allowed, indeed, encouraged. Finding the best algorithm for the problem is a key skill in software engineering.","title":"Task"},{"location":"lang/cpp/contoh/DifferenceOfSquares/#the-code","text":"difference_of_square.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include \"difference_of_squares.h\" #include <cmath> namespace difference_of_squares { int sum_of_squares ( int test ) { int var01 {}; for ( int i = 1 ; i <= test ; i ++ ) { var01 += std :: pow ( i , 2 ); } return var01 ; } int square_of_sum ( int test ) { int var02 {}; for ( int i = 1 ; i <= test ; i ++ ) { var02 += i ; } return std :: pow ( var02 , 2 ); } int difference ( int test ) { return square_of_sum ( test ) - sum_of_squares ( test ); } } // namespace difference_of_squares difference_of_square.h 1 2 3 4 5 6 7 8 9 10 #if !defined(DIFFERENCE_OF_SQUARES_H) #define DIFFERENCE_OF_SQUARES_H namespace difference_of_squares { int square_of_sum ( int ); int sum_of_squares ( int ); int difference ( int ); } // namespace difference_of_squares #endif // DIFFERENCE_OF_SQUARES_H","title":"The Code"},{"location":"lang/cpp/contoh/armstrongNumbers/","text":"Armstrong number An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits. For example: 9 is an Armstrong number, because 9 = 9^1 = 9 10 is not an Armstrong number, because 10 != 1^2 + 0^2 = 1 153 is an Armstrong number, because: 153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 154 is not an Armstrong number, because: 154 != 1^3 + 5^3 + 4^3 = 1 + 125 + 64 = 190 Task Write some code to determine whether a number is an Armstrong number. The Code armstrong_number.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include \"armstrong_numbers.h\" #include <cmath> #include <cstdint> #include <string> namespace armstrong_numbers { bool is_armstrong_number ( std :: uint32_t test ) { if ( test < 10 ) return true ; std :: string tmp = std :: to_string ( test ); std :: uint32_t tmp2 {}; for ( auto & n : tmp ) { int base = n - '0' ; tmp2 += pow ( base , tmp . size ()); } return tmp2 == test ? true : false ; } } // namespace armstrong_numbers armstrong_number.h 1 2 3 4 5 6 7 8 9 #include <cstdint> #if !defined(ARMSTRONG_NUMBERS_H) #define ARMSTRONG_NUMBERS_H namespace armstrong_numbers { bool is_armstrong_number ( std :: uint32_t ); } // namespace armstrong_numbers #endif // ARMSTRONG_NUMBERS_H","title":"Armstrong Numbers"},{"location":"lang/cpp/contoh/armstrongNumbers/#armstrong-number","text":"An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits. For example: 9 is an Armstrong number, because 9 = 9^1 = 9 10 is not an Armstrong number, because 10 != 1^2 + 0^2 = 1 153 is an Armstrong number, because: 153 = 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 154 is not an Armstrong number, because: 154 != 1^3 + 5^3 + 4^3 = 1 + 125 + 64 = 190","title":"Armstrong number"},{"location":"lang/cpp/contoh/armstrongNumbers/#task","text":"Write some code to determine whether a number is an Armstrong number.","title":"Task"},{"location":"lang/cpp/contoh/armstrongNumbers/#the-code","text":"armstrong_number.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include \"armstrong_numbers.h\" #include <cmath> #include <cstdint> #include <string> namespace armstrong_numbers { bool is_armstrong_number ( std :: uint32_t test ) { if ( test < 10 ) return true ; std :: string tmp = std :: to_string ( test ); std :: uint32_t tmp2 {}; for ( auto & n : tmp ) { int base = n - '0' ; tmp2 += pow ( base , tmp . size ()); } return tmp2 == test ? true : false ; } } // namespace armstrong_numbers armstrong_number.h 1 2 3 4 5 6 7 8 9 #include <cstdint> #if !defined(ARMSTRONG_NUMBERS_H) #define ARMSTRONG_NUMBERS_H namespace armstrong_numbers { bool is_armstrong_number ( std :: uint32_t ); } // namespace armstrong_numbers #endif // ARMSTRONG_NUMBERS_H","title":"The Code"},{"location":"lang/cpp/contoh/atbashCipher/","text":"Atbash Cipher Intro The Atbash cipher is a simple substitution cipher that relies on transposing all the letters in the alphabet such that the resulting alphabet is backwards. The first letter is replaced with the last letter, the second with the second-last, and so on. An Atbash cipher for the Latin alphabet would be as follows: 1 2 Plain: abcdefghijklmnopqrstuvwxyz Cipher: zyxwvutsrqponmlkjihgfedcba It is a very weak cipher because it only has one possible key, and it is a simple monoalphabetic substitution cipher. However, this may not have been an issue in the cipher's time. Ciphertext is written out in groups of fixed length, the traditional group size being 5 letters, and punctuation is excluded. This is to make it harder to guess things based on word boundaries. Examples Encoding test gives gvhg Decoding gvhg gives test Decoding gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt gives thequickbrownfoxjumpsoverthelazydog Task Create an implementation of the atbash cipher, an ancient encryption system created in the Middle East. The Code atbash_cipher.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include \"atbash_cipher.h\" #include <cctype> #include <string> /* Plain: abcdefghijklmnopqrstuvwxyz Cipher: zyxwvutsrqponmlkjihgfedcba */ namespace atbash_cipher { std :: string encode ( std :: string test ) { std :: string dict { \"zyxwvutsrqponmlkjihgfedcba\" }; std :: string result {}; int sp {}; for ( auto c : test ) { c = std :: tolower ( c ); if ( ! std :: isalnum ( c )) continue ; if ( sp == 5 ) { sp = 0 ; result . push_back ( ' ' ); } if ( std :: isalpha ( c )) { result . push_back ( 'z' + 'a' - c ); } else if ( std :: isdigit ( c )) { result . push_back ( c ); } sp ++ ; } return result ; } std :: string decode ( std :: string test ) { std :: string result {}; for ( auto c : test ) { if ( ! std :: isalnum ( c )) continue ; if ( std :: isspace ( c )) continue ; if ( std :: isdigit ( c )) { result . push_back ( c ); } else if ( std :: isalpha ( c )) result . push_back (( 'z' - c ) + 'a' ); } return result ; } } // namespace atbash_cipher atbash_cipher.h 1 2 3 4 5 6 7 8 9 10 #if !defined(ATBASH_CIPHER_H) #define ATBASH_CIPHER_H #include \"string\" namespace atbash_cipher { std :: string encode ( std :: string ); std :: string decode ( std :: string ); } // namespace atbash_cipher #endif // ATBASH_CIPHER_H","title":"Atbash Cipher"},{"location":"lang/cpp/contoh/atbashCipher/#atbash-cipher","text":"","title":"Atbash Cipher"},{"location":"lang/cpp/contoh/atbashCipher/#intro","text":"The Atbash cipher is a simple substitution cipher that relies on transposing all the letters in the alphabet such that the resulting alphabet is backwards. The first letter is replaced with the last letter, the second with the second-last, and so on. An Atbash cipher for the Latin alphabet would be as follows: 1 2 Plain: abcdefghijklmnopqrstuvwxyz Cipher: zyxwvutsrqponmlkjihgfedcba It is a very weak cipher because it only has one possible key, and it is a simple monoalphabetic substitution cipher. However, this may not have been an issue in the cipher's time. Ciphertext is written out in groups of fixed length, the traditional group size being 5 letters, and punctuation is excluded. This is to make it harder to guess things based on word boundaries.","title":"Intro"},{"location":"lang/cpp/contoh/atbashCipher/#examples","text":"Encoding test gives gvhg Decoding gvhg gives test Decoding gsvjf rxpyi ldmul cqfnk hlevi gsvoz abwlt gives thequickbrownfoxjumpsoverthelazydog","title":"Examples"},{"location":"lang/cpp/contoh/atbashCipher/#task","text":"Create an implementation of the atbash cipher, an ancient encryption system created in the Middle East.","title":"Task"},{"location":"lang/cpp/contoh/atbashCipher/#the-code","text":"atbash_cipher.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include \"atbash_cipher.h\" #include <cctype> #include <string> /* Plain: abcdefghijklmnopqrstuvwxyz Cipher: zyxwvutsrqponmlkjihgfedcba */ namespace atbash_cipher { std :: string encode ( std :: string test ) { std :: string dict { \"zyxwvutsrqponmlkjihgfedcba\" }; std :: string result {}; int sp {}; for ( auto c : test ) { c = std :: tolower ( c ); if ( ! std :: isalnum ( c )) continue ; if ( sp == 5 ) { sp = 0 ; result . push_back ( ' ' ); } if ( std :: isalpha ( c )) { result . push_back ( 'z' + 'a' - c ); } else if ( std :: isdigit ( c )) { result . push_back ( c ); } sp ++ ; } return result ; } std :: string decode ( std :: string test ) { std :: string result {}; for ( auto c : test ) { if ( ! std :: isalnum ( c )) continue ; if ( std :: isspace ( c )) continue ; if ( std :: isdigit ( c )) { result . push_back ( c ); } else if ( std :: isalpha ( c )) result . push_back (( 'z' - c ) + 'a' ); } return result ; } } // namespace atbash_cipher atbash_cipher.h 1 2 3 4 5 6 7 8 9 10 #if !defined(ATBASH_CIPHER_H) #define ATBASH_CIPHER_H #include \"string\" namespace atbash_cipher { std :: string encode ( std :: string ); std :: string decode ( std :: string ); } // namespace atbash_cipher #endif // ATBASH_CIPHER_H","title":"The Code"},{"location":"lang/cpp/contoh/binary/","text":"Binary Intro Decimal is a base-10 system. A number 23 in base 10 notation can be understood as a linear combination of powers of 10: The rightmost digit gets multiplied by 10^0 = 1 The next number gets multiplied by 10^1 = 10 ... The n*th number gets multiplied by 10^ (n-1)*. All these values are summed. So: 23 => 2*10^1 + 3*10^0 => 2*10 + 3*1 = 23 base 10 Binary is similar, but uses powers of 2 rather than powers of 10. So: 101 => 1*2^2 + 0*2^1 + 1*2^0 => 1*4 + 0*2 + 1*1 => 4 + 1 => 5 base 10 . Task Convert a binary number, represented as a string (e.g. '101010'), to its decimal equivalent using first principles. Implement binary to decimal conversion. Given a binary input string, your program should produce a decimal output. The program should handle invalid inputs. Note Implement the conversion yourself. Do not use something else to perform the conversion for you. The Code binary.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \"binary.h\" #include <cctype> #include <cstdint> namespace binary { std :: uint32_t convert ( std :: string test ) { std :: uint32_t result {}; for ( auto c : test ) { if ( std :: isdigit ( c )) { result <<= 1 ; if ( c == '1' ) { result |= 1 ; } } else return 0 ; } return result ; } } // namespace binary binary.h 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdint-uintn.h> #include <cstdint> #include <string> #if !defined(BINARY_H) #define BINARY_H #include \"string\" namespace binary { std :: uint32_t convert ( std :: string ); } // namespace binary #endif // BINARY_H","title":"Binary"},{"location":"lang/cpp/contoh/binary/#binary","text":"","title":"Binary"},{"location":"lang/cpp/contoh/binary/#intro","text":"Decimal is a base-10 system. A number 23 in base 10 notation can be understood as a linear combination of powers of 10: The rightmost digit gets multiplied by 10^0 = 1 The next number gets multiplied by 10^1 = 10 ... The n*th number gets multiplied by 10^ (n-1)*. All these values are summed. So: 23 => 2*10^1 + 3*10^0 => 2*10 + 3*1 = 23 base 10 Binary is similar, but uses powers of 2 rather than powers of 10. So: 101 => 1*2^2 + 0*2^1 + 1*2^0 => 1*4 + 0*2 + 1*1 => 4 + 1 => 5 base 10 .","title":"Intro"},{"location":"lang/cpp/contoh/binary/#task","text":"Convert a binary number, represented as a string (e.g. '101010'), to its decimal equivalent using first principles. Implement binary to decimal conversion. Given a binary input string, your program should produce a decimal output. The program should handle invalid inputs.","title":"Task"},{"location":"lang/cpp/contoh/binary/#note","text":"Implement the conversion yourself. Do not use something else to perform the conversion for you.","title":"Note"},{"location":"lang/cpp/contoh/binary/#the-code","text":"binary.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \"binary.h\" #include <cctype> #include <cstdint> namespace binary { std :: uint32_t convert ( std :: string test ) { std :: uint32_t result {}; for ( auto c : test ) { if ( std :: isdigit ( c )) { result <<= 1 ; if ( c == '1' ) { result |= 1 ; } } else return 0 ; } return result ; } } // namespace binary binary.h 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdint-uintn.h> #include <cstdint> #include <string> #if !defined(BINARY_H) #define BINARY_H #include \"string\" namespace binary { std :: uint32_t convert ( std :: string ); } // namespace binary #endif // BINARY_H","title":"The Code"},{"location":"lang/cpp/contoh/etl/","text":"ETL Extract-Transform-Load Intro Extract-Transform-Load (ETL) is a fancy way of saying, \"We have some crufty, legacy data over in this system, and now we need it in this shiny new system over here, so we're going to migrate this.\" (Typically, this is followed by, \"We're only going to need to run this once.\" That's then typically followed by much orehead slapping and moaning about how stupid we could possibly be.) Task We are going to do the Transform step of an Extract-Transform-Load. The goal We're going to extract some Scrabble scores from a legacy system. The old system stored a list of letters per score: 1 point: \"A\", \"E\", \"I\", \"O\", \"U\", \"L\", \"N\", \"R\", \"S\", \"T\", 2 points: \"D\", \"G\", 3 points: \"B\", \"C\", \"M\", \"P\", 4 points: \"F\", \"H\", \"V\", \"W\", \"Y\", 5 points: \"K\", 8 points: \"J\", \"X\", 10 points: \"Q\", \"Z\", The shiny new Scrabble system instead stores the score per letter, which makes it much faster and easier to calculate the core for a word. It also stores the letters in lower-case regardless of the case of the input letters: \"a\" is worth 1 point. \"b\" is worth 3 points. \"c\" is worth 3 points. \"d\" is worth 2 points. Etc. Your mission, should you choose to accept it, is to transform the legacy data format to the shiny new format. The Code etl.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \"etl.h\" #include <cctype> namespace etl { std :: map < char , int > transform ( const std :: map < int , std :: vector < char >> ); } // namespace etl std :: map < char , int > etl :: transform ( const std :: map < int , std :: vector < char >> old ) { std :: map < char , int > result {}; for ( std :: pair < int , std :: vector < char >> i : old ) { for ( auto var : i . second ) result . insert ( std :: pair < char , int > ( std :: tolower ( var ), i . first )); } return result ; } etl.h 1 2 3 4 5 6 7 8 9 10 11 #include <vector> #if !defined(ETL_H) #define ETL_H #include \"map\" #include \"vector\" namespace etl { std :: map < char , int > transform ( const std :: map < int , std :: vector < char >> ); } // namespace etl #endif // ETL_H","title":"ETL"},{"location":"lang/cpp/contoh/etl/#etl-extract-transform-load","text":"","title":"ETL Extract-Transform-Load"},{"location":"lang/cpp/contoh/etl/#intro","text":"Extract-Transform-Load (ETL) is a fancy way of saying, \"We have some crufty, legacy data over in this system, and now we need it in this shiny new system over here, so we're going to migrate this.\" (Typically, this is followed by, \"We're only going to need to run this once.\" That's then typically followed by much orehead slapping and moaning about how stupid we could possibly be.)","title":"Intro"},{"location":"lang/cpp/contoh/etl/#task","text":"We are going to do the Transform step of an Extract-Transform-Load.","title":"Task"},{"location":"lang/cpp/contoh/etl/#the-goal","text":"We're going to extract some Scrabble scores from a legacy system. The old system stored a list of letters per score: 1 point: \"A\", \"E\", \"I\", \"O\", \"U\", \"L\", \"N\", \"R\", \"S\", \"T\", 2 points: \"D\", \"G\", 3 points: \"B\", \"C\", \"M\", \"P\", 4 points: \"F\", \"H\", \"V\", \"W\", \"Y\", 5 points: \"K\", 8 points: \"J\", \"X\", 10 points: \"Q\", \"Z\", The shiny new Scrabble system instead stores the score per letter, which makes it much faster and easier to calculate the core for a word. It also stores the letters in lower-case regardless of the case of the input letters: \"a\" is worth 1 point. \"b\" is worth 3 points. \"c\" is worth 3 points. \"d\" is worth 2 points. Etc. Your mission, should you choose to accept it, is to transform the legacy data format to the shiny new format.","title":"The goal"},{"location":"lang/cpp/contoh/etl/#the-code","text":"etl.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \"etl.h\" #include <cctype> namespace etl { std :: map < char , int > transform ( const std :: map < int , std :: vector < char >> ); } // namespace etl std :: map < char , int > etl :: transform ( const std :: map < int , std :: vector < char >> old ) { std :: map < char , int > result {}; for ( std :: pair < int , std :: vector < char >> i : old ) { for ( auto var : i . second ) result . insert ( std :: pair < char , int > ( std :: tolower ( var ), i . first )); } return result ; } etl.h 1 2 3 4 5 6 7 8 9 10 11 #include <vector> #if !defined(ETL_H) #define ETL_H #include \"map\" #include \"vector\" namespace etl { std :: map < char , int > transform ( const std :: map < int , std :: vector < char >> ); } // namespace etl #endif // ETL_H","title":"The Code"},{"location":"lang/cpp/contoh/gigasecond/","text":"Giga Second Intro A gigasecond is 10^9 (1,000,000,000) seconds. Task Given a moment, determine the moment that would be after a gigasecond has passed. The Code gigasecond.h 1 2 3 4 5 6 7 8 9 10 11 #include <boost/date_time/posix_time/ptime.hpp> #include <string> #if !defined(GIGASECOND_H) #define GIGASECOND_H #include <boost/date_time/posix_time/ptime.hpp> namespace gigasecond { boost :: posix_time :: ptime advance ( boost :: posix_time :: ptime test ); } // namespace gigasecond #endif // GIGASECOND_H gigasecond.cpp 1 2 3 4 5 6 7 8 9 10 11 12 #include \"gigasecond.h\" #include <boost/date_time/posix_time/posix_time_duration.hpp> #include <boost/date_time/posix_time/ptime.hpp> #include <boost/date_time/posix_time/time_parsers.hpp> namespace gigasecond { boost :: posix_time :: ptime advance ( boost :: posix_time :: ptime test ); } // namespace gigasecond boost :: posix_time :: ptime gigasecond :: advance ( boost :: posix_time :: ptime test ) { return test += boost :: posix_time :: seconds ( 1000000000 ); }","title":"Gigasecond"},{"location":"lang/cpp/contoh/gigasecond/#giga-second","text":"","title":"Giga Second"},{"location":"lang/cpp/contoh/gigasecond/#intro","text":"A gigasecond is 10^9 (1,000,000,000) seconds.","title":"Intro"},{"location":"lang/cpp/contoh/gigasecond/#task","text":"Given a moment, determine the moment that would be after a gigasecond has passed.","title":"Task"},{"location":"lang/cpp/contoh/gigasecond/#the-code","text":"gigasecond.h 1 2 3 4 5 6 7 8 9 10 11 #include <boost/date_time/posix_time/ptime.hpp> #include <string> #if !defined(GIGASECOND_H) #define GIGASECOND_H #include <boost/date_time/posix_time/ptime.hpp> namespace gigasecond { boost :: posix_time :: ptime advance ( boost :: posix_time :: ptime test ); } // namespace gigasecond #endif // GIGASECOND_H gigasecond.cpp 1 2 3 4 5 6 7 8 9 10 11 12 #include \"gigasecond.h\" #include <boost/date_time/posix_time/posix_time_duration.hpp> #include <boost/date_time/posix_time/ptime.hpp> #include <boost/date_time/posix_time/time_parsers.hpp> namespace gigasecond { boost :: posix_time :: ptime advance ( boost :: posix_time :: ptime test ); } // namespace gigasecond boost :: posix_time :: ptime gigasecond :: advance ( boost :: posix_time :: ptime test ) { return test += boost :: posix_time :: seconds ( 1000000000 ); }","title":"The Code"},{"location":"lang/cpp/contoh/grains/","text":"Grains Intro There once was a wise servant who saved the life of a prince. The king promised to pay whatever the servant could dream up. Knowing that the king loved chess, the servant told the king he would like to have grains of wheat. One grain on the first square of a chess board, with the number of grains doubling on each successive square. There are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on). Task Calculate the number of grains of wheat on a chessboard given that the number on each square doubles. Write code that shows: how many grains were on a given square, and the total number of grains on the chessboard The Code grains.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \"grains.h\" #include <cstdint> #include <math.h> namespace grains { long square ( int test ) { return pow ( 2 , test - 1 ); } unsigned long total () { unsigned long tmp = 0 ; for ( std :: uint8_t i = 1 ; i <= 64 ; i ++ ) { tmp += square ( i ); } return tmp ; } } // namespace grains grains.h 1 2 3 4 5 6 7 8 9 #if !defined(GRAINS_H) #define GRAINS_H namespace grains { long square ( int test ); unsigned long total (); } // namespace grains #endif // GRAINS_H","title":"Grains"},{"location":"lang/cpp/contoh/grains/#grains","text":"","title":"Grains"},{"location":"lang/cpp/contoh/grains/#intro","text":"There once was a wise servant who saved the life of a prince. The king promised to pay whatever the servant could dream up. Knowing that the king loved chess, the servant told the king he would like to have grains of wheat. One grain on the first square of a chess board, with the number of grains doubling on each successive square. There are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).","title":"Intro"},{"location":"lang/cpp/contoh/grains/#task","text":"Calculate the number of grains of wheat on a chessboard given that the number on each square doubles. Write code that shows: how many grains were on a given square, and the total number of grains on the chessboard","title":"Task"},{"location":"lang/cpp/contoh/grains/#the-code","text":"grains.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \"grains.h\" #include <cstdint> #include <math.h> namespace grains { long square ( int test ) { return pow ( 2 , test - 1 ); } unsigned long total () { unsigned long tmp = 0 ; for ( std :: uint8_t i = 1 ; i <= 64 ; i ++ ) { tmp += square ( i ); } return tmp ; } } // namespace grains grains.h 1 2 3 4 5 6 7 8 9 #if !defined(GRAINS_H) #define GRAINS_H namespace grains { long square ( int test ); unsigned long total (); } // namespace grains #endif // GRAINS_H","title":"The Code"},{"location":"lang/cpp/contoh/hamming/","text":"Hamming Intro Your body is made up of cells that contain DNA. Those cells regularly wear out and need replacing, which they achieve by dividing into daughter cells. In fact, the average human body experiences about 10 quadrillion cell divisions in a lifetime! When cells divide, their DNA replicates too. Sometimes during this process mistakes happen and single pieces of DNA get encoded with the incorrect information. If we compare two strands of DNA and count the differences between them we can see how many mistakes occurred. This is known as the \"Hamming Distance\". We read DNA using the letters C,A,G and T. Two strands might look like this: 1 2 3 GAGCCTACTAACGGGAT CATCGTAATGACGGCCT ^ ^ ^ ^ ^ ^^ They have 7 differences, and therefore the Hamming Distance is 7. The Hamming Distance is useful for lots of things in science, not just biology, so it's a nice phrase to be familiar with :) Task Calculate the Hamming Distance between two DNA strands. The Code hamming.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \"hamming.h\" #include \"cstdlib\" #include \"stdlib.h\" #include <cstdlib> #include <stdexcept> #include <string> namespace hamming { int compute ( std :: string , std :: string ); } // namespace hamming int hamming :: compute ( std :: string a , std :: string b ) { int result = 0 ; if ( a . size () != b . size ()) throw std :: domain_error ( \"whatever\" ); for ( int i = 0 ; i < ( int ) a . size (); i ++ ) { if ( a [ i ] != b [ i ]) { result ++ ; } } return result ; } hamming.h 1 2 3 4 5 6 7 8 #if !defined(HAMMING_H) #define HAMMING_H #include \"string\" namespace hamming { int compute ( std :: string , std :: string ); } // namespace hamming #endif // HAMMING_H","title":"Hamming"},{"location":"lang/cpp/contoh/hamming/#hamming","text":"","title":"Hamming"},{"location":"lang/cpp/contoh/hamming/#intro","text":"Your body is made up of cells that contain DNA. Those cells regularly wear out and need replacing, which they achieve by dividing into daughter cells. In fact, the average human body experiences about 10 quadrillion cell divisions in a lifetime! When cells divide, their DNA replicates too. Sometimes during this process mistakes happen and single pieces of DNA get encoded with the incorrect information. If we compare two strands of DNA and count the differences between them we can see how many mistakes occurred. This is known as the \"Hamming Distance\". We read DNA using the letters C,A,G and T. Two strands might look like this: 1 2 3 GAGCCTACTAACGGGAT CATCGTAATGACGGCCT ^ ^ ^ ^ ^ ^^ They have 7 differences, and therefore the Hamming Distance is 7. The Hamming Distance is useful for lots of things in science, not just biology, so it's a nice phrase to be familiar with :)","title":"Intro"},{"location":"lang/cpp/contoh/hamming/#task","text":"Calculate the Hamming Distance between two DNA strands.","title":"Task"},{"location":"lang/cpp/contoh/hamming/#the-code","text":"hamming.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include \"hamming.h\" #include \"cstdlib\" #include \"stdlib.h\" #include <cstdlib> #include <stdexcept> #include <string> namespace hamming { int compute ( std :: string , std :: string ); } // namespace hamming int hamming :: compute ( std :: string a , std :: string b ) { int result = 0 ; if ( a . size () != b . size ()) throw std :: domain_error ( \"whatever\" ); for ( int i = 0 ; i < ( int ) a . size (); i ++ ) { if ( a [ i ] != b [ i ]) { result ++ ; } } return result ; } hamming.h 1 2 3 4 5 6 7 8 #if !defined(HAMMING_H) #define HAMMING_H #include \"string\" namespace hamming { int compute ( std :: string , std :: string ); } // namespace hamming #endif // HAMMING_H","title":"The Code"},{"location":"lang/cpp/contoh/helloWorld/","text":"Hello World Untuk Contoh contoh pemograman CPP saya menggunakan Exercism.io . Hampir sama dengan Hello World di C namun untuk CPP menggunakan CMAKE untuk build system nya bukan menggunakan MAKE lagi. Download soal latihan Untuk mendapatkan soal latihan gunakan perintah ini $ exercism download --exercise = hello-world --track = cpp Generate Makefile kunjungi tempat latihan tersimpan ditempat saya ada di ~/exercism/cpp di situ akan ostosmastis muncul folder hello-world buka folder nya jalankan terminal disitu dan jalankan perintah ini $ cmake -DEXERCISM_RUN_ALL_TESTS = 1 . Perintah di atas digunakan untuk men-generate Makefile untuk memudahkan process compile dan test dari soal latihan. Kerjakan Soal latihan Buka file README.md untuk membaca deskripsi tugas nya, untuk contoh ini tugasnya adalah 1 2 3 4 5 The objectives are simple: - Write a function that returns the string \"Hello, World!\". - Run the test suite and make sure that it succeeds. - Submit your solution and check it at the website. Cukup mudah. hehe. Edit file hello-world.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // This is an include guard. // You could alternatively use '#pragma once' // See https://en.wikipedia.org/wiki/Include_guard #if !defined(HELLO_WORLD_H) #define HELLO_WORLD_H // Include the string header so that we have access to 'std::string' #include <string> // Declare a namespace for the function(s) we are exporting. // https://en.cppreference.com/w/cpp/language/namespace namespace hello_world { // Declare the 'hello()' function, which takes no arguments and returns a // 'std::string'. The function itself is defined in the hello_world.cpp source // file. Because it is inside of the 'hello_world' namespace, it's full name is // 'hello_world::hello()'. std :: string hello (); } // namespace hello_world #endif Hmm semua sudah disiapkan lanjut ke file hello_world.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \"hello_world.h\" // Use everything from the 'std' namespace. // This lets us write 'string' instead of 'std::string'. using namespace std ; namespace hello_world { // Define the function itself. This could have also been written as: // std::string hello_world::hello() string hello () { // Return the string we need. return \"\" ; } } // namespace hello_world Untuk bisa menyelesaikan soal latihan func hello() harus bisa mengembalikan(return) string yang bertuliskan \"Hello, World!\", pada code diatas tinggal ditambahkan Hello, World! ingat c/cpp semua case sensitive jadi besar kecil huruf harus diperhatikan. Setelah di edit file hello_world.c akan menjadi seperti di bawah ini. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \"hello_world.h\" // Use everything from the 'std' namespace. // This lets us write 'string' instead of 'std::string'. using namespace std ; namespace hello_world { // Define the function itself. This could have also been written as: // std::string hello_world::hello() string hello () { // Return the string we need. return \"Hello, World!\" ; } } // namespace hello_world Hanya baris nomer 101 yang berubah. Build dan test Buka terminal pada folder hello-world seperti pada bagian Generate Makefile , dan jalankan perintah $ make secara ostosmastis file source cpp akan di compile dan di test. Berikut hasil output dari perintah make pada folder hello-world 1 2 3 4 5 6 7 8 9 10 11 12 13 kenzanin@artix | ~/exercism/cpp/hello-world ) make Scanning dependencies of target hello-world [ 25 % ] Building CXX object CMakeFiles/hello-world.dir/hello_world_test.cpp.o [ 50 % ] Building CXX object CMakeFiles/hello-world.dir/hello_world.cpp.o [ 75 % ] Building CXX object CMakeFiles/hello-world.dir/test/tests-main.cpp.o [ 100 % ] Linking CXX executable hello-world [ 100 % ] Built target hello-world Scanning dependencies of target test_hello-world =============================================================================== All tests passed ( 1 assertion in 1 test case ) [ 100 % ] Built target test_hello-world Perhatikan tulisan All test passed artinya pogram kita sudah sesuai dengan permintaan dari exercism dan file source siap di upload untuk melanjutkan ke contoh berikutnya. Upload File Masih pada folder hello-world jalankan perintah ini untuk meng-upload file. $ exercism submit hello_world. { cpp,h } Verivikasi pada situs Exercism.io Buka situs Exercism.io lihat bagian track cpp untuk Hello World pencet tombol nya dan pencet Solve","title":"Hello World"},{"location":"lang/cpp/contoh/helloWorld/#hello-world","text":"Untuk Contoh contoh pemograman CPP saya menggunakan Exercism.io . Hampir sama dengan Hello World di C namun untuk CPP menggunakan CMAKE untuk build system nya bukan menggunakan MAKE lagi.","title":"Hello World"},{"location":"lang/cpp/contoh/helloWorld/#download-soal-latihan","text":"Untuk mendapatkan soal latihan gunakan perintah ini $ exercism download --exercise = hello-world --track = cpp","title":"Download soal latihan"},{"location":"lang/cpp/contoh/helloWorld/#generate-makefile","text":"kunjungi tempat latihan tersimpan ditempat saya ada di ~/exercism/cpp di situ akan ostosmastis muncul folder hello-world buka folder nya jalankan terminal disitu dan jalankan perintah ini $ cmake -DEXERCISM_RUN_ALL_TESTS = 1 . Perintah di atas digunakan untuk men-generate Makefile untuk memudahkan process compile dan test dari soal latihan.","title":"Generate Makefile"},{"location":"lang/cpp/contoh/helloWorld/#kerjakan-soal-latihan","text":"Buka file README.md untuk membaca deskripsi tugas nya, untuk contoh ini tugasnya adalah 1 2 3 4 5 The objectives are simple: - Write a function that returns the string \"Hello, World!\". - Run the test suite and make sure that it succeeds. - Submit your solution and check it at the website. Cukup mudah. hehe.","title":"Kerjakan Soal latihan"},{"location":"lang/cpp/contoh/helloWorld/#edit-file-hello-worldh","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // This is an include guard. // You could alternatively use '#pragma once' // See https://en.wikipedia.org/wiki/Include_guard #if !defined(HELLO_WORLD_H) #define HELLO_WORLD_H // Include the string header so that we have access to 'std::string' #include <string> // Declare a namespace for the function(s) we are exporting. // https://en.cppreference.com/w/cpp/language/namespace namespace hello_world { // Declare the 'hello()' function, which takes no arguments and returns a // 'std::string'. The function itself is defined in the hello_world.cpp source // file. Because it is inside of the 'hello_world' namespace, it's full name is // 'hello_world::hello()'. std :: string hello (); } // namespace hello_world #endif Hmm semua sudah disiapkan lanjut ke file hello_world.c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \"hello_world.h\" // Use everything from the 'std' namespace. // This lets us write 'string' instead of 'std::string'. using namespace std ; namespace hello_world { // Define the function itself. This could have also been written as: // std::string hello_world::hello() string hello () { // Return the string we need. return \"\" ; } } // namespace hello_world Untuk bisa menyelesaikan soal latihan func hello() harus bisa mengembalikan(return) string yang bertuliskan \"Hello, World!\", pada code diatas tinggal ditambahkan Hello, World! ingat c/cpp semua case sensitive jadi besar kecil huruf harus diperhatikan. Setelah di edit file hello_world.c akan menjadi seperti di bawah ini. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \"hello_world.h\" // Use everything from the 'std' namespace. // This lets us write 'string' instead of 'std::string'. using namespace std ; namespace hello_world { // Define the function itself. This could have also been written as: // std::string hello_world::hello() string hello () { // Return the string we need. return \"Hello, World!\" ; } } // namespace hello_world Hanya baris nomer 101 yang berubah.","title":"Edit file hello-world.h"},{"location":"lang/cpp/contoh/helloWorld/#build-dan-test","text":"Buka terminal pada folder hello-world seperti pada bagian Generate Makefile , dan jalankan perintah $ make secara ostosmastis file source cpp akan di compile dan di test. Berikut hasil output dari perintah make pada folder hello-world 1 2 3 4 5 6 7 8 9 10 11 12 13 kenzanin@artix | ~/exercism/cpp/hello-world ) make Scanning dependencies of target hello-world [ 25 % ] Building CXX object CMakeFiles/hello-world.dir/hello_world_test.cpp.o [ 50 % ] Building CXX object CMakeFiles/hello-world.dir/hello_world.cpp.o [ 75 % ] Building CXX object CMakeFiles/hello-world.dir/test/tests-main.cpp.o [ 100 % ] Linking CXX executable hello-world [ 100 % ] Built target hello-world Scanning dependencies of target test_hello-world =============================================================================== All tests passed ( 1 assertion in 1 test case ) [ 100 % ] Built target test_hello-world Perhatikan tulisan All test passed artinya pogram kita sudah sesuai dengan permintaan dari exercism dan file source siap di upload untuk melanjutkan ke contoh berikutnya.","title":"Build dan test"},{"location":"lang/cpp/contoh/helloWorld/#upload-file","text":"Masih pada folder hello-world jalankan perintah ini untuk meng-upload file. $ exercism submit hello_world. { cpp,h }","title":"Upload File"},{"location":"lang/cpp/contoh/helloWorld/#verivikasi-pada-situs-exercismio","text":"Buka situs Exercism.io lihat bagian track cpp untuk Hello World pencet tombol nya dan pencet Solve","title":"Verivikasi pada situs Exercism.io"},{"location":"lang/cpp/contoh/hexadecimal/","text":"Hexadecimal Intro On the web we use hexadecimal to represent colors, e.g. green: 008000, teal: 008080, navy: 000080). The program should handle invalid hexadecimal strings. Task Convert a hexadecimal number, represented as a string (e.g. \"10af8c\"), to its decimal equivalent using first principles (i.e. no, you may not use built-in or external libraries to accomplish the conversion). The Code hexadecimal.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include \"hexadecimal.h\" #include \"test/catch.hpp\" #include <cstdint> namespace hexadecimal { std :: uint32_t convert ( std :: string test ) { std :: uint32_t result {}; for ( auto c : test ) { if ( c >= '0' && c <= '9' ) { result <<= 4 ; result |= ( c - '0' ); } else if ( c >= 'a' && c <= 'f' ) { result <<= 4 ; result |= ( c - 'a' ) + 10 ; } else { return 0 ; } } return result ; } } // namespace hexadecimal hexadecimal.h 1 2 3 4 5 6 7 8 9 10 #include <cstdint> #include <string> #if !defined(HEXADECIMAL_H) #define HEXADECIMAL_H #include \"string\" namespace hexadecimal { std :: uint32_t convert ( std :: string ); } // namespace hexadecimal #endif // HEXADECIMAL_H","title":"Hexadecimal"},{"location":"lang/cpp/contoh/hexadecimal/#hexadecimal","text":"","title":"Hexadecimal"},{"location":"lang/cpp/contoh/hexadecimal/#intro","text":"On the web we use hexadecimal to represent colors, e.g. green: 008000, teal: 008080, navy: 000080). The program should handle invalid hexadecimal strings.","title":"Intro"},{"location":"lang/cpp/contoh/hexadecimal/#task","text":"Convert a hexadecimal number, represented as a string (e.g. \"10af8c\"), to its decimal equivalent using first principles (i.e. no, you may not use built-in or external libraries to accomplish the conversion).","title":"Task"},{"location":"lang/cpp/contoh/hexadecimal/#the-code","text":"hexadecimal.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include \"hexadecimal.h\" #include \"test/catch.hpp\" #include <cstdint> namespace hexadecimal { std :: uint32_t convert ( std :: string test ) { std :: uint32_t result {}; for ( auto c : test ) { if ( c >= '0' && c <= '9' ) { result <<= 4 ; result |= ( c - '0' ); } else if ( c >= 'a' && c <= 'f' ) { result <<= 4 ; result |= ( c - 'a' ) + 10 ; } else { return 0 ; } } return result ; } } // namespace hexadecimal hexadecimal.h 1 2 3 4 5 6 7 8 9 10 #include <cstdint> #include <string> #if !defined(HEXADECIMAL_H) #define HEXADECIMAL_H #include \"string\" namespace hexadecimal { std :: uint32_t convert ( std :: string ); } // namespace hexadecimal #endif // HEXADECIMAL_H","title":"The Code"},{"location":"lang/cpp/contoh/isogram/","text":"Isogram Intro An isogram (also known as a \"nonpattern word\") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. Examples of isograms: lumberjacks background downstream six-year-old The word isograms , however, is not an isogram, because the s repeats. Task Determine if a word or phrase is an isogram. isogram.h 1 2 3 4 5 6 7 8 9 10 #if !defined(ISOGRAM_H) #define ISOGRAM_H #include \"string\" #include \"iostream\" namespace isogram { bool is_isogram ( std :: string test ); } // namespace isogram #endif // ISOGRAM_H isogram.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \"isogram.h\" #include \"iostream\" #include \"string\" #include <cctype> #include <vector> namespace isogram { bool is_isogram ( const std :: string test ) { for ( int i = 0 ; i < ( int ) test . size (); i ++ ) { if ( test [ i ] == ' ' || test [ i ] == '-' ) continue ; for ( int ii = i + 1 ; ii < ( int ) test . size (); ii ++ ) { if ( std :: tolower ( test [ i ]) == std :: tolower ( test [ ii ])) return false ; } } return true ; } } // namespace isogram","title":"Isogram"},{"location":"lang/cpp/contoh/isogram/#isogram","text":"","title":"Isogram"},{"location":"lang/cpp/contoh/isogram/#intro","text":"An isogram (also known as a \"nonpattern word\") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. Examples of isograms: lumberjacks background downstream six-year-old The word isograms , however, is not an isogram, because the s repeats.","title":"Intro"},{"location":"lang/cpp/contoh/isogram/#task","text":"Determine if a word or phrase is an isogram. isogram.h 1 2 3 4 5 6 7 8 9 10 #if !defined(ISOGRAM_H) #define ISOGRAM_H #include \"string\" #include \"iostream\" namespace isogram { bool is_isogram ( std :: string test ); } // namespace isogram #endif // ISOGRAM_H isogram.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \"isogram.h\" #include \"iostream\" #include \"string\" #include <cctype> #include <vector> namespace isogram { bool is_isogram ( const std :: string test ) { for ( int i = 0 ; i < ( int ) test . size (); i ++ ) { if ( test [ i ] == ' ' || test [ i ] == '-' ) continue ; for ( int ii = i + 1 ; ii < ( int ) test . size (); ii ++ ) { if ( std :: tolower ( test [ i ]) == std :: tolower ( test [ ii ])) return false ; } } return true ; } } // namespace isogram","title":"Task"},{"location":"lang/cpp/contoh/leap/","text":"Leap Intro 1 2 3 on every year that is evenly divisible by 4 except every year that is evenly divisible by 100 unless the year is also evenly divisible by 400 For example, 1997 is not a leap year, but 1996 is. 1900 is not a leap year, but 2000 is. Task Given a year, report if it is a leap year. The Code leap.h 1 2 3 4 5 6 7 8 #if !defined(LEAP_H) #define LEAP_H namespace leap { bool is_leap_year ( int test ); } // namespace leap #endif // LEAP_H leap.cpp 1 2 3 4 5 6 7 8 9 10 11 12 #include \"leap.h\" namespace leap { bool is_leap_year ( int test ) { if ( test % 100 == 0 && ( test % 400 != 0 )) return false ; if ( test % 4 == 0 ) return true ; return false ; } } // namespace leap","title":"Leap"},{"location":"lang/cpp/contoh/leap/#leap","text":"","title":"Leap"},{"location":"lang/cpp/contoh/leap/#intro","text":"1 2 3 on every year that is evenly divisible by 4 except every year that is evenly divisible by 100 unless the year is also evenly divisible by 400 For example, 1997 is not a leap year, but 1996 is. 1900 is not a leap year, but 2000 is.","title":"Intro"},{"location":"lang/cpp/contoh/leap/#task","text":"Given a year, report if it is a leap year.","title":"Task"},{"location":"lang/cpp/contoh/leap/#the-code","text":"leap.h 1 2 3 4 5 6 7 8 #if !defined(LEAP_H) #define LEAP_H namespace leap { bool is_leap_year ( int test ); } // namespace leap #endif // LEAP_H leap.cpp 1 2 3 4 5 6 7 8 9 10 11 12 #include \"leap.h\" namespace leap { bool is_leap_year ( int test ) { if ( test % 100 == 0 && ( test % 400 != 0 )) return false ; if ( test % 4 == 0 ) return true ; return false ; } } // namespace leap","title":"The Code"},{"location":"lang/cpp/contoh/luhn/","text":"LUHN Intro The Luhn algorithm is a simple checksum formula used to validate a variety of identification numbers, such as credit card numbers and Canadian Social Insurance Numbers. The task is to check if a given string is valid. Validating a Number Strings of length 1 or less are not valid. Spaces are allowed in the input, but they should be stripped before checking. All other non-digit characters are disallowed. Example 1: valid credit card number 1 4539 1488 0343 6467 The first step of the Luhn algorithm is to double every second digit, starting from the right. We will be doubling 1 4_3_ 1_8_ 0_4_ 6_6_ If doubling the number results in a number greater than 9 then subtract 9 from the product. The results of our doubling: 1 8569 2478 0383 3437 Then sum all of the digits: 1 8+5+6+9+2+4+7+8+0+3+8+3+3+4+3+7 = 80 If the sum is evenly divisible by 10, then the number is valid. This number is valid! Example 2: invalid credit card number 1 8273 1232 7352 0569 Double the second digits, starting from the right 1 7253 2262 5312 0539 Sum the digits 1 7+2+5+3+2+2+6+2+5+3+1+2+0+5+3+9 = 57 57 is not evenly divisible by 10, so this number is not valid. Task Given a number determine whether or not it is valid per the Luhn formula. The Code luhn.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \"luhn.h\" #include <bits/stdint-uintn.h> #include <cctype> #include <cstdio> #include <string> #include <vector> namespace luhn { bool valid ( std :: string test ) { std :: vector < int8_t > var {}; for ( auto c : test ) { if ( std :: isspace ( c )) continue ; if ( std :: isdigit ( c )) { var . push_back ( c - '0' ); continue ; } return false ; } luhn.h 1 2 3 4 5 6 7 8 9 10 #include <string> #if !defined(LUHN_H) #define LUHN_H #include \"string\" namespace luhn { bool valid ( std :: string ); } // namespace luhn #endif // LUHN_H","title":"LUHN"},{"location":"lang/cpp/contoh/luhn/#luhn","text":"","title":"LUHN"},{"location":"lang/cpp/contoh/luhn/#intro","text":"The Luhn algorithm is a simple checksum formula used to validate a variety of identification numbers, such as credit card numbers and Canadian Social Insurance Numbers. The task is to check if a given string is valid.","title":"Intro"},{"location":"lang/cpp/contoh/luhn/#validating-a-number","text":"Strings of length 1 or less are not valid. Spaces are allowed in the input, but they should be stripped before checking. All other non-digit characters are disallowed.","title":"Validating a Number"},{"location":"lang/cpp/contoh/luhn/#example-1-valid-credit-card-number","text":"1 4539 1488 0343 6467 The first step of the Luhn algorithm is to double every second digit, starting from the right. We will be doubling 1 4_3_ 1_8_ 0_4_ 6_6_ If doubling the number results in a number greater than 9 then subtract 9 from the product. The results of our doubling: 1 8569 2478 0383 3437 Then sum all of the digits: 1 8+5+6+9+2+4+7+8+0+3+8+3+3+4+3+7 = 80 If the sum is evenly divisible by 10, then the number is valid. This number is valid!","title":"Example 1: valid credit card number"},{"location":"lang/cpp/contoh/luhn/#example-2-invalid-credit-card-number","text":"1 8273 1232 7352 0569 Double the second digits, starting from the right 1 7253 2262 5312 0539 Sum the digits 1 7+2+5+3+2+2+6+2+5+3+1+2+0+5+3+9 = 57 57 is not evenly divisible by 10, so this number is not valid.","title":"Example 2: invalid credit card number"},{"location":"lang/cpp/contoh/luhn/#task","text":"Given a number determine whether or not it is valid per the Luhn formula.","title":"Task"},{"location":"lang/cpp/contoh/luhn/#the-code","text":"luhn.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \"luhn.h\" #include <bits/stdint-uintn.h> #include <cctype> #include <cstdio> #include <string> #include <vector> namespace luhn { bool valid ( std :: string test ) { std :: vector < int8_t > var {}; for ( auto c : test ) { if ( std :: isspace ( c )) continue ; if ( std :: isdigit ( c )) { var . push_back ( c - '0' ); continue ; } return false ; } luhn.h 1 2 3 4 5 6 7 8 9 10 #include <string> #if !defined(LUHN_H) #define LUHN_H #include \"string\" namespace luhn { bool valid ( std :: string ); } // namespace luhn #endif // LUHN_H","title":"The Code"},{"location":"lang/cpp/contoh/nucleoideCount/","text":"Nucleotide Count Intro The genetic language of every living thing on the planet is DNA. DNA is a large molecule that is built from an extremely long sequence of individual elements called nucleotides. 4 types exist in DNA and these differ only slightly and can be represented as the following symbols: 'A' for adenine, 'C' for cytosine, 'G' for guanine, and 'T' thymine. Here is an analogy: twigs are to birds nests as nucleotides are to DNA as legos are to lego houses as words are to sentences as... Task Given a single stranded DNA string, compute how many times each nucleotide occurs in the string. The Code nucleotide_count.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include \"nucleotide_count.h\" #include <cctype> #include <cstddef> #include <stdexcept> #include <string> namespace nucleotide_count { } // namespace nucleotide_count nucleotide_count :: counter :: counter ( const std :: string & str ) : tmp {{ 'A' , 0 }, { 'T' , 0 }, { 'C' , 0 }, { 'G' , 0 }} { for ( auto & c : str ) { if ( tmp . find ( c ) == tmp . end ()) throw std :: invalid_argument ( \"salah argument:\" ); tmp . at ( c ) += 1 ; } } std :: map < char , int > const nucleotide_count :: counter :: nucleotide_counts () const { return tmp ; } int nucleotide_count :: counter :: count ( const char & c ) const { if ( tmp . find ( c ) == tmp . end ()) { throw std :: invalid_argument ( \"salah argument\" ); } return tmp . at ( c ); } nucleotide_count.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <cstdint> #if !defined(NUCLEOTIDE_COUNT_H) #define NUCLEOTIDE_COUNT_H #include \"map\" #include \"string\" namespace nucleotide_count { class counter { public : std :: map < char , int > tmp {}; counter ( const std :: string & ); const std :: map < char , int > nucleotide_counts () const ; int count ( const char & c ) const ; }; } // namespace nucleotide_count #endif // NUCLEOTIDE_COUNT_H","title":"Nucleoide Count"},{"location":"lang/cpp/contoh/nucleoideCount/#nucleotide-count","text":"","title":"Nucleotide Count"},{"location":"lang/cpp/contoh/nucleoideCount/#intro","text":"The genetic language of every living thing on the planet is DNA. DNA is a large molecule that is built from an extremely long sequence of individual elements called nucleotides. 4 types exist in DNA and these differ only slightly and can be represented as the following symbols: 'A' for adenine, 'C' for cytosine, 'G' for guanine, and 'T' thymine. Here is an analogy: twigs are to birds nests as nucleotides are to DNA as legos are to lego houses as words are to sentences as...","title":"Intro"},{"location":"lang/cpp/contoh/nucleoideCount/#task","text":"Given a single stranded DNA string, compute how many times each nucleotide occurs in the string.","title":"Task"},{"location":"lang/cpp/contoh/nucleoideCount/#the-code","text":"nucleotide_count.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include \"nucleotide_count.h\" #include <cctype> #include <cstddef> #include <stdexcept> #include <string> namespace nucleotide_count { } // namespace nucleotide_count nucleotide_count :: counter :: counter ( const std :: string & str ) : tmp {{ 'A' , 0 }, { 'T' , 0 }, { 'C' , 0 }, { 'G' , 0 }} { for ( auto & c : str ) { if ( tmp . find ( c ) == tmp . end ()) throw std :: invalid_argument ( \"salah argument:\" ); tmp . at ( c ) += 1 ; } } std :: map < char , int > const nucleotide_count :: counter :: nucleotide_counts () const { return tmp ; } int nucleotide_count :: counter :: count ( const char & c ) const { if ( tmp . find ( c ) == tmp . end ()) { throw std :: invalid_argument ( \"salah argument\" ); } return tmp . at ( c ); } nucleotide_count.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <cstdint> #if !defined(NUCLEOTIDE_COUNT_H) #define NUCLEOTIDE_COUNT_H #include \"map\" #include \"string\" namespace nucleotide_count { class counter { public : std :: map < char , int > tmp {}; counter ( const std :: string & ); const std :: map < char , int > nucleotide_counts () const ; int count ( const char & c ) const ; }; } // namespace nucleotide_count #endif // NUCLEOTIDE_COUNT_H","title":"The Code"},{"location":"lang/cpp/contoh/pangram/","text":"Pangram Intro A pangram (Greek: \u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, pan gramma, \"every letter\") is a sentence using every letter of the alphabet at least once. The best known English pangram is: The quick brown fox jumps over the lazy dog. The alphabet used consists of ASCII letters a to z , inclusive, and is case insensitive. Input will not contain non-ASCII symbols. Task Determine if a sentence is a pangram. The Code pangram.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \"pangram.h\" #include <algorithm> #include <cctype> #include <string> #include \"algorithm\" namespace pangram { bool is_pangram ( std :: string test ) { std :: transform ( test . begin (), test . end (), test . begin (),[]( unsigned char c ){ return std :: tolower ( c );}); for ( char i = 'a' ; i <= 'z' ; i ++ ) { if ( ! test . find ( i )) break ; } return false ; } } // namespace pangram pangram.h 1 2 3 4 5 6 7 8 9 10 #if !defined(PANGRAM_H) #define PANGRAM_H #include \"string\" namespace pangram { bool is_pangram ( std :: string ); } // namespace pangram #endif // PANGRAM_H","title":"Pangram"},{"location":"lang/cpp/contoh/pangram/#pangram","text":"","title":"Pangram"},{"location":"lang/cpp/contoh/pangram/#intro","text":"A pangram (Greek: \u03c0\u03b1\u03bd \u03b3\u03c1\u03ac\u03bc\u03bc\u03b1, pan gramma, \"every letter\") is a sentence using every letter of the alphabet at least once. The best known English pangram is: The quick brown fox jumps over the lazy dog. The alphabet used consists of ASCII letters a to z , inclusive, and is case insensitive. Input will not contain non-ASCII symbols.","title":"Intro"},{"location":"lang/cpp/contoh/pangram/#task","text":"Determine if a sentence is a pangram.","title":"Task"},{"location":"lang/cpp/contoh/pangram/#the-code","text":"pangram.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \"pangram.h\" #include <algorithm> #include <cctype> #include <string> #include \"algorithm\" namespace pangram { bool is_pangram ( std :: string test ) { std :: transform ( test . begin (), test . end (), test . begin (),[]( unsigned char c ){ return std :: tolower ( c );}); for ( char i = 'a' ; i <= 'z' ; i ++ ) { if ( ! test . find ( i )) break ; } return false ; } } // namespace pangram pangram.h 1 2 3 4 5 6 7 8 9 10 #if !defined(PANGRAM_H) #define PANGRAM_H #include \"string\" namespace pangram { bool is_pangram ( std :: string ); } // namespace pangram #endif // PANGRAM_H","title":"The Code"},{"location":"lang/cpp/contoh/raindrops/","text":"Rain Drop Intro The rules of raindrops are that if a given number: has 3 as a factor, add 'Pling' to the result. has 5 as a factor, add 'Plang' to the result. has 7 as a factor, add 'Plong' to the result. does not have any of 3, 5, or 7 as a factor, the result should be the digits of the number. Examples 28 has 7 as a factor, but not 3 or 5, so the result would be \"Plong\". 30 has both 3 and 5 as factors, but not 7, so the result would be \"PlingPlang\". 34 is not factored by 3, 5, or 7, so the result would be \"34\". Task Your task is to convert a number into a string that contains raindrop sounds corresponding to certain potential factors. A factor is a number that evenly divides into another number, leaving no remainder. The simplest way to test if a one number is a factor of another is to use the modulo operation . The Code raindrops.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"raindrops.h\" #include <string> namespace raindrops { std :: string convert ( int test ) { std :: string tmp {}; if (( test % 3 ) == 0 ) tmp . append ( \"Pling\" ); if (( test % 5 ) == 0 ) tmp . append ( \"Plang\" ); if (( test % 7 ) == 0 ) tmp . append ( \"Plong\" ); if ( tmp . empty ()) tmp = std :: to_string ( test ); return tmp ; } } // namespace raindrops raindrops.h 1 2 3 4 5 6 7 8 9 10 #if !defined(RAINDROPS_H) #define RAINDROPS_H #include \"string\" namespace raindrops { std :: string convert ( int ); } // namespace raindrops #endif // RAINDROPS_H","title":"Raindrops"},{"location":"lang/cpp/contoh/raindrops/#rain-drop","text":"","title":"Rain Drop"},{"location":"lang/cpp/contoh/raindrops/#intro","text":"The rules of raindrops are that if a given number: has 3 as a factor, add 'Pling' to the result. has 5 as a factor, add 'Plang' to the result. has 7 as a factor, add 'Plong' to the result. does not have any of 3, 5, or 7 as a factor, the result should be the digits of the number.","title":"Intro"},{"location":"lang/cpp/contoh/raindrops/#examples","text":"28 has 7 as a factor, but not 3 or 5, so the result would be \"Plong\". 30 has both 3 and 5 as factors, but not 7, so the result would be \"PlingPlang\". 34 is not factored by 3, 5, or 7, so the result would be \"34\".","title":"Examples"},{"location":"lang/cpp/contoh/raindrops/#task","text":"Your task is to convert a number into a string that contains raindrop sounds corresponding to certain potential factors. A factor is a number that evenly divides into another number, leaving no remainder. The simplest way to test if a one number is a factor of another is to use the modulo operation .","title":"Task"},{"location":"lang/cpp/contoh/raindrops/#the-code","text":"raindrops.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"raindrops.h\" #include <string> namespace raindrops { std :: string convert ( int test ) { std :: string tmp {}; if (( test % 3 ) == 0 ) tmp . append ( \"Pling\" ); if (( test % 5 ) == 0 ) tmp . append ( \"Plang\" ); if (( test % 7 ) == 0 ) tmp . append ( \"Plong\" ); if ( tmp . empty ()) tmp = std :: to_string ( test ); return tmp ; } } // namespace raindrops raindrops.h 1 2 3 4 5 6 7 8 9 10 #if !defined(RAINDROPS_H) #define RAINDROPS_H #include \"string\" namespace raindrops { std :: string convert ( int ); } // namespace raindrops #endif // RAINDROPS_H","title":"The Code"},{"location":"lang/cpp/contoh/reverseString/","text":"Reverse String Intro Reverse a string For example: input: \"cool\" output: \"looc\" Task Reverse a string The Code reverse_string.h 1 2 3 4 5 6 7 8 9 10 #if !defined(REVERSE_STRING_H) #define REVERSE_STRING_H #include \"string\" namespace reverse_string { std :: string reverse_string ( std :: string test ); } // namespace reverse_string #endif // REVERSE_STRING_H reverse_string.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include \"reverse_string.h\" #include <algorithm> #include <iterator> #include <string> namespace reverse_string { std :: string reverse_string ( std :: string test ); } // namespace reverse_string std :: string reverse_string :: reverse_string ( std :: string test ) { std :: reverse_iterator < std :: string :: iterator > r = test . rbegin (); std :: string rev ( r , test . rend ()); return rev ; }","title":"Reverse String"},{"location":"lang/cpp/contoh/reverseString/#reverse-string","text":"","title":"Reverse String"},{"location":"lang/cpp/contoh/reverseString/#intro","text":"Reverse a string For example: input: \"cool\" output: \"looc\"","title":"Intro"},{"location":"lang/cpp/contoh/reverseString/#task","text":"Reverse a string","title":"Task"},{"location":"lang/cpp/contoh/reverseString/#the-code","text":"reverse_string.h 1 2 3 4 5 6 7 8 9 10 #if !defined(REVERSE_STRING_H) #define REVERSE_STRING_H #include \"string\" namespace reverse_string { std :: string reverse_string ( std :: string test ); } // namespace reverse_string #endif // REVERSE_STRING_H reverse_string.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include \"reverse_string.h\" #include <algorithm> #include <iterator> #include <string> namespace reverse_string { std :: string reverse_string ( std :: string test ); } // namespace reverse_string std :: string reverse_string :: reverse_string ( std :: string test ) { std :: reverse_iterator < std :: string :: iterator > r = test . rbegin (); std :: string rev ( r , test . rend ()); return rev ; }","title":"The Code"},{"location":"lang/cpp/contoh/rnaTranscription/","text":"RNA Transcription Intro Both DNA and RNA strands are a sequence of nucleotides. The four nucleotides found in DNA are adenine ( A ), cytosine ( C ), guanine ( G ) and thymine ( T ). The four nucleotides found in RNA are adenine ( A ), cytosine ( C ), guanine ( G ) and uracil ( U ). Given a DNA strand, its transcribed RNA strand is formed by replacing each nucleotide with its complement: G -> C C -> G T -> A A -> U Task Given a DNA strand, return its RNA complement (per RNA transcription). The Code rna_transcription.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include \"rna_transcription.h\" #include <string> /* G -> C C -> G T -> A A -> U */ namespace rna_transcription { std :: string to_rna ( std :: string test ) { for ( auto & c : test ) { c = to_rna ( c ); } return test ; } char to_rna ( char c ) { switch ( c ) { case 'G' : c = 'C' ; break ; case 'C' : c = 'G' ; break ; case 'T' : c = 'A' ; break ; case 'A' : c = 'U' ; break ; } return c ; } } // namespace rna_transcription rna_transcription.h 1 2 3 4 5 6 7 8 9 10 #if !defined(RNA_TRANSCRIPTION_H) #define RNA_TRANSCRIPTION_H #include \"string\" namespace rna_transcription { std :: string to_rna ( std :: string ); char to_rna ( char ); } // namespace rna_transcription #endif // RNA_TRANSCRIPTION_H","title":"RNA Transcription"},{"location":"lang/cpp/contoh/rnaTranscription/#rna-transcription","text":"","title":"RNA Transcription"},{"location":"lang/cpp/contoh/rnaTranscription/#intro","text":"Both DNA and RNA strands are a sequence of nucleotides. The four nucleotides found in DNA are adenine ( A ), cytosine ( C ), guanine ( G ) and thymine ( T ). The four nucleotides found in RNA are adenine ( A ), cytosine ( C ), guanine ( G ) and uracil ( U ). Given a DNA strand, its transcribed RNA strand is formed by replacing each nucleotide with its complement: G -> C C -> G T -> A A -> U","title":"Intro"},{"location":"lang/cpp/contoh/rnaTranscription/#task","text":"Given a DNA strand, return its RNA complement (per RNA transcription).","title":"Task"},{"location":"lang/cpp/contoh/rnaTranscription/#the-code","text":"rna_transcription.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include \"rna_transcription.h\" #include <string> /* G -> C C -> G T -> A A -> U */ namespace rna_transcription { std :: string to_rna ( std :: string test ) { for ( auto & c : test ) { c = to_rna ( c ); } return test ; } char to_rna ( char c ) { switch ( c ) { case 'G' : c = 'C' ; break ; case 'C' : c = 'G' ; break ; case 'T' : c = 'A' ; break ; case 'A' : c = 'U' ; break ; } return c ; } } // namespace rna_transcription rna_transcription.h 1 2 3 4 5 6 7 8 9 10 #if !defined(RNA_TRANSCRIPTION_H) #define RNA_TRANSCRIPTION_H #include \"string\" namespace rna_transcription { std :: string to_rna ( std :: string ); char to_rna ( char ); } // namespace rna_transcription #endif // RNA_TRANSCRIPTION_H","title":"The Code"},{"location":"lang/cpp/contoh/spaceAge/","text":"Space Age Intro Given an age in seconds, calculate how old someone would be on: Mercury: orbital period 0.2408467 Earth years Venus: orbital period 0.61519726 Earth years Earth: orbital period 1.0 Earth years, 365.25 Earth days, or 31557600 seconds Mars: orbital period 1.8808158 Earth years Jupiter: orbital period 11.862615 Earth years Saturn: orbital period 29.447498 Earth years Uranus: orbital period 84.016846 Earth years Neptune: orbital period 164.79132 Earth years So if you were told someone were 1,000,000,000 seconds old, you should be able to say that they're 31.69 Earth-years old. If you're wondering why Pluto didn't make the cut, go watch thisyoutube video . Task See above The Code space_age.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"space_age.h\" #include <bits/stdint-uintn.h> namespace space_age { space_age :: space_age ( long _age ) { age = _age ; } double space_age :: seconds () const { return age ; } double space_age :: on_earth () const { return age / 31557600.0 ; } double space_age :: on_mercury () const { return age / ( 0.2408467 * 31557600.0 ); } double space_age :: on_venus () const { return age / ( 0.61519726 * 31557600.0 ); } double space_age :: on_mars () const { return age / ( 1.8808158 * 31557600.0 ); } double space_age :: on_jupiter () const { return age / ( 11.862615 * 31557600.0 ); } double space_age :: on_saturn () const { return age / ( 29.447498 * 31557600.0 ); } double space_age :: on_uranus () const { return age / ( 84.016846 * 31557600.0 ); } double space_age :: on_neptune () const { return age / ( 164.79132 * 31557600.0 ); } } // namespace space_age space_age.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdint-uintn.h> #if !defined(SPACE_AGE_H) #define SPACE_AGE_H namespace space_age { class space_age { public : double age ; space_age ( long ); double seconds () const ; double on_earth () const ; double on_mercury () const ; double on_venus () const ; double on_mars () const ; double on_jupiter () const ; double on_saturn () const ; double on_uranus () const ; double on_neptune () const ; }; } // namespace space_age #endif // SPACE_AGE_H","title":"Space Age"},{"location":"lang/cpp/contoh/spaceAge/#space-age","text":"","title":"Space Age"},{"location":"lang/cpp/contoh/spaceAge/#intro","text":"Given an age in seconds, calculate how old someone would be on: Mercury: orbital period 0.2408467 Earth years Venus: orbital period 0.61519726 Earth years Earth: orbital period 1.0 Earth years, 365.25 Earth days, or 31557600 seconds Mars: orbital period 1.8808158 Earth years Jupiter: orbital period 11.862615 Earth years Saturn: orbital period 29.447498 Earth years Uranus: orbital period 84.016846 Earth years Neptune: orbital period 164.79132 Earth years So if you were told someone were 1,000,000,000 seconds old, you should be able to say that they're 31.69 Earth-years old. If you're wondering why Pluto didn't make the cut, go watch thisyoutube video .","title":"Intro"},{"location":"lang/cpp/contoh/spaceAge/#task","text":"See above","title":"Task"},{"location":"lang/cpp/contoh/spaceAge/#the-code","text":"space_age.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include \"space_age.h\" #include <bits/stdint-uintn.h> namespace space_age { space_age :: space_age ( long _age ) { age = _age ; } double space_age :: seconds () const { return age ; } double space_age :: on_earth () const { return age / 31557600.0 ; } double space_age :: on_mercury () const { return age / ( 0.2408467 * 31557600.0 ); } double space_age :: on_venus () const { return age / ( 0.61519726 * 31557600.0 ); } double space_age :: on_mars () const { return age / ( 1.8808158 * 31557600.0 ); } double space_age :: on_jupiter () const { return age / ( 11.862615 * 31557600.0 ); } double space_age :: on_saturn () const { return age / ( 29.447498 * 31557600.0 ); } double space_age :: on_uranus () const { return age / ( 84.016846 * 31557600.0 ); } double space_age :: on_neptune () const { return age / ( 164.79132 * 31557600.0 ); } } // namespace space_age space_age.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdint-uintn.h> #if !defined(SPACE_AGE_H) #define SPACE_AGE_H namespace space_age { class space_age { public : double age ; space_age ( long ); double seconds () const ; double on_earth () const ; double on_mercury () const ; double on_venus () const ; double on_mars () const ; double on_jupiter () const ; double on_saturn () const ; double on_uranus () const ; double on_neptune () const ; }; } // namespace space_age #endif // SPACE_AGE_H","title":"The Code"},{"location":"lang/cpp/contoh/sumOfMultiple/","text":"Sum Of Multiples Intro If we list all the natural numbers below 20 that are multiples of 3 or 5, we get 3, 5, 6, 9, 10, 12, 15, and 18. The sum of these multiples is 78. Task Given a number, find the sum of all the unique multiples of particular numbers up to but not including that number. The Code sum_of_multiples.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include \"sum_of_multiples.h\" #include <cstdint> #include <vector> #include \"list\" namespace sum_of_multiples { int to ( std :: vector < int > test , int test2 ) { std :: list < int > tmp {}; std :: uint32_t result {}; for ( auto a : test ) { for ( int i = a ; i < test2 ; i += a ) { tmp . push_back ( i ); } } tmp . sort (); tmp . unique (); for ( auto a : tmp ) { result += a ; } return result ; } } // namespace sum_of_multiples sum_of_multiples.h 1 2 3 4 5 6 7 8 9 #include <vector> #if !defined(SUM_OF_MULTIPLES_H) #define SUM_OF_MULTIPLES_H namespace sum_of_multiples { int to ( std :: vector < int > , int ); } // namespace sum_of_multiples #endif // SUM_OF_MULTIPLES_H","title":"Sum Of Multiples"},{"location":"lang/cpp/contoh/sumOfMultiple/#sum-of-multiples","text":"","title":"Sum Of Multiples"},{"location":"lang/cpp/contoh/sumOfMultiple/#intro","text":"If we list all the natural numbers below 20 that are multiples of 3 or 5, we get 3, 5, 6, 9, 10, 12, 15, and 18. The sum of these multiples is 78.","title":"Intro"},{"location":"lang/cpp/contoh/sumOfMultiple/#task","text":"Given a number, find the sum of all the unique multiples of particular numbers up to but not including that number.","title":"Task"},{"location":"lang/cpp/contoh/sumOfMultiple/#the-code","text":"sum_of_multiples.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include \"sum_of_multiples.h\" #include <cstdint> #include <vector> #include \"list\" namespace sum_of_multiples { int to ( std :: vector < int > test , int test2 ) { std :: list < int > tmp {}; std :: uint32_t result {}; for ( auto a : test ) { for ( int i = a ; i < test2 ; i += a ) { tmp . push_back ( i ); } } tmp . sort (); tmp . unique (); for ( auto a : tmp ) { result += a ; } return result ; } } // namespace sum_of_multiples sum_of_multiples.h 1 2 3 4 5 6 7 8 9 #include <vector> #if !defined(SUM_OF_MULTIPLES_H) #define SUM_OF_MULTIPLES_H namespace sum_of_multiples { int to ( std :: vector < int > , int ); } // namespace sum_of_multiples #endif // SUM_OF_MULTIPLES_H","title":"The Code"},{"location":"lang/cpp/contoh/triangle/","text":"Triangle Intro An equilateral triangle has all three sides the same length. An isosceles triangle has at least two sides the same length. (It is sometimes specified as having exactly two sides the same length, but for the purposes of this exercise we'll say at least two.) A scalene triangle has all sides of different lengths. Note For a shape to be a triangle at all, all sides have to be of length > 0, and the sum of the lengths of any two sides must be greater than or equal to the length of the third side. See Triangle Inequality . Task Determine if a triangle is equilateral, isosceles, or scalene. The Code triangle.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <stdexcept> namespace triangle { flavor kind ( double a , double b , double c ) { if ( a <= 0 || b <= 0 || c <= 0 || a + b < c || a + c < b || b + c < a ) throw std :: domain_error ( \"error\" ); std :: map < double , double > sisi {}; sisi [ a ] ++ ; sisi [ b ] ++ ; sisi [ c ] ++ ; if ( sisi . at ( a ) == 3 ) return flavor :: equilateral ; if (( sisi . at ( a ) == 2 && ( sisi . at ( b ) == 1 || sisi . at ( c ) == 1 )) || ( sisi . at ( a ) == 1 && sisi . at ( b ) == 2 )) return flavor :: isosceles ; return flavor :: scalene ; } } // namespace triangle triangle.h 1 2 3 4 5 6 7 8 9 #if !defined(TRIANGLE_H) #define TRIANGLE_H namespace triangle { enum class flavor { equilateral , isosceles , scalene }; flavor kind ( double , double , double ); } // namespace triangle #endif // TRIANGLE_H","title":"Triangle"},{"location":"lang/cpp/contoh/triangle/#triangle","text":"","title":"Triangle"},{"location":"lang/cpp/contoh/triangle/#intro","text":"An equilateral triangle has all three sides the same length. An isosceles triangle has at least two sides the same length. (It is sometimes specified as having exactly two sides the same length, but for the purposes of this exercise we'll say at least two.) A scalene triangle has all sides of different lengths.","title":"Intro"},{"location":"lang/cpp/contoh/triangle/#note","text":"For a shape to be a triangle at all, all sides have to be of length > 0, and the sum of the lengths of any two sides must be greater than or equal to the length of the third side. See Triangle Inequality .","title":"Note"},{"location":"lang/cpp/contoh/triangle/#task","text":"Determine if a triangle is equilateral, isosceles, or scalene.","title":"Task"},{"location":"lang/cpp/contoh/triangle/#the-code","text":"triangle.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <stdexcept> namespace triangle { flavor kind ( double a , double b , double c ) { if ( a <= 0 || b <= 0 || c <= 0 || a + b < c || a + c < b || b + c < a ) throw std :: domain_error ( \"error\" ); std :: map < double , double > sisi {}; sisi [ a ] ++ ; sisi [ b ] ++ ; sisi [ c ] ++ ; if ( sisi . at ( a ) == 3 ) return flavor :: equilateral ; if (( sisi . at ( a ) == 2 && ( sisi . at ( b ) == 1 || sisi . at ( c ) == 1 )) || ( sisi . at ( a ) == 1 && sisi . at ( b ) == 2 )) return flavor :: isosceles ; return flavor :: scalene ; } } // namespace triangle triangle.h 1 2 3 4 5 6 7 8 9 #if !defined(TRIANGLE_H) #define TRIANGLE_H namespace triangle { enum class flavor { equilateral , isosceles , scalene }; flavor kind ( double , double , double ); } // namespace triangle #endif // TRIANGLE_H","title":"The Code"},{"location":"lang/pascal/ide/","text":"Lazarus IDE","title":"Lazarus IDE"},{"location":"lang/pascal/ide/#lazarus-ide","text":"","title":"Lazarus IDE"},{"location":"lang/pascal/install/","text":"Installasi FPC Download package Free Pascal Compiler(FPC) dapat didownload dengan bebas pada situs https://www.freepascal.org terdapat beberapa package binary klo males compile sendiri baik untuk windows, linux, dan mac. Untuk mendownload versi stable gunakan alamat ini https://www.freepascal.org/download.html Untuk versi devel gunakan alamat ini https://www.freepascal.org/develop.html Saya sarankan untuk menggunakan versi stable jika tidak ada keperluan khusus, untuk menghindari permasalahan yang tidak perlu terjadi hehe. Install Sama dengan dokument sebelumnya bagian install di pisah per OS. Linux Pada Artix linux FPC sudah tersedia di repo jadi tinggal install menggunakan pacman atau yay. $ pacman -S fpc Windows Download package yang sesuai baik OS dan Arch nya, misal untuk windows 7 keatas dan cpu menggunakan AMD64 (intel atau amd yang bertulisan x64) ada pada alamat dibawah initial https://www.freepascal.org/down/x86_64/win64.html Pilih mirror nya dan download file nya. Untuk install masih sama tinggal next, next, next, yes, next, Finish. hehehe. Test Untuk memastikan FPC sudah terinstall dengan benar buka terminal dan ketik fpcfpc Free Pascal Compiler version 3 .2.0 [ 2020 /10/05 ] for x86_64 Copyright ( c ) 1993 -2020 by Florian Klaempfl and others /usr/bin/fpc [ options ] <inputfile> [ options ] Only options valid for the default or selected platform are listed. Put + after a boolean switch option to enable it, - to disable it. @<x> Read compiler options from <x> in addition to the default fpc.cfg -a The compiler does not delete the generated assembler file -a5 Don 't generate Big Obj COFF files for GNU Binutils older than 2.25 (Windows, NativeNT) -al List sourcecode lines in assembler file -an List node info in assembler file (-dEXTDEBUG compiler) -ao Add an extra option to external assembler call (ignored for internal) -ap Use pipes instead of creating temporary assembler files -ar List register allocation/release info in assembler file -at List temp allocation/release info in assembler file -A<x> Output format: -Adefault Use default assembler -Aas Assemble using GNU AS -Agas Assemble using GNU GAS -Agas-darwin Assemble darwin Mach-O64 using GNU GAS *** press enter *** -Amasm Win64 object file using ml64 (Microsoft) -Apecoff PE-COFF (Win64) using internal writer -Aelf ELF (Linux-64bit) using internal writer -Ayasm Assemble using Yasm (experimental) -Anasm Assemble using Nasm (experimental) -Anasmwin64 Assemble Win64 object file using Nasm (experimental) -Anasmelf Assemble Linux-64bit object file using Nasm (experimental) -Anasmdarwin Assemble darwin macho64 object file using Nasm (experimental) -b Generate browser info -bl Generate local symbol info -B Build all modules -C<x> Code generation options: -C3 Turn on ieee error checking for constants -Ca<x> Select ABI; see fpc -i or fpc -ia for possible values -Cb Generate code for a big-endian variant of the target architecture -Cc<x> Set default calling convention to <x> -CD Create also dynamic library (not supported) -Ce Compilation with emulated floating point opcodes -Cf<x> Select fpu instruction set to use; see fpc -i or fpc -if for possible values *** press enter *** -CF<x> Minimal floating point constant precision (default, 32, 64) -Cg Generate PIC code -Ch<n>[,m] <n> bytes min heap size (between 1023 and 67107840) and optionally [m] max heap size -Ci IO-checking -Cn Omit linking stage -Co Check overflow of integer operations -CO Check for possible overflow of integer operations -Cp<x> Select instruction set; see fpc -i or fpc -ic for possible values -CP<x>=<y> packing settings -CPPACKSET=<y> <y> set allocation: 0, 1 or DEFAULT or NORMAL, 2, 4 and 8 -CPPACKENUM=<y> <y> enum packing: 0, 1, 2 and 4 or DEFAULT or NORMAL -CPPACKRECORD=<y> <y> record packing: 0 or DEFAULT or NORMAL, 1, 2, 4, 8, 16 and 32 -Cr Range checking -CR Verify object method call validity -Cs<n> Set stack checking size to <n> -Ct Stack checking (for testing only, see manual) -CT<x> Target-specific code generation options *** press enter *** -CTcld Emit a CLD instruction before using the x86 string instructions -CX Create also smartlinked library -d<x> Defines the symbol <x> -D Generate a DEF file -Dd<x> Set description to <x> -Dv<x> Set DLL version to <x> -e<x> Set path to executable -E Same as -Cn -fPIC Same as -Cg -F<x> Set file names and paths: -Fa<x>[,y] (for a program) load units <x> and [y] before uses is parsed -Fc<x> Set input codepage to <x> -FC<x> Set RC compiler binary name to <x> -Fd Disable the compiler' s internal directory cache -FD<x> Set the directory where to search for compiler utilities -Fe<x> Redirect error output to <x> -Ff<x> Add <x> to framework path ( Darwin only ) -FE<x> Set exe/unit output path to <x> -Fi<x> Add <x> to include path -Fl<x> Add <x> to library path -FL<x> Use <x> as dynamic linker *** press enter *** -Fm<x> Load unicode conversion table from <x>.txt in the compiler dir -FM<x> Set the directory where to search for unicode binary files -FN<x> Add <x> to list of default unit scopes ( namespaces ) -Fo<x> Add <x> to object path -Fr<x> Load error message file <x> -FR<x> Set resource ( .res ) linker to <x> -Fu<x> Add <x> to unit path -FU<x> Set unit output path to <x>, overrides -FE -FW<x> Store generated whole-program optimization feedback in <x> -Fw<x> Load previously stored whole-program optimization feedback from <x> -g Generate debug information ( default format for target ) -gc Generate checks for pointers ( experimental, only available on some targets, might generate false positive ) -gh Use heaptrace unit ( for memory leak/corruption debugging ) -gl Use line info unit ( show more info with backtraces ) -gm Generate Microsoft CodeView debug information ( experimental ) -go<x> Set debug information options -godwarfsets Enable DWARF 'set' type debug information ( breaks gdb < 6 .5 ) -gostabsabsincludes Store absolute/full include file paths in Stabs *** press enter *** -godwarfmethodclassprefix Prefix method names in DWARF with class name -godwarfcpp Simulate C++ debug information in DWARF -godwarfomflinnum Generate line number information in OMF LINNUM records in MS LINK format in addition to the DWARF debug information ( Open Watcom Debugger/Linker compatibility ) -gp Preserve case in stabs symbol names -gs Generate Stabs debug information -gt Trash local variables ( to detect uninitialized uses ; multiple 't' changes the trashing value ) -gv Generates programs traceable with Valgrind -gw Generate DWARFv2 debug information ( same as -gw2 ) -gw2 Generate DWARFv2 debug information -gw3 Generate DWARFv3 debug information -gw4 Generate DWARFv4 debug information ( experimental ) -i Information -iD Return compiler date -iSO Return compiler OS -iSP Return compiler host processor -iTO Return target OS -iTP Return target processor -iV Return short compiler version *** press enter *** -iW Return full compiler version -ia Return list of supported ABI targets -ic Return list of supported CPU instruction sets -if Return list of supported FPU instruction sets -ii Return list of supported inline assembler modes -io Return list of supported optimizations -ir Return list of recognized compiler and RTL features -it Return list of supported targets -iu Return list of supported microcontroller types -iw Return list of supported whole program optimizations -I<x> Add <x> to include path -k<x> Pass <x> to the linker -l Write logo -M<x> Set language mode to <x> -Mfpc Free Pascal dialect ( default ) -Mobjfpc FPC mode with Object Pascal support -Mdelphi Delphi 7 compatibility mode -Mtp TP/BP 7 .0 compatibility mode -Mmacpas Macintosh Pascal dialects compatibility mode -Miso ISO 7185 mode -Mextendedpascal ISO 10206 mode -Mdelphiunicode Delphi 2009 and later compatibility mode *** press enter *** -n Do not read the default config files -o<x> Change the name of the executable produced to <x> -O<x> Optimizations: -O- Disable optimizations -O1 Level 1 optimizations ( quick and debugger friendly ) -O2 Level 2 optimizations ( -O1 + quick optimizations ) -O3 Level 3 optimizations ( -O2 + slow optimizations ) -O4 Level 4 optimizations ( -O3 + optimizations which might have unexpected side effects ) -Oa<x> = <y> Set alignment -Oo [ NO ] <x> Enable or disable optimizations ; see fpc -i or fpc -io for possible values -Op<x> Set target cpu for optimizing ; see fpc -i or fpc -ic for possible values -OW<x> Generate whole-program optimization feedback for optimization <x> ; see fpc -i or fpc -iw for possible values -Ow<x> Perform whole-program optimization <x> ; see fpc -i or fpc -iw for possible values -Os Optimize for size rather than speed -pg Generate profile code for gprof ( defines FPC_PROFILE ) -P<x> Target CPU / compiler related options: -PB Show default compiler binary *** press enter *** -PP Show default target cpu -P<x> Set target CPU ( aarch64,arm,avr,i386,i8086,jvm,m68k,mips,mipsel,powerpc,powerpc64,sparc,x86_64 ) -R<x> Assembler reading style: -Rdefault Use default assembler for target -Ratt Read AT & T style assembler -Rintel Read Intel style assembler -S<x> Syntax options: -S2 Same as -Mobjfpc -Sc Support operators like C ( * = ,+ = ,/ = and - =) -Sa Turn on assertions -Sd Same as -Mdelphi -Se<x> Error options. <x> is a combination of the following: <n> : Compiler halts after the <n> errors ( default is 1 ) w : Compiler also halts after warnings n : Compiler also halts after notes h : Compiler also halts after hints -Sf Enable certain features in compiler and RTL ; see fpc -i or fpc -ir for possible values ) -Sg Enable LABEL and GOTO ( default in -Mtp and -Mdelphi ) -Sh Use reference counted strings ( ansistring by default ) instead of shortstrings *** press enter *** -Si Turn on inlining of procedures/functions declared as \"inline\" -Sj Allows typed constants to be writeable ( default in all modes ) -Sk Load fpcylix unit -SI<x> Set interface style to <x> -SIcom COM compatible interface ( default ) -SIcorba CORBA compatible interface -Sm Support macros like C ( global ) -So Same as -Mtp -Sr Transparent file names in ISO mode -Ss Constructor name must be init ( destructor must be done ) -Sv Support vector processing ( use CPU vector extensions if available ) -Sx Enable exception keywords ( default in Delphi/ObjFPC modes ) -Sy @<pointer> returns a typed pointer, same as $T + -s Do not call assembler and linker -sh Generate script to link on host -st Generate script to link on target -sr Skip register allocation phase ( use with -alr ) -T<x> Target operating system: -Taros AROS -Tdarwin Darwin/Mac OS X -Tdragonfly DragonFly BSD *** press enter *** -Tembedded Embedded -Tfreebsd FreeBSD -Tiphonesim iPhoneSimulator -Tlinux Linux -Tnetbsd NetBSD -Topenbsd OpenBSD -Tsolaris Solaris -Twin64 Win64 ( 64 bit Windows systems ) -u<x> Undefines the symbol <x> -U Unit options: -Un Do not check where the unit name matches the file name -Ur Generate release unit files ( never automatically recompiled ) -Us Compile a system unit -v<x> Be verbose. <x> is a combination of the following letters: e : Show errors ( default ) 0 : Show nothing ( except errors ) w : Show warnings u : Show unit info n : Show notes t : Show tried/used files h : Show hints c : Show conditionals i : Show general info d : Show debug info l : Show linenumbers r : Rhide/GCC compatibility mode s : Show time stamps q : Show message numbers a : Show everything x : Show info about invoked tools *** press enter *** b : Write file names messages p : Write tree.log with parse tree with full path v : Write fpcdebug.txt with z : Write output to stderr lots of debugging info m<x>,<y> : Do not show messages numbered <x> and <y> -V<x> Append '-<x>' to the used compiler binary name ( e.g. for version ) -W<x> Target-specific options ( targets ) -WA Specify native type application ( Windows ) -Wb Create a bundle instead of a library ( Darwin ) -WB Create a relocatable image ( Windows ) -WB<x> Set image base to <x> ( Windows ) -WC Specify console type application ( Windows ) -WD Use DEFFILE to export functions of DLL or EXE ( Windows ) -We Use external resources ( Darwin ) -WG Specify graphic type application ( Windows ) -Wi Use internal resources ( Darwin ) -WI Turn on/off the usage of import sections ( Windows ) -WM<x> Minimum Mac OS X deployment version: 10 .4, 10 .5.1, ... ( Darwin ) -WN Do not generate relocation code, needed for debugging ( Windows ) -WP<x> Minimum iOS deployment version: 8 .0, 8 .0.2, ... ( iphonesim ) -WR Generate relocation code ( Windows ) *** press enter *** -WX Enable executable stack ( Linux ) -X Executable options: -X9 Generate linkerscript for GNU Binutils ld older than version 2 .19.1 ( Linux ) -Xc Pass --shared/-dynamic to the linker ( BeOS, Darwin, FreeBSD, Linux ) -Xd Do not search default library path ( sometimes required for cross-compiling when not using -XR ) -Xe Use external linker -Xf Substitute pthread library name for linking ( BSD ) -Xg Create debuginfo in a separate file and add a debuglink section to executable -XD Try to link units dynamically ( defines FPC_LINK_DYNAMIC ) -Xi Use internal linker -XLA Define library substitutions for linking -XLO Define order of library linking -XLD Exclude default order of standard libraries -Xm Generate link map -XM<x> Set the name of the 'main' program routine ( default is 'main' ) -Xn Use target system native linker instead of GNU ld ( Solaris, AIX ) -Xp<x> First search for the compiler binary in the directory <x> *** press enter *** -XP<x> Prepend the binutils names with the prefix <x> -Xr<x> Set the linker ' s rlink-path to <x> ( needed for cross compile, see the ld manual for more information ) ( BeOS, Linux ) -XR<x> Prepend <x> to all linker search paths ( BeOS, Darwin, FreeBSD, Linux, Mac OS, Solaris ) -Xs Strip all symbols from executable -XS Try to link units statically ( default, defines FPC_LINK_STATIC ) -Xt Link with static libraries ( -static is passed to linker ) -Xv Generate table for Virtual Entry calls -XV Use VLink as external linker ( default on Amiga, MorphOS ) -XX Try to smartlink units ( defines FPC_LINK_SMART ) -? Show this help -h Shows this help without waiting Hmm panjang hehehe. but ini artinya fpc sudah siap untuk digunakan.","title":"Install"},{"location":"lang/pascal/install/#installasi-fpc","text":"","title":"Installasi FPC"},{"location":"lang/pascal/install/#download-package","text":"Free Pascal Compiler(FPC) dapat didownload dengan bebas pada situs https://www.freepascal.org terdapat beberapa package binary klo males compile sendiri baik untuk windows, linux, dan mac. Untuk mendownload versi stable gunakan alamat ini https://www.freepascal.org/download.html Untuk versi devel gunakan alamat ini https://www.freepascal.org/develop.html Saya sarankan untuk menggunakan versi stable jika tidak ada keperluan khusus, untuk menghindari permasalahan yang tidak perlu terjadi hehe.","title":"Download package"},{"location":"lang/pascal/install/#install","text":"Sama dengan dokument sebelumnya bagian install di pisah per OS.","title":"Install"},{"location":"lang/pascal/install/#linux","text":"Pada Artix linux FPC sudah tersedia di repo jadi tinggal install menggunakan pacman atau yay. $ pacman -S fpc","title":"Linux"},{"location":"lang/pascal/install/#windows","text":"Download package yang sesuai baik OS dan Arch nya, misal untuk windows 7 keatas dan cpu menggunakan AMD64 (intel atau amd yang bertulisan x64) ada pada alamat dibawah initial https://www.freepascal.org/down/x86_64/win64.html Pilih mirror nya dan download file nya. Untuk install masih sama tinggal next, next, next, yes, next, Finish. hehehe.","title":"Windows"},{"location":"lang/pascal/install/#test","text":"Untuk memastikan FPC sudah terinstall dengan benar buka terminal dan ketik fpcfpc Free Pascal Compiler version 3 .2.0 [ 2020 /10/05 ] for x86_64 Copyright ( c ) 1993 -2020 by Florian Klaempfl and others /usr/bin/fpc [ options ] <inputfile> [ options ] Only options valid for the default or selected platform are listed. Put + after a boolean switch option to enable it, - to disable it. @<x> Read compiler options from <x> in addition to the default fpc.cfg -a The compiler does not delete the generated assembler file -a5 Don 't generate Big Obj COFF files for GNU Binutils older than 2.25 (Windows, NativeNT) -al List sourcecode lines in assembler file -an List node info in assembler file (-dEXTDEBUG compiler) -ao Add an extra option to external assembler call (ignored for internal) -ap Use pipes instead of creating temporary assembler files -ar List register allocation/release info in assembler file -at List temp allocation/release info in assembler file -A<x> Output format: -Adefault Use default assembler -Aas Assemble using GNU AS -Agas Assemble using GNU GAS -Agas-darwin Assemble darwin Mach-O64 using GNU GAS *** press enter *** -Amasm Win64 object file using ml64 (Microsoft) -Apecoff PE-COFF (Win64) using internal writer -Aelf ELF (Linux-64bit) using internal writer -Ayasm Assemble using Yasm (experimental) -Anasm Assemble using Nasm (experimental) -Anasmwin64 Assemble Win64 object file using Nasm (experimental) -Anasmelf Assemble Linux-64bit object file using Nasm (experimental) -Anasmdarwin Assemble darwin macho64 object file using Nasm (experimental) -b Generate browser info -bl Generate local symbol info -B Build all modules -C<x> Code generation options: -C3 Turn on ieee error checking for constants -Ca<x> Select ABI; see fpc -i or fpc -ia for possible values -Cb Generate code for a big-endian variant of the target architecture -Cc<x> Set default calling convention to <x> -CD Create also dynamic library (not supported) -Ce Compilation with emulated floating point opcodes -Cf<x> Select fpu instruction set to use; see fpc -i or fpc -if for possible values *** press enter *** -CF<x> Minimal floating point constant precision (default, 32, 64) -Cg Generate PIC code -Ch<n>[,m] <n> bytes min heap size (between 1023 and 67107840) and optionally [m] max heap size -Ci IO-checking -Cn Omit linking stage -Co Check overflow of integer operations -CO Check for possible overflow of integer operations -Cp<x> Select instruction set; see fpc -i or fpc -ic for possible values -CP<x>=<y> packing settings -CPPACKSET=<y> <y> set allocation: 0, 1 or DEFAULT or NORMAL, 2, 4 and 8 -CPPACKENUM=<y> <y> enum packing: 0, 1, 2 and 4 or DEFAULT or NORMAL -CPPACKRECORD=<y> <y> record packing: 0 or DEFAULT or NORMAL, 1, 2, 4, 8, 16 and 32 -Cr Range checking -CR Verify object method call validity -Cs<n> Set stack checking size to <n> -Ct Stack checking (for testing only, see manual) -CT<x> Target-specific code generation options *** press enter *** -CTcld Emit a CLD instruction before using the x86 string instructions -CX Create also smartlinked library -d<x> Defines the symbol <x> -D Generate a DEF file -Dd<x> Set description to <x> -Dv<x> Set DLL version to <x> -e<x> Set path to executable -E Same as -Cn -fPIC Same as -Cg -F<x> Set file names and paths: -Fa<x>[,y] (for a program) load units <x> and [y] before uses is parsed -Fc<x> Set input codepage to <x> -FC<x> Set RC compiler binary name to <x> -Fd Disable the compiler' s internal directory cache -FD<x> Set the directory where to search for compiler utilities -Fe<x> Redirect error output to <x> -Ff<x> Add <x> to framework path ( Darwin only ) -FE<x> Set exe/unit output path to <x> -Fi<x> Add <x> to include path -Fl<x> Add <x> to library path -FL<x> Use <x> as dynamic linker *** press enter *** -Fm<x> Load unicode conversion table from <x>.txt in the compiler dir -FM<x> Set the directory where to search for unicode binary files -FN<x> Add <x> to list of default unit scopes ( namespaces ) -Fo<x> Add <x> to object path -Fr<x> Load error message file <x> -FR<x> Set resource ( .res ) linker to <x> -Fu<x> Add <x> to unit path -FU<x> Set unit output path to <x>, overrides -FE -FW<x> Store generated whole-program optimization feedback in <x> -Fw<x> Load previously stored whole-program optimization feedback from <x> -g Generate debug information ( default format for target ) -gc Generate checks for pointers ( experimental, only available on some targets, might generate false positive ) -gh Use heaptrace unit ( for memory leak/corruption debugging ) -gl Use line info unit ( show more info with backtraces ) -gm Generate Microsoft CodeView debug information ( experimental ) -go<x> Set debug information options -godwarfsets Enable DWARF 'set' type debug information ( breaks gdb < 6 .5 ) -gostabsabsincludes Store absolute/full include file paths in Stabs *** press enter *** -godwarfmethodclassprefix Prefix method names in DWARF with class name -godwarfcpp Simulate C++ debug information in DWARF -godwarfomflinnum Generate line number information in OMF LINNUM records in MS LINK format in addition to the DWARF debug information ( Open Watcom Debugger/Linker compatibility ) -gp Preserve case in stabs symbol names -gs Generate Stabs debug information -gt Trash local variables ( to detect uninitialized uses ; multiple 't' changes the trashing value ) -gv Generates programs traceable with Valgrind -gw Generate DWARFv2 debug information ( same as -gw2 ) -gw2 Generate DWARFv2 debug information -gw3 Generate DWARFv3 debug information -gw4 Generate DWARFv4 debug information ( experimental ) -i Information -iD Return compiler date -iSO Return compiler OS -iSP Return compiler host processor -iTO Return target OS -iTP Return target processor -iV Return short compiler version *** press enter *** -iW Return full compiler version -ia Return list of supported ABI targets -ic Return list of supported CPU instruction sets -if Return list of supported FPU instruction sets -ii Return list of supported inline assembler modes -io Return list of supported optimizations -ir Return list of recognized compiler and RTL features -it Return list of supported targets -iu Return list of supported microcontroller types -iw Return list of supported whole program optimizations -I<x> Add <x> to include path -k<x> Pass <x> to the linker -l Write logo -M<x> Set language mode to <x> -Mfpc Free Pascal dialect ( default ) -Mobjfpc FPC mode with Object Pascal support -Mdelphi Delphi 7 compatibility mode -Mtp TP/BP 7 .0 compatibility mode -Mmacpas Macintosh Pascal dialects compatibility mode -Miso ISO 7185 mode -Mextendedpascal ISO 10206 mode -Mdelphiunicode Delphi 2009 and later compatibility mode *** press enter *** -n Do not read the default config files -o<x> Change the name of the executable produced to <x> -O<x> Optimizations: -O- Disable optimizations -O1 Level 1 optimizations ( quick and debugger friendly ) -O2 Level 2 optimizations ( -O1 + quick optimizations ) -O3 Level 3 optimizations ( -O2 + slow optimizations ) -O4 Level 4 optimizations ( -O3 + optimizations which might have unexpected side effects ) -Oa<x> = <y> Set alignment -Oo [ NO ] <x> Enable or disable optimizations ; see fpc -i or fpc -io for possible values -Op<x> Set target cpu for optimizing ; see fpc -i or fpc -ic for possible values -OW<x> Generate whole-program optimization feedback for optimization <x> ; see fpc -i or fpc -iw for possible values -Ow<x> Perform whole-program optimization <x> ; see fpc -i or fpc -iw for possible values -Os Optimize for size rather than speed -pg Generate profile code for gprof ( defines FPC_PROFILE ) -P<x> Target CPU / compiler related options: -PB Show default compiler binary *** press enter *** -PP Show default target cpu -P<x> Set target CPU ( aarch64,arm,avr,i386,i8086,jvm,m68k,mips,mipsel,powerpc,powerpc64,sparc,x86_64 ) -R<x> Assembler reading style: -Rdefault Use default assembler for target -Ratt Read AT & T style assembler -Rintel Read Intel style assembler -S<x> Syntax options: -S2 Same as -Mobjfpc -Sc Support operators like C ( * = ,+ = ,/ = and - =) -Sa Turn on assertions -Sd Same as -Mdelphi -Se<x> Error options. <x> is a combination of the following: <n> : Compiler halts after the <n> errors ( default is 1 ) w : Compiler also halts after warnings n : Compiler also halts after notes h : Compiler also halts after hints -Sf Enable certain features in compiler and RTL ; see fpc -i or fpc -ir for possible values ) -Sg Enable LABEL and GOTO ( default in -Mtp and -Mdelphi ) -Sh Use reference counted strings ( ansistring by default ) instead of shortstrings *** press enter *** -Si Turn on inlining of procedures/functions declared as \"inline\" -Sj Allows typed constants to be writeable ( default in all modes ) -Sk Load fpcylix unit -SI<x> Set interface style to <x> -SIcom COM compatible interface ( default ) -SIcorba CORBA compatible interface -Sm Support macros like C ( global ) -So Same as -Mtp -Sr Transparent file names in ISO mode -Ss Constructor name must be init ( destructor must be done ) -Sv Support vector processing ( use CPU vector extensions if available ) -Sx Enable exception keywords ( default in Delphi/ObjFPC modes ) -Sy @<pointer> returns a typed pointer, same as $T + -s Do not call assembler and linker -sh Generate script to link on host -st Generate script to link on target -sr Skip register allocation phase ( use with -alr ) -T<x> Target operating system: -Taros AROS -Tdarwin Darwin/Mac OS X -Tdragonfly DragonFly BSD *** press enter *** -Tembedded Embedded -Tfreebsd FreeBSD -Tiphonesim iPhoneSimulator -Tlinux Linux -Tnetbsd NetBSD -Topenbsd OpenBSD -Tsolaris Solaris -Twin64 Win64 ( 64 bit Windows systems ) -u<x> Undefines the symbol <x> -U Unit options: -Un Do not check where the unit name matches the file name -Ur Generate release unit files ( never automatically recompiled ) -Us Compile a system unit -v<x> Be verbose. <x> is a combination of the following letters: e : Show errors ( default ) 0 : Show nothing ( except errors ) w : Show warnings u : Show unit info n : Show notes t : Show tried/used files h : Show hints c : Show conditionals i : Show general info d : Show debug info l : Show linenumbers r : Rhide/GCC compatibility mode s : Show time stamps q : Show message numbers a : Show everything x : Show info about invoked tools *** press enter *** b : Write file names messages p : Write tree.log with parse tree with full path v : Write fpcdebug.txt with z : Write output to stderr lots of debugging info m<x>,<y> : Do not show messages numbered <x> and <y> -V<x> Append '-<x>' to the used compiler binary name ( e.g. for version ) -W<x> Target-specific options ( targets ) -WA Specify native type application ( Windows ) -Wb Create a bundle instead of a library ( Darwin ) -WB Create a relocatable image ( Windows ) -WB<x> Set image base to <x> ( Windows ) -WC Specify console type application ( Windows ) -WD Use DEFFILE to export functions of DLL or EXE ( Windows ) -We Use external resources ( Darwin ) -WG Specify graphic type application ( Windows ) -Wi Use internal resources ( Darwin ) -WI Turn on/off the usage of import sections ( Windows ) -WM<x> Minimum Mac OS X deployment version: 10 .4, 10 .5.1, ... ( Darwin ) -WN Do not generate relocation code, needed for debugging ( Windows ) -WP<x> Minimum iOS deployment version: 8 .0, 8 .0.2, ... ( iphonesim ) -WR Generate relocation code ( Windows ) *** press enter *** -WX Enable executable stack ( Linux ) -X Executable options: -X9 Generate linkerscript for GNU Binutils ld older than version 2 .19.1 ( Linux ) -Xc Pass --shared/-dynamic to the linker ( BeOS, Darwin, FreeBSD, Linux ) -Xd Do not search default library path ( sometimes required for cross-compiling when not using -XR ) -Xe Use external linker -Xf Substitute pthread library name for linking ( BSD ) -Xg Create debuginfo in a separate file and add a debuglink section to executable -XD Try to link units dynamically ( defines FPC_LINK_DYNAMIC ) -Xi Use internal linker -XLA Define library substitutions for linking -XLO Define order of library linking -XLD Exclude default order of standard libraries -Xm Generate link map -XM<x> Set the name of the 'main' program routine ( default is 'main' ) -Xn Use target system native linker instead of GNU ld ( Solaris, AIX ) -Xp<x> First search for the compiler binary in the directory <x> *** press enter *** -XP<x> Prepend the binutils names with the prefix <x> -Xr<x> Set the linker ' s rlink-path to <x> ( needed for cross compile, see the ld manual for more information ) ( BeOS, Linux ) -XR<x> Prepend <x> to all linker search paths ( BeOS, Darwin, FreeBSD, Linux, Mac OS, Solaris ) -Xs Strip all symbols from executable -XS Try to link units statically ( default, defines FPC_LINK_STATIC ) -Xt Link with static libraries ( -static is passed to linker ) -Xv Generate table for Virtual Entry calls -XV Use VLink as external linker ( default on Amiga, MorphOS ) -XX Try to smartlink units ( defines FPC_LINK_SMART ) -? Show this help -h Shows this help without waiting Hmm panjang hehehe. but ini artinya fpc sudah siap untuk digunakan.","title":"Test"},{"location":"lang/pascal/intro/","text":"Pascal FPC IDE Intro Semua indah pada waktunya, rasanya ini berlaku pada semua hal tidak hanya pada disney mulan (animasi. memang ada versi yang lain? hehe). Disaat compiler lain masih susah untuk digunakan dan basic terlalu interpreter, pascal hadir untuk mengisi celah yang cukup dalam antara programmer C dan Basic. Ada beberapa versi untuk compiler pascal namun yang paling populer adalah versi dari borland, dengan nama borland turbo pascal. Bahasa pemograman ini diajarkan diberbagai jurusan di universitas terutama tehnik elektronika dan komputer (circa 2004). Namun seiring waktu pengguna pascal makin berkurang salah satu alasannya menurut saya pribadi adalah karena GCC, yups GCC yang di bundle dengan distro linux dan diedarkan dengan bebas, mampu menarik perhatian siapapun juga (termasuk saya) dan ketidak hadiran pascal pada linux membuat para developer beralih ke C/C++. Faktor lain dari tenggelamnya pascal juga karena kurang tersedianya compiler opensource yang bisa digunakan. Borland seperti pemain tunggal dibagian ini. Yups ini seperti Borland Vs Universe hehe. Namun para pecinta pascal tidak tinggal diam, mereka berkumpul dan membuat compiler pascal sendiri dibawah project opensource dengan nama Free Pascal atau disingkat FPC (Free pascal compiler), pascal mulai digunakan lagi di berbagai OS salah satunya Linux sampai sekarang.","title":"Intro"},{"location":"lang/pascal/intro/#pascal","text":"FPC IDE","title":"Pascal"},{"location":"lang/pascal/intro/#intro","text":"Semua indah pada waktunya, rasanya ini berlaku pada semua hal tidak hanya pada disney mulan (animasi. memang ada versi yang lain? hehe). Disaat compiler lain masih susah untuk digunakan dan basic terlalu interpreter, pascal hadir untuk mengisi celah yang cukup dalam antara programmer C dan Basic. Ada beberapa versi untuk compiler pascal namun yang paling populer adalah versi dari borland, dengan nama borland turbo pascal. Bahasa pemograman ini diajarkan diberbagai jurusan di universitas terutama tehnik elektronika dan komputer (circa 2004). Namun seiring waktu pengguna pascal makin berkurang salah satu alasannya menurut saya pribadi adalah karena GCC, yups GCC yang di bundle dengan distro linux dan diedarkan dengan bebas, mampu menarik perhatian siapapun juga (termasuk saya) dan ketidak hadiran pascal pada linux membuat para developer beralih ke C/C++. Faktor lain dari tenggelamnya pascal juga karena kurang tersedianya compiler opensource yang bisa digunakan. Borland seperti pemain tunggal dibagian ini. Yups ini seperti Borland Vs Universe hehe. Namun para pecinta pascal tidak tinggal diam, mereka berkumpul dan membuat compiler pascal sendiri dibawah project opensource dengan nama Free Pascal atau disingkat FPC (Free pascal compiler), pascal mulai digunakan lagi di berbagai OS salah satunya Linux sampai sekarang.","title":"Intro"},{"location":"lang/pascal/textIde/","text":"Text Ide Package FPC sudah dilengkapi dengan IDE sederhana dan entah mengapa dibuat sangat mirip dengan tampilan Borlan Turbo Pascal versi DOS. heheh. Cara menggunakan Buka terminal dan ketik fp , jika tidak ada error akan muncul tampilan seperti dibawah ini Tampilan FP IDE Jika pada tampilanmu tidak ada tulisan apa-apa itu wajar, gambar diatas saya ambil dari yang sudah ada di server, daripada bikin n upload lagi hehe.","title":"Text IDE"},{"location":"lang/pascal/textIde/#text-ide","text":"Package FPC sudah dilengkapi dengan IDE sederhana dan entah mengapa dibuat sangat mirip dengan tampilan Borlan Turbo Pascal versi DOS. heheh.","title":"Text Ide"},{"location":"lang/pascal/textIde/#cara-menggunakan","text":"Buka terminal dan ketik fp , jika tidak ada error akan muncul tampilan seperti dibawah ini Tampilan FP IDE Jika pada tampilanmu tidak ada tulisan apa-apa itu wajar, gambar diatas saya ambil dari yang sudah ada di server, daripada bikin n upload lagi hehe.","title":"Cara menggunakan"},{"location":"lang/pascal/contoh/helloWorld/","text":"Hello World Code yang paling sering dibuat dibumi hehehe The Code 1 2 3 4 5 6 7 program hello ; uses crt ; begin writeln ( 'Hello World' ) ; end .","title":"Hello World"},{"location":"lang/pascal/contoh/helloWorld/#hello-world","text":"Code yang paling sering dibuat dibumi hehehe","title":"Hello World"},{"location":"lang/pascal/contoh/helloWorld/#the-code","text":"1 2 3 4 5 6 7 program hello ; uses crt ; begin writeln ( 'Hello World' ) ; end .","title":"The Code"},{"location":"linux/artix/pengenalan/","text":"","title":"Intro"},{"location":"linux/artix/percona/","text":"Install Percona Percona merupakan salah satu alternative pengganti mysql selain mariadb. Pada web nya ditulis percona merupakan drop-in replacement dari mysql, jadi harusnya tinggal install dan langsung jalan? masalahnya ndak seperti itu setidaknya di Artix. Install Percona Seperti Software lain percona bisa diinstall dengan pacman atau yay dengan perintah $ pacman -S percona-server percona-server-clients percona-toolkit Create user dan group $ sudo useradd mysql $ sudo groupadd mysql Setup Open-rc service script Create file /etc/init.d/percona jangan lupa chmod a+x file tersebut. Edit dan copas script dibawah ini. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #!/usr/bin/openrc-run extra_stopped_commands = \"setup\" retry = \"60\" pidfile = \"/run/mysqld/ $RC_SVCNAME .pid\" command = \"/usr/bin/mysqld_safe\" command_args = \"--pid-file= $pidfile \" start_stop_daemon_args = \"--user mysql:mysql -b \" depend () { use net need localmount } start_pre () { required_dirs = $( getconf datadir \"/var/lib/mysql\" ) if [ ! -d $required_dirs /mysql ] ; then eerror \"Datadir ' $required_dirs ' is empty or invalid.\" eerror \"Run '/etc/init.d/percona setup' to create new database.\" fi } start_post () { ewaitfile 10 $( getconf socket \"/run/mysqld/mysqld.sock\" ) } setup () { ebegin \"Creating a new MySQL database\" mysqld --initialize --user = mysql --datadir = /var/lib/mysql eend $? } getconf () { v = $( my_print_defaults | grep ^-- $1 ) [ -z $v ] && echo $2 || echo ${ v #*= } } Create additional folder dan file Buat folder tempat database disimpan $ sudo mkdir /var/lib/mysql $ chown -R mysql:mysql /var/lib/mysql Create initial database Buat database awal dengan perintah $ sudo rc-service percona setup Perintah ini agak lama dikit sambil nunggu selesai periksa log service dengan perintah $ sudo tail -f /var/log/mysqld.log Akses database Jalankan percona server dengan perintah $ rc-service percona start Setelah pembuatan initial database selesai cari password sementara yang di gunakan saat setup initial database. $ sudo cat /var/log/mysqld.log | grep -i password gunakan password tersebut untuk mengakses database. Saya menggunakan heidiSQL (wine) untuk client saya dan pada awal connection, muncul form untuk mengganti password yang tadi saya gunakan. Done. Percona server sudah selesai diinstall dan tergantung user untuk memanfaatkannya, jangan lupa setup user baru hehe. Goodluck","title":"Setup Percona"},{"location":"linux/artix/percona/#install-percona","text":"Percona merupakan salah satu alternative pengganti mysql selain mariadb. Pada web nya ditulis percona merupakan drop-in replacement dari mysql, jadi harusnya tinggal install dan langsung jalan? masalahnya ndak seperti itu setidaknya di Artix.","title":"Install Percona"},{"location":"linux/artix/percona/#install-percona_1","text":"Seperti Software lain percona bisa diinstall dengan pacman atau yay dengan perintah $ pacman -S percona-server percona-server-clients percona-toolkit","title":"Install Percona"},{"location":"linux/artix/percona/#create-user-dan-group","text":"$ sudo useradd mysql $ sudo groupadd mysql","title":"Create user dan group"},{"location":"linux/artix/percona/#setup-open-rc-service-script","text":"Create file /etc/init.d/percona jangan lupa chmod a+x file tersebut. Edit dan copas script dibawah ini. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #!/usr/bin/openrc-run extra_stopped_commands = \"setup\" retry = \"60\" pidfile = \"/run/mysqld/ $RC_SVCNAME .pid\" command = \"/usr/bin/mysqld_safe\" command_args = \"--pid-file= $pidfile \" start_stop_daemon_args = \"--user mysql:mysql -b \" depend () { use net need localmount } start_pre () { required_dirs = $( getconf datadir \"/var/lib/mysql\" ) if [ ! -d $required_dirs /mysql ] ; then eerror \"Datadir ' $required_dirs ' is empty or invalid.\" eerror \"Run '/etc/init.d/percona setup' to create new database.\" fi } start_post () { ewaitfile 10 $( getconf socket \"/run/mysqld/mysqld.sock\" ) } setup () { ebegin \"Creating a new MySQL database\" mysqld --initialize --user = mysql --datadir = /var/lib/mysql eend $? } getconf () { v = $( my_print_defaults | grep ^-- $1 ) [ -z $v ] && echo $2 || echo ${ v #*= } }","title":"Setup Open-rc service script"},{"location":"linux/artix/percona/#create-additional-folder-dan-file","text":"Buat folder tempat database disimpan $ sudo mkdir /var/lib/mysql $ chown -R mysql:mysql /var/lib/mysql","title":"Create additional folder dan file"},{"location":"linux/artix/percona/#create-initial-database","text":"Buat database awal dengan perintah $ sudo rc-service percona setup Perintah ini agak lama dikit sambil nunggu selesai periksa log service dengan perintah $ sudo tail -f /var/log/mysqld.log","title":"Create initial database"},{"location":"linux/artix/percona/#akses-database","text":"Jalankan percona server dengan perintah $ rc-service percona start Setelah pembuatan initial database selesai cari password sementara yang di gunakan saat setup initial database. $ sudo cat /var/log/mysqld.log | grep -i password gunakan password tersebut untuk mengakses database. Saya menggunakan heidiSQL (wine) untuk client saya dan pada awal connection, muncul form untuk mengganti password yang tadi saya gunakan. Done. Percona server sudah selesai diinstall dan tergantung user untuk memanfaatkannya, jangan lupa setup user baru hehe. Goodluck","title":"Akses database"},{"location":"mcu/mcs51/hardware/","text":"","title":"Hardware"},{"location":"mcu/mcs51/helloWorldAsm/","text":"Hello Wolrd Assembly Style Seperti berbagai contoh bahasa pemograman lain. Pogram pertama yang kita buat adalah Hello World hehe. but bukan berarti memunculkan kata Hello World di layar PC namun untuk menyalakan dan mematikan LED atau lebih tepat nya pin pada AT89S52 dengan interval tertentu. Psudo Code 1 2 3 4 5 6 main: set pin PORT1.0 menjadi LOW delay 1 detik set pin PORT1.0 menjadi HIGH delay 1 detik lompat ke main Dari diatas dapat dibangun program assembly seperti dibawah ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 jmp main delay: ; delay nop ; seharusnya disini dibuat looping sampai 1s. Masalahnya ; untuk simulasi hal ini sangat menggangu karena ; simulasi tidak secepat hardware asli. ; jadi untuk simulasi digunakan nop == 1clock ret main: ; main setb p1.0 ; set == buat high p1.0 call delay ; delay 1s clr p1.0 ; clr == buat low p1.0 call delay ; delay 1s jmp main ; lompat ke main end ketik atau copas code diatas pada MCU 8051 IDE dan tekan \"Compile\"(F11) jika tidak ada error pada panel message tekan tombol \"Start debug\"(F5) maka akan muncul garis warna hijau di code kita, tekan \"Step\"(F7) untuk mulai menjalankan pogram step by step. Perhatikan panel \"Simulator\" pada bagian \"P1\" nilai dari HEX dan BIN akan berubah-ubah saat pogram sampai pada baris setb P1.0 dan clr P1.0 jika program ini dimasukkan atau di downloadkan pada AT89S52 maka teganan dari P1.0 akan berubah dari 0v ke 5v dan kembali lagi. Materi Lanjutan Untuk belajar lebih banyak tentang assembly pada AT89S52 silahkan dilanjutkan pada \"Assembly 8051\" Goodluck.","title":"Hello World Assembly"},{"location":"mcu/mcs51/helloWorldAsm/#hello-wolrd-assembly-style","text":"Seperti berbagai contoh bahasa pemograman lain. Pogram pertama yang kita buat adalah Hello World hehe. but bukan berarti memunculkan kata Hello World di layar PC namun untuk menyalakan dan mematikan LED atau lebih tepat nya pin pada AT89S52 dengan interval tertentu.","title":"Hello Wolrd Assembly Style"},{"location":"mcu/mcs51/helloWorldAsm/#psudo-code","text":"1 2 3 4 5 6 main: set pin PORT1.0 menjadi LOW delay 1 detik set pin PORT1.0 menjadi HIGH delay 1 detik lompat ke main Dari diatas dapat dibangun program assembly seperti dibawah ini 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 jmp main delay: ; delay nop ; seharusnya disini dibuat looping sampai 1s. Masalahnya ; untuk simulasi hal ini sangat menggangu karena ; simulasi tidak secepat hardware asli. ; jadi untuk simulasi digunakan nop == 1clock ret main: ; main setb p1.0 ; set == buat high p1.0 call delay ; delay 1s clr p1.0 ; clr == buat low p1.0 call delay ; delay 1s jmp main ; lompat ke main end ketik atau copas code diatas pada MCU 8051 IDE dan tekan \"Compile\"(F11) jika tidak ada error pada panel message tekan tombol \"Start debug\"(F5) maka akan muncul garis warna hijau di code kita, tekan \"Step\"(F7) untuk mulai menjalankan pogram step by step. Perhatikan panel \"Simulator\" pada bagian \"P1\" nilai dari HEX dan BIN akan berubah-ubah saat pogram sampai pada baris setb P1.0 dan clr P1.0 jika program ini dimasukkan atau di downloadkan pada AT89S52 maka teganan dari P1.0 akan berubah dari 0v ke 5v dan kembali lagi.","title":"Psudo Code"},{"location":"mcu/mcs51/helloWorldAsm/#materi-lanjutan","text":"Untuk belajar lebih banyak tentang assembly pada AT89S52 silahkan dilanjutkan pada \"Assembly 8051\" Goodluck.","title":"Materi Lanjutan"},{"location":"mcu/mcs51/helloWorldC/","text":"Hello World C style Sama seperti pada halaman \"Hello World Asm Style\" , pogram ini untuk menyalakan dan mematikan Pin pada AT89S52. Hanya saja menggunakan C (SDCC). Pembuatan Project Baru Hampir sama dengan step dari halaman \"Software\" pada bab \"Create New Project\" , namun pada step \"Save As\" simpan dengan nama main.c , lihat perbedaan extension nya untuk assembly adalah .asm sedang untuk C adalah .c , berikut step nya. Buat folder kosong dengan nama coba02 pada toolbar \"Project\" pilih \"New\" Image: New Project isi dengan Project Name = coba02 (jangan pakai spasi dan jangan terlalu panjang) Project Directory = /home/<user>/mcs51/coba01 (jangan pakai spasi dan jangan terlalu panjang) Type = AT89S52 tekan \"OK\", jika ada tawaran untuk membuat folder baru tekan saya \"Yes\" Langkah pertama yang harus dilakukan adalah save file, tekan menu \"File\" pada toolbar dan pilih \"Save As\" maka akan muncul gambar seperti berikut Image: Save As pada menu \"Filter\" terlihat jenis file yang disupport oleh MCU 8051 IDE yakni .asm == 8051 assembly .c == SDCC C source .h == SDCC C Header untuk saat ini kita akan mencoba menggunakan file C. pada gambar \"Save As\" isi \"Location\" dengan coba02.c dan filter pilih * atau .c . Jika sesuai dengan urutan maka hasil nya seperti dibawah ini. Image: New Project Done. The Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <8052.h> //! function delay //! sama seperti pada contoh assembly //! pada hw asli ini berisi loop sampai 1detik namum //! pada simulasi sangat mengganggu karena simulasi //! tidak secepat hw asli. jadi diganti dengan delay //! 1clock. void delay ( void ) { __asm nop __endasm ; } //! fungsi main void main ( void ) { while ( 1 ){ // loop awal P1_0 = 0 ; // pin P1.0 == 0v delay (); // delay P1_0 = 1 ; // pin P1.0 == 5v delay (); // delay } // ulang ke awal lagi } Copas atau ketik ulang code diatas dan tekan F11 untuk compile, jika tidak ada pesan error pada panel message, maka bisa lanjut kemode debug dengan menekan tombol F5, jalankan pogram baris per baris dengan menekan tombol F6. Untuk contoh-contoh yang lebih menarik bisa dilanjutkan di \"MCS51 C\" Goodluck","title":"Hello World C"},{"location":"mcu/mcs51/helloWorldC/#hello-world-c-style","text":"Sama seperti pada halaman \"Hello World Asm Style\" , pogram ini untuk menyalakan dan mematikan Pin pada AT89S52. Hanya saja menggunakan C (SDCC).","title":"Hello World C style"},{"location":"mcu/mcs51/helloWorldC/#pembuatan-project-baru","text":"Hampir sama dengan step dari halaman \"Software\" pada bab \"Create New Project\" , namun pada step \"Save As\" simpan dengan nama main.c , lihat perbedaan extension nya untuk assembly adalah .asm sedang untuk C adalah .c , berikut step nya. Buat folder kosong dengan nama coba02 pada toolbar \"Project\" pilih \"New\" Image: New Project isi dengan Project Name = coba02 (jangan pakai spasi dan jangan terlalu panjang) Project Directory = /home/<user>/mcs51/coba01 (jangan pakai spasi dan jangan terlalu panjang) Type = AT89S52 tekan \"OK\", jika ada tawaran untuk membuat folder baru tekan saya \"Yes\" Langkah pertama yang harus dilakukan adalah save file, tekan menu \"File\" pada toolbar dan pilih \"Save As\" maka akan muncul gambar seperti berikut Image: Save As pada menu \"Filter\" terlihat jenis file yang disupport oleh MCU 8051 IDE yakni .asm == 8051 assembly .c == SDCC C source .h == SDCC C Header untuk saat ini kita akan mencoba menggunakan file C. pada gambar \"Save As\" isi \"Location\" dengan coba02.c dan filter pilih * atau .c . Jika sesuai dengan urutan maka hasil nya seperti dibawah ini. Image: New Project Done.","title":"Pembuatan Project Baru"},{"location":"mcu/mcs51/helloWorldC/#the-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <8052.h> //! function delay //! sama seperti pada contoh assembly //! pada hw asli ini berisi loop sampai 1detik namum //! pada simulasi sangat mengganggu karena simulasi //! tidak secepat hw asli. jadi diganti dengan delay //! 1clock. void delay ( void ) { __asm nop __endasm ; } //! fungsi main void main ( void ) { while ( 1 ){ // loop awal P1_0 = 0 ; // pin P1.0 == 0v delay (); // delay P1_0 = 1 ; // pin P1.0 == 5v delay (); // delay } // ulang ke awal lagi } Copas atau ketik ulang code diatas dan tekan F11 untuk compile, jika tidak ada pesan error pada panel message, maka bisa lanjut kemode debug dengan menekan tombol F5, jalankan pogram baris per baris dengan menekan tombol F6. Untuk contoh-contoh yang lebih menarik bisa dilanjutkan di \"MCS51 C\" Goodluck","title":"The Code"},{"location":"mcu/mcs51/intro/","text":"Pengenalan Intel 8051(mcs51) merupakan micro controller yang cukup tua. dari wikipedia, intel mulai mengembangkannya pada tahun 1980 1 . cukup tua hehe. Meskipun sudah tua mcs51 sampai sekarang masih tetap dikembangkan dan digunakan tidak hanya itu bahkan beberapa produsen meningkatkan performa mcs51 yang sebelumnya membutuhkan 12cycle clock(tiks) untuk satu instruksi menjadi 1-4tiks saja, selain itu juga penambahan beberapa periperal modern seperti ADC Gated GPIO PWM CAN LCD RTC Dll menjadikan mcs51 masih populer sampai sekarang. Dari sisi software sampai sekarang pun, mcs51 masih terus dikembangkan baik secara opensource atau proprietary. diantaranya Keil - asm dan c IAR - asm dan c SDCC - asm dan c Pada dokument ini akan menggunakan seri AT89S52 dimana hampir tidak ada perubahan performa dan periperal dibandingkan seri keluarkan intel selain perubahan dari EEPROM pada mcs51 menjadi flash dan sub system ISP pada seri AT89S52. https://en.wikipedia.org/wiki/Intel_MCS-51 \u21a9","title":"Intro"},{"location":"mcu/mcs51/intro/#pengenalan","text":"Intel 8051(mcs51) merupakan micro controller yang cukup tua. dari wikipedia, intel mulai mengembangkannya pada tahun 1980 1 . cukup tua hehe. Meskipun sudah tua mcs51 sampai sekarang masih tetap dikembangkan dan digunakan tidak hanya itu bahkan beberapa produsen meningkatkan performa mcs51 yang sebelumnya membutuhkan 12cycle clock(tiks) untuk satu instruksi menjadi 1-4tiks saja, selain itu juga penambahan beberapa periperal modern seperti ADC Gated GPIO PWM CAN LCD RTC Dll menjadikan mcs51 masih populer sampai sekarang. Dari sisi software sampai sekarang pun, mcs51 masih terus dikembangkan baik secara opensource atau proprietary. diantaranya Keil - asm dan c IAR - asm dan c SDCC - asm dan c Pada dokument ini akan menggunakan seri AT89S52 dimana hampir tidak ada perubahan performa dan periperal dibandingkan seri keluarkan intel selain perubahan dari EEPROM pada mcs51 menjadi flash dan sub system ISP pada seri AT89S52. https://en.wikipedia.org/wiki/Intel_MCS-51 \u21a9","title":"Pengenalan"},{"location":"mcu/mcs51/sdcc/","text":"SDCC Ada beberapa software C compiler untuk AT89S52 seperti yang sudah dijelaskan pada document \"MCS 51 Software\" . Pada document ini hanya untuk SDCC dikarenakan SDCC merupakan software open source dan dapat di download dengan gratis. Instalasi SDCC dapat didownload pada alamat http://sdcc.sourceforge.net pada windows installasinya cukup sederhana tinggal next, next, next, yes, finish. Pada linux SDCC umumnya sudah terdapat pada repo masing-masing, untuk Artix gunakan pacman atau yay untuk instalasi, dengan perintah $ pacman -S sdcc atau $ yay -S sdcc Untuk memastikan SDCC sudah terinstall dengan benar buka terminal dan jalankan perintah sdcc -v jika muncul keterangan seperti dibawah ini berarti SDCC sudah siap digunakan. 1 2 3 $ sdcc -v SDCC : mcs51/z80/z180/r2k/r3ka/gbz80/tlcs90/ez80_z80/ds390/pic16/pic14/TININative/ds400/hc08/s08/stm8/pdk13/pdk14/pdk15 4 .0.0 #11528 (Linux) published under GNU General Public License ( GPL ) Yups SDCC memang bisa digunakan untuk menghasilkan code(target) untuk berbagai macam micro controller, namum pada document ini hanya dibahas untuk target mcs51.","title":"SDCC"},{"location":"mcu/mcs51/sdcc/#sdcc","text":"Ada beberapa software C compiler untuk AT89S52 seperti yang sudah dijelaskan pada document \"MCS 51 Software\" . Pada document ini hanya untuk SDCC dikarenakan SDCC merupakan software open source dan dapat di download dengan gratis.","title":"SDCC"},{"location":"mcu/mcs51/sdcc/#instalasi","text":"SDCC dapat didownload pada alamat http://sdcc.sourceforge.net pada windows installasinya cukup sederhana tinggal next, next, next, yes, finish. Pada linux SDCC umumnya sudah terdapat pada repo masing-masing, untuk Artix gunakan pacman atau yay untuk instalasi, dengan perintah $ pacman -S sdcc atau $ yay -S sdcc Untuk memastikan SDCC sudah terinstall dengan benar buka terminal dan jalankan perintah sdcc -v jika muncul keterangan seperti dibawah ini berarti SDCC sudah siap digunakan. 1 2 3 $ sdcc -v SDCC : mcs51/z80/z180/r2k/r3ka/gbz80/tlcs90/ez80_z80/ds390/pic16/pic14/TININative/ds400/hc08/s08/stm8/pdk13/pdk14/pdk15 4 .0.0 #11528 (Linux) published under GNU General Public License ( GPL ) Yups SDCC memang bisa digunakan untuk menghasilkan code(target) untuk berbagai macam micro controller, namum pada document ini hanya dibahas untuk target mcs51.","title":"Instalasi"},{"location":"mcu/mcs51/software/","text":"Software Note Tanpa Software/Firmware pun AT89S52 masih sangat berguna, sebagai gantungan kunci hehe. Fungsi Software Fungsi dari software ini adalah untuk menggerakkan berbagai peripheral yang tersedia didalam AT89S52 misalnya adalah Port Input Output (PIO), Timer, Serial Port, dll. Tidak seperti bagian hardware yang sangat miskin dibanding micro controller lainnya, AT89S52 memiliki dukungan yang melimpah di bagian ini. Mulai dari asembler, c compiler, pascal compiler, basic compiler sampai simulator bisa dicari dengan sangat mudah. untuk keperluan pembuatan software/firmware dari AT89S52 saya menggunakan MCU 8051 IDE yang bagi saya sudah lebih dari cukup untuk membuat firmware C atau assembly. MCU 8051 IDE Tidak seperti software PC pada umumnya, software pada micro controller tidak bisa dijalankan(klik 2x) pada PC, hal ini dikarenakan cpu pada PC(x86 atau compatilbe) berbeda dengan cpu AT89S52, sehingga untuk menjalankan software ini digunakan emulator, opsi lainnya adalah mencobanya langsung ke dev board, opsi terakhir ini kurang cocok untuk latihan pemograman AT89S52 selain harus beli board nya juga proses pemindahan data dari PC ke AT89S52 relative ribet hehe dan juga untuk belajar AT89S52 ini salah satu prosesnya adalah debugging, men-debug dengan menggunakan board langsung membutuhkan alat-alat yang relative mahal, jadi solusi emulator masih solusi terbaik untuk saat ini. MCU 8051 IDE memiliki berbagai fitur yang sangat menarik diantaranya Mendukung bahasa C dan assembly. Mendukung debugger. Mendukung berbagai macam komponen virtual seperti switch, LCD, dll. Cara Install MCU 8051 IDE bisa digunakan di berbagai OS, diantaranya Linux, Windows, BSD, dll. Pada dokument ini hanya membahas cara install pada Linux dan windows. Linux Pada Artix linux untuk MCU 8051 IDE terdapat pada aur, cara termudah menginstallnya adalah dengan menggunakan yay 1 $ yay -S mcu8051ide Setelah MCU 8051 IDE berhasil terinstall akan muncul shortcut di application menu. atau juga bisa dijalankan melalui shell dengan perintah 1 $ mcu8051ide Windows MCU 8051 IDE bisa didownload pada situs https://sourceforge.net/projects/mcu8051ide/ cara install nya seperti biasa klik2x dan next, next, next, finish. hehe. Create New Project Image: Tampilah msc8051ide di Artix Linux Jika gambar \"mcs51ide\" muncul saat applikasi dijalankan, lanjut ke langkah selanjutnya pada toolbar \"Project\" pilih \"New\" Image: New Project isi dengan Project Name = coba01 (jangan pakai spasi dan jangan terlalu panjang) Project Directory = /home/<user>/mcs51/coba01 Type = AT89S52 tekan \"OK\", jika ada tawaran untuk membuat folder baru tekan saya \"Yes\" Langkah pertama yang harus dilakukan adalah save file, tekan menu \"File\" pada toolbar dan pilih \"Save As\" maka akan muncul gambar seperti berikut Image: Save As pada menu \"Filter\" terlihat jenis file yang disupport oleh MCU 8051 IDE yakni .asm == 8051 assembly .c == SDCC C source .h == SDCC C Header untuk saat ini kita akan mencoba menggunakan file assembly. pada gambar \"Save As\" isi \"Location\" dengan coba01.asm dan filter pilih * atau .asm . Jika sesuai dengan urutan maka hasil nya seperti dibawah ini. Image: New Project Done.","title":"Software"},{"location":"mcu/mcs51/software/#software","text":"Note Tanpa Software/Firmware pun AT89S52 masih sangat berguna, sebagai gantungan kunci hehe.","title":"Software"},{"location":"mcu/mcs51/software/#fungsi-software","text":"Fungsi dari software ini adalah untuk menggerakkan berbagai peripheral yang tersedia didalam AT89S52 misalnya adalah Port Input Output (PIO), Timer, Serial Port, dll. Tidak seperti bagian hardware yang sangat miskin dibanding micro controller lainnya, AT89S52 memiliki dukungan yang melimpah di bagian ini. Mulai dari asembler, c compiler, pascal compiler, basic compiler sampai simulator bisa dicari dengan sangat mudah. untuk keperluan pembuatan software/firmware dari AT89S52 saya menggunakan MCU 8051 IDE yang bagi saya sudah lebih dari cukup untuk membuat firmware C atau assembly.","title":"Fungsi Software"},{"location":"mcu/mcs51/software/#mcu-8051-ide","text":"Tidak seperti software PC pada umumnya, software pada micro controller tidak bisa dijalankan(klik 2x) pada PC, hal ini dikarenakan cpu pada PC(x86 atau compatilbe) berbeda dengan cpu AT89S52, sehingga untuk menjalankan software ini digunakan emulator, opsi lainnya adalah mencobanya langsung ke dev board, opsi terakhir ini kurang cocok untuk latihan pemograman AT89S52 selain harus beli board nya juga proses pemindahan data dari PC ke AT89S52 relative ribet hehe dan juga untuk belajar AT89S52 ini salah satu prosesnya adalah debugging, men-debug dengan menggunakan board langsung membutuhkan alat-alat yang relative mahal, jadi solusi emulator masih solusi terbaik untuk saat ini. MCU 8051 IDE memiliki berbagai fitur yang sangat menarik diantaranya Mendukung bahasa C dan assembly. Mendukung debugger. Mendukung berbagai macam komponen virtual seperti switch, LCD, dll.","title":"MCU 8051 IDE"},{"location":"mcu/mcs51/software/#cara-install","text":"MCU 8051 IDE bisa digunakan di berbagai OS, diantaranya Linux, Windows, BSD, dll. Pada dokument ini hanya membahas cara install pada Linux dan windows.","title":"Cara Install"},{"location":"mcu/mcs51/software/#linux","text":"Pada Artix linux untuk MCU 8051 IDE terdapat pada aur, cara termudah menginstallnya adalah dengan menggunakan yay 1 $ yay -S mcu8051ide Setelah MCU 8051 IDE berhasil terinstall akan muncul shortcut di application menu. atau juga bisa dijalankan melalui shell dengan perintah 1 $ mcu8051ide","title":"Linux"},{"location":"mcu/mcs51/software/#windows","text":"MCU 8051 IDE bisa didownload pada situs https://sourceforge.net/projects/mcu8051ide/ cara install nya seperti biasa klik2x dan next, next, next, finish. hehe.","title":"Windows"},{"location":"mcu/mcs51/software/#create-new-project","text":"Image: Tampilah msc8051ide di Artix Linux Jika gambar \"mcs51ide\" muncul saat applikasi dijalankan, lanjut ke langkah selanjutnya pada toolbar \"Project\" pilih \"New\" Image: New Project isi dengan Project Name = coba01 (jangan pakai spasi dan jangan terlalu panjang) Project Directory = /home/<user>/mcs51/coba01 Type = AT89S52 tekan \"OK\", jika ada tawaran untuk membuat folder baru tekan saya \"Yes\" Langkah pertama yang harus dilakukan adalah save file, tekan menu \"File\" pada toolbar dan pilih \"Save As\" maka akan muncul gambar seperti berikut Image: Save As pada menu \"Filter\" terlihat jenis file yang disupport oleh MCU 8051 IDE yakni .asm == 8051 assembly .c == SDCC C source .h == SDCC C Header untuk saat ini kita akan mencoba menggunakan file assembly. pada gambar \"Save As\" isi \"Location\" dengan coba01.asm dan filter pilih * atau .asm . Jika sesuai dengan urutan maka hasil nya seperti dibawah ini. Image: New Project Done.","title":"Create New Project"},{"location":"mcu/mcs51/variables/","text":"","title":"Variables"},{"location":"mcu/mcs51/contoh/countDownLed/","text":"Count Down Led C Intro Pogram ini akan mengeluarkan nilai 255(0xFF) - 0(0x00) pada port P1. The Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <8052.h> #include <stdint.h> inline void delay ( void ) { __asm nop __endasm ; } void main ( void ) { while ( 1 ){ uint8_t i ; for ( i = 0xff ; i > 0 ; i -- ) { P1 = i ; delay (); } } }","title":"Count Down Led C"},{"location":"mcu/mcs51/contoh/countDownLed/#count-down-led-c","text":"","title":"Count Down Led C"},{"location":"mcu/mcs51/contoh/countDownLed/#intro","text":"Pogram ini akan mengeluarkan nilai 255(0xFF) - 0(0x00) pada port P1.","title":"Intro"},{"location":"mcu/mcs51/contoh/countDownLed/#the-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <8052.h> #include <stdint.h> inline void delay ( void ) { __asm nop __endasm ; } void main ( void ) { while ( 1 ){ uint8_t i ; for ( i = 0xff ; i > 0 ; i -- ) { P1 = i ; delay (); } } }","title":"The Code"},{"location":"mcu/mcs51/contoh/countDownLedAsm/","text":"Count Down Led Assembly Sama seperti contoh Count Down Led C cuman ini pakai assembly. The Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 var01 equ 0x30 ; buat variable var01 ; dengan type byte jmp main delay: nop ret main: mov P1 , #0 xff mov R0 , #var01 ; isi variable var01 dengan nilai 255 mov @ R0 , #255 ; di dalam asm kayak gini cara isi variable ; ndak bisa langsung hehe. mainFor1: mov P1 , var01 djnz var01 , mainFor1 ; djnz, decrese jump if var01 not zero ke mainFor1 call delay jmp main end","title":"Count Down Led Asm"},{"location":"mcu/mcs51/contoh/countDownLedAsm/#count-down-led-assembly","text":"Sama seperti contoh Count Down Led C cuman ini pakai assembly.","title":"Count Down Led Assembly"},{"location":"mcu/mcs51/contoh/countDownLedAsm/#the-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 var01 equ 0x30 ; buat variable var01 ; dengan type byte jmp main delay: nop ret main: mov P1 , #0 xff mov R0 , #var01 ; isi variable var01 dengan nilai 255 mov @ R0 , #255 ; di dalam asm kayak gini cara isi variable ; ndak bisa langsung hehe. mainFor1: mov P1 , var01 djnz var01 , mainFor1 ; djnz, decrese jump if var01 not zero ke mainFor1 call delay jmp main end","title":"The Code"},{"location":"mcu/mcs51/contoh/countUpLed/","text":"Count Up Led C Pogram sederhana untuk membuat counter up 0(0x00) sampai 255(0xff) pada port P1 secara biner. The Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <8052.h> #include <stdint.h> void delay ( void ) { __asm nop __endasm ; } void main ( void ) { while ( 1 ){ uint8_t i ; for ( i = 0 ; i < 0xff ; i ++ ) { P1 = i ; delay (); } } }","title":"Count Up Led C"},{"location":"mcu/mcs51/contoh/countUpLed/#count-up-led-c","text":"Pogram sederhana untuk membuat counter up 0(0x00) sampai 255(0xff) pada port P1 secara biner.","title":"Count Up Led C"},{"location":"mcu/mcs51/contoh/countUpLed/#the-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <8052.h> #include <stdint.h> void delay ( void ) { __asm nop __endasm ; } void main ( void ) { while ( 1 ){ uint8_t i ; for ( i = 0 ; i < 0xff ; i ++ ) { P1 = i ; delay (); } } }","title":"The Code"},{"location":"mcu/mcs51/contoh/countUpLedAsm/","text":"Count Up Led Assembly Sebagai perbandingan antara C dengan Assembly. headache The Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 var01 equ 0x30 ; buat variable var01 ; dengan type byte jmp main delay: nop ret main: mov P1 , #0 h mov R0 , #var01 ; isi variable var01 dengan nilai 255 mov @ R0 , #255 ; di dalam asm kayak gini cara isi variable ; ndak bisa langsung hehe. mainFor1: inc P1 djnz var01 , mainFor1 ; djnz, decrese jump if var01 not zero ke mainFor1 call delay jmp main end","title":"Count Up Led Asm"},{"location":"mcu/mcs51/contoh/countUpLedAsm/#count-up-led-assembly","text":"Sebagai perbandingan antara C dengan Assembly. headache","title":"Count Up Led Assembly"},{"location":"mcu/mcs51/contoh/countUpLedAsm/#the-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 var01 equ 0x30 ; buat variable var01 ; dengan type byte jmp main delay: nop ret main: mov P1 , #0 h mov R0 , #var01 ; isi variable var01 dengan nilai 255 mov @ R0 , #255 ; di dalam asm kayak gini cara isi variable ; ndak bisa langsung hehe. mainFor1: inc P1 djnz var01 , mainFor1 ; djnz, decrese jump if var01 not zero ke mainFor1 call delay jmp main end","title":"The Code"}]}